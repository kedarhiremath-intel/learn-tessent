// ##############################################################################
// ## Intel Top Secret                                                         ##
// ##############################################################################
// ## Copyright (C) Intel Corporation.                                         ##
// ##                                                                          ##
// ## This is the property of Intel Corporation and may only be utilized       ##
// ## pursuant to a written Restricted Use Nondisclosure Agreement and any     ##
// ## applicable licenses with Intel Corporation.  It may not be used,         ##
// ## reproduced, or disclosed to others except in accordance with the terms   ##
// ## and conditions of such agreement.                                        ##
// ##                                                                          ##
// ## All products, processes, computer systems, dates, and figures            ##
// ## specified are preliminary based on current expectations, and are         ##
// ## subject to change without notice.                                        ##
// ##############################################################################
// ## Text_Tag % __Placeholder neutral1


`ifdef INTCNOPWR
      //do nothing
`else
      `define POWER_AWARE_MODE
`endif

`ifdef functional
      `define FUNCTIONAL
`endif



`timescale 1ps/1ps


`ifdef FUNCTIONAL
  `define glsdelay 1
  `ifdef no_unit_delay
          `define cell_delay_value
          `define seq_delay_value
          `define clkcell_delay_value
          `define clkseq_delay_value
  `elsif seq_unit_delay
          `define cell_delay_value
          `define seq_delay_value #1
          `define clkcell_delay_value
          `define clkseq_delay_value #1
  `elsif parameterized_delay
          `define cell_delay_value #(glsdelay)
          `define seq_delay_value #(glsdelay)
          `define clkcell_delay_value #(glsdelay)
          `define clkseq_delay_value #(glsdelay)
  `else   
          `define cell_delay_value #1
          `define seq_delay_value #1
          `define clkcell_delay_value #1
          `define clkseq_delay_value #1
  `endif
  `ifdef clk_no_delay
          `define clkcell_delay_value
          `define clkseq_delay_value
  `endif
`endif

  
`ifdef FUNCTIONAL
     `ifndef fun000ad_delay
        `define fun000ad_delay `seq_delay_value
     `endif
     `ifndef fun010ad_delay
        `define fun010ad_delay `seq_delay_value
     `endif
     `ifndef fun040ad_delay
        `define fun040ad_delay `seq_delay_value
     `endif
     `ifndef fun080ad_delay
        `define fun080ad_delay `seq_delay_value
     `endif
     `ifndef fun200ad_delay
        `define fun200ad_delay `seq_delay_value
     `endif
     `ifndef fun280ad_delay
        `define fun280ad_delay `seq_delay_value
     `endif
     `ifndef fun400ad_delay
        `define fun400ad_delay `seq_delay_value
     `endif
     `ifndef fun480ad_delay
        `define fun480ad_delay `seq_delay_value
     `endif
     `ifndef fuy000ad_delay
        `define fuy000ad_delay `seq_delay_value
     `endif
     `ifndef fuz000ad_delay
        `define fuz000ad_delay `seq_delay_value
     `endif
     `ifndef fuz010ad_delay
        `define fuz010ad_delay `seq_delay_value
     `endif
     `ifndef fuz040ad_delay
        `define fuz040ad_delay `seq_delay_value
     `endif
     `ifndef fuz080ad_delay
        `define fuz080ad_delay `seq_delay_value
     `endif
     `ifndef fuz200ad_delay
        `define fuz200ad_delay `seq_delay_value
     `endif
     `ifndef fuz400ad_delay
        `define fuz400ad_delay `seq_delay_value
     `endif
     `ifndef fuz440ad_delay
        `define fuz440ad_delay `seq_delay_value
     `endif
     `ifndef fuz800ad_delay
        `define fuz800ad_delay `seq_delay_value
     `endif
     `ifndef fvn003ad_delay
        `define fvn003ad_delay `seq_delay_value
     `endif
     `ifndef fvn00bad_delay
        `define fvn00bad_delay `seq_delay_value
     `endif
     `ifndef fvn043ad_delay
        `define fvn043ad_delay `seq_delay_value
     `endif
     `ifndef fvn08bad_delay
        `define fvn08bad_delay `seq_delay_value
     `endif
     `ifndef fvy003ad_delay
        `define fvy003ad_delay `seq_delay_value
     `endif
     `ifndef fvz003ad_delay
        `define fvz003ad_delay `seq_delay_value
     `endif
     `ifndef fvz00bad_delay
        `define fvz00bad_delay `seq_delay_value
     `endif
     `ifndef fvz043ad_delay
        `define fvz043ad_delay `seq_delay_value
     `endif
     `ifndef fvz08bad_delay
        `define fvz08bad_delay `seq_delay_value
     `endif
     `ifndef fvz203ad_delay
        `define fvz203ad_delay `seq_delay_value
     `endif
     `ifndef fvz403ad_delay
        `define fvz403ad_delay `seq_delay_value
     `endif
     `ifndef fvz803ad_delay
        `define fvz803ad_delay `seq_delay_value
     `endif
     `ifndef lan003ad_delay
        `define lan003ad_delay `seq_delay_value
     `endif
     `ifndef lan00bad_delay
        `define lan00bad_delay `seq_delay_value
     `endif
     `ifndef lan083ad_delay
        `define lan083ad_delay `seq_delay_value
     `endif
     `ifndef lan08bad_delay
        `define lan08bad_delay `seq_delay_value
     `endif
     `ifndef lsn000ad_delay
        `define lsn000ad_delay `seq_delay_value
     `endif
     `ifndef lsn080ad_delay
        `define lsn080ad_delay `seq_delay_value
     `endif
     `ifndef lsn200ad_delay
        `define lsn200ad_delay `seq_delay_value
     `endif
     `ifndef lsn280ad_delay
        `define lsn280ad_delay `seq_delay_value
     `endif
     `ifndef lsn400ad_delay
        `define lsn400ad_delay `seq_delay_value
     `endif
     `ifndef lsn480ad_delay
        `define lsn480ad_delay `seq_delay_value
     `endif
     `ifndef ltn000ad_delay
        `define ltn000ad_delay `seq_delay_value
     `endif
     `ifndef ltn080ad_delay
        `define ltn080ad_delay `seq_delay_value
     `endif
     `ifndef ltn400ad_delay
        `define ltn400ad_delay `seq_delay_value
     `endif
     `ifndef ltnf10ad_delay
        `define ltnf10ad_delay `seq_delay_value
     `endif
  `endif



primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0( MGM_CLK0, clk `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_CLK0;
  input clk;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //clk vcc, vssx: MGM_CLK0
    1  1  0: 1;
    0  1  0: 0;
  `else
  //clk: MGM_CLK0
    1: 1;
    0: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  n  ?  1  0  ?  :  ?  :  -;
     ?  0  n  ?  1  0  ?  :  0  :  0;
     0  ?  n  ?  1  0  ?  :  1  :  1;
     ?  0  r  0  1  0  ?  :  ?  :  0;
     1  0  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  r  1  1  0  ?  :  ?  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     0  0  ?  *  1  0  ?  :  ?  :  -;
     0  ?  ?  *  1  0  ?  :  1  :  1;
     ?  0  ?  *  1  0  ?  :  0  :  0;
     0  *  ?  ?  1  0  ?  :  1  :  1;
     *  0  ?  ?  1  0  ?  :  0  :  0;
     ?  0  *  0  1  0  ?  :  0  :  0;
     0  ?  *  1  1  0  ?  :  1  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  n  ?  ?  :  ?  :  -;
     ?  0  n  ?  ?  :  0  :  0;
     0  ?  n  ?  ?  :  1  :  1;
     ?  0  r  0  ?  :  ?  :  0;
     1  0  ?  ?  ?  :  ?  :  0;
     0  ?  r  1  ?  :  ?  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     0  0  ?  *  ?  :  ?  :  -;
     0  ?  ?  *  ?  :  1  :  1;
     ?  0  ?  *  ?  :  0  :  0;
     0  *  ?  ?  ?  :  1  :  1;
     *  0  ?  ?  ?  :  0  :  0;
     ?  0  *  0  ?  :  0  :  0;
     0  ?  *  1  ?  :  1  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func( clk, d, o, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_N_IQN_FF_UDP( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  n  ?  1  0  ?  :  ?  :  -;
     ?  0  n  ?  1  0  ?  :  1  :  1;
     0  ?  n  ?  1  0  ?  :  0  :  0;
     ?  0  r  0  1  0  ?  :  ?  :  1;
     1  0  ?  ?  1  0  ?  :  ?  :  1;
     0  ?  r  1  1  0  ?  :  ?  :  0;
     0  1  ?  ?  1  0  ?  :  ?  :  0;
     0  0  ?  *  1  0  ?  :  ?  :  -;
     0  ?  ?  *  1  0  ?  :  0  :  0;
     ?  0  ?  *  1  0  ?  :  1  :  1;
     0  *  ?  ?  1  0  ?  :  0  :  0;
     *  0  ?  ?  1  0  ?  :  1  :  1;
     ?  0  *  0  1  0  ?  :  1  :  1;
     0  ?  *  1  1  0  ?  :  0  :  0;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  n  ?  ?  :  ?  :  -;
     ?  0  n  ?  ?  :  1  :  1;
     0  ?  n  ?  ?  :  0  :  0;
     ?  0  r  0  ?  :  ?  :  1;
     1  0  ?  ?  ?  :  ?  :  1;
     0  ?  r  1  ?  :  ?  :  0;
     0  1  ?  ?  ?  :  ?  :  0;
     0  0  ?  *  ?  :  ?  :  -;
     0  ?  ?  *  ?  :  0  :  0;
     ?  0  ?  *  ?  :  1  :  1;
     0  *  ?  ?  ?  :  0  :  0;
     *  0  ?  ?  ?  :  1  :  1;
     ?  0  *  0  ?  :  1  :  1;
     0  ?  *  1  ?  :  0  :  0;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func( clk, d, ob, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, notifier;
   output ob;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_N_IQN_FF_UDP inst3( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( ob, IQN, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_N_IQN_FF_UDP inst3( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( ob, IQN );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1( MGM_D0, IQ, d, den `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_D0;
  input IQ, d, den;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //IQ, d, den vcc, vssx: MGM_D0
    1  1  ?  1  0: 1;
    1  ?  0  1  0: 1;
    ?  1  1  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  0  1  0: 0;
    ?  0  1  1  0: 0;
  `else
  //IQ, d, den: MGM_D0
    1  1  ?: 1;
    1  ?  0: 1;
    ?  1  1: 1;
    0  0  ?: 0;
    0  ?  0: 0;
    ?  0  1: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func( clk, d, den, o, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, den, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst2( MGM_D0, IQ, d, den, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst2( MGM_D0, IQ, d, den );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2( MGM_CLK0, clkb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_CLK0;
  input clkb;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //clkb vcc, vssx: MGM_CLK0
    0  1  0: 1;
    1  1  0: 0;
  `else
  //clkb: MGM_CLK0
    0: 1;
    1: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func( clkb, d, o, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func( clk, d1, d2, o1, o2, notifier0, notifier1 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, notifier0, notifier1;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func( clkb, d1, d2, o1, o2, notifier0, notifier1 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d1, d2, notifier0, notifier1;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_CLK1, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_CLK1, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func( clk, d1, d2, d3, d4, o1, o2, o3, o4, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_CLK2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_CLK3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_CLK2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_CLK3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func( clkb, d1, d2, d3, d4, o1, o2, o3, o4, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d1, d2, d3, d4, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_CLK1, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst7( MGM_CLK2, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_CLK3, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_CLK1, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst7( MGM_CLK2, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_CLK3, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4 );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3( MGM_D0, d, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_D0;
  input d, si, ssb;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //d, si, ssb vcc, vssx: MGM_D0
    1  1  ?  1  0: 1;
    1  ?  1  1  0: 1;
    ?  1  0  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  1  1  0: 0;
    ?  0  0  1  0: 0;
  `else
  //d, si, ssb: MGM_D0
    1  1  ?: 1;
    1  ?  1: 1;
    ?  1  0: 1;
    0  0  ?: 0;
    0  ?  1: 0;
    ?  0  0: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func( clk, d, o, si, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, si, ssb, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func( clk, d, o, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, si, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( so, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( so, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func( clk, d, ob, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, si, ssb, notifier;
   output ob, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_N_IQN_FF_UDP inst3( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( ob, IQN, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( so, IQN, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_N_IQN_FF_UDP inst3( IQN, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( ob, IQN );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( so, IQN );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0( o, a `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output o;
  input a;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //a vcc, vssx: o
    1  1  0: 1;
    0  1  0: 0;
  `else
  //a: o
    1: 1;
    0: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_1( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  n  ?  1  0  ?  :  ?  :  -;
     ?  0  n  ?  1  0  ?  :  0  :  0;
     0  ?  n  ?  1  0  ?  :  1  :  1;
     ?  0  r  0  1  0  ?  :  ?  :  0;
     1  0  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  r  1  1  0  ?  :  ?  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     0  0  ?  *  1  0  ?  :  ?  :  -;
     0  ?  ?  *  1  0  ?  :  1  :  1;
     ?  0  ?  *  1  0  ?  :  0  :  0;
     0  *  ?  ?  1  0  ?  :  1  :  1;
     *  0  ?  ?  1  0  ?  :  0  :  0;
     ?  0  *  0  1  0  ?  :  0  :  0;
     0  ?  *  1  1  0  ?  :  1  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  n  ?  ?  :  ?  :  -;
     ?  0  n  ?  ?  :  0  :  0;
     0  ?  n  ?  ?  :  1  :  1;
     ?  0  r  0  ?  :  ?  :  0;
     1  0  ?  ?  ?  :  ?  :  0;
     0  ?  r  1  ?  :  ?  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     0  0  ?  *  ?  :  ?  :  -;
     0  ?  ?  *  ?  :  1  :  1;
     ?  0  ?  *  ?  :  0  :  0;
     0  *  ?  ?  ?  :  1  :  1;
     *  0  ?  ?  ?  :  0  :  0;
     ?  0  *  0  ?  :  0  :  0;
     0  ?  *  1  ?  :  1  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_2( clkout, int1, int2, sb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output clkout;
  input int1, int2, sb;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //int1, int2, sb vcc, vssx: clkout
    1  1  ?  1  0: 1;
    1  ?  0  1  0: 1;
    ?  1  1  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  0  1  0: 0;
    ?  0  1  1  0: 0;
  `else
  //int1, int2, sb: clkout
    1  1  ?: 1;
    1  ?  0: 1;
    ?  1  1: 1;
    0  0  ?: 0;
    0  ?  0: 0;
    ?  0  1: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_3( clkout, clk1, clk2, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output clkout;
  input clk1, clk2, s;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //clk1, clk2, s vcc, vssx: clkout
    1  1  ?  1  0: 1;
    1  ?  1  1  0: 1;
    ?  1  0  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  1  1  0: 0;
    ?  0  0  1  0: 0;
  `else
  //clk1, clk2, s: clkout
    1  1  ?: 1;
    1  ?  1: 1;
    ?  1  0: 1;
    0  0  ?: 0;
    0  ?  1: 0;
    ?  0  0: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func( clk, d, den, o, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, den, si, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst2( MGM_D0, int2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_1 inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_2 inst4( int1, IQ, d, den, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_3 inst5( int2, int1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst6( o, IQ, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst7( so, o, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst2( MGM_D0, int2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_1 inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_2 inst4( int1, IQ, d, den );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_3 inst5( int2, int1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst6( o, IQ );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_0 inst7( so, o );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func( clkb, d, o, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, si, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( so, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( so, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func( clk, d1, d2, o1, o2, si, so, ssb, notifier0, notifier1 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, si, ssb, notifier0, notifier1;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst5( MGM_D1, IQ1, d2, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( so, o2, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst5( MGM_D1, IQ1, d2, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( so, o2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func( clk, d1, d2, d3, d4, o1, o2, o3, o4, si, so, ssb, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, si, ssb, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst5( MGM_D1, IQ1, d2, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_CLK2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst8( MGM_D2, IQ2, d3, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_CLK3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D3, IQ3, d4, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst17( so, o4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst5( MGM_D1, IQ1, d2, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_CLK2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst8( MGM_D2, IQ2, d3, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_CLK3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D3, IQ3, d4, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst17( so, o4 );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0( MGM_CLK0, clk `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_CLK0;
  input clk;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //clk vcc, vssx: MGM_CLK0
    1  1  0: 1;
    0  1  0: 0;
  `else
  //clk: MGM_CLK0
    1: 1;
    0: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  n  ?  1  0  ?  :  ?  :  -;
     ?  0  n  ?  1  0  ?  :  0  :  0;
     0  ?  n  ?  1  0  ?  :  1  :  1;
     ?  0  r  0  1  0  ?  :  ?  :  0;
     1  0  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  r  1  1  0  ?  :  ?  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     0  0  ?  *  1  0  ?  :  ?  :  -;
     0  ?  ?  *  1  0  ?  :  1  :  1;
     ?  0  ?  *  1  0  ?  :  0  :  0;
     0  *  ?  ?  1  0  ?  :  1  :  1;
     *  0  ?  ?  1  0  ?  :  0  :  0;
     ?  0  *  0  1  0  ?  :  0  :  0;
     0  ?  *  1  1  0  ?  :  1  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  n  ?  ?  :  ?  :  -;
     ?  0  n  ?  ?  :  0  :  0;
     0  ?  n  ?  ?  :  1  :  1;
     ?  0  r  0  ?  :  ?  :  0;
     1  0  ?  ?  ?  :  ?  :  0;
     0  ?  r  1  ?  :  ?  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     0  0  ?  *  ?  :  ?  :  -;
     0  ?  ?  *  ?  :  1  :  1;
     ?  0  ?  *  ?  :  0  :  0;
     0  *  ?  ?  ?  :  1  :  1;
     *  0  ?  ?  ?  :  0  :  0;
     ?  0  *  0  ?  :  0  :  0;
     0  ?  *  1  ?  :  1  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2( MGM_D0, IQ, d, den `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_D0;
  input IQ, d, den;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //IQ, d, den vcc, vssx: MGM_D0
    1  1  ?  1  0: 1;
    1  ?  0  1  0: 1;
    ?  1  1  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  0  1  0: 0;
    ?  0  1  1  0: 0;
  `else
  //IQ, d, den: MGM_D0
    1  1  ?: 1;
    1  ?  0: 1;
    ?  1  1: 1;
    0  0  ?: 0;
    0  ?  0: 0;
    ?  0  1: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_3( MGM_D0, d, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_D0;
  input d, si, ssb;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //d, si, ssb vcc, vssx: MGM_D0
    1  1  ?  1  0: 1;
    1  ?  1  1  0: 1;
    ?  1  0  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  1  1  0: 0;
    ?  0  0  1  0: 0;
  `else
  //d, si, ssb: MGM_D0
    1  1  ?: 1;
    1  ?  1: 1;
    ?  1  0: 1;
    0  0  ?: 0;
    0  ?  1: 0;
    ?  0  0: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func( clk, d1, d2, d3, d4, den1, den2, den3, den4, o1, o2, o3, o4, si, so, ssb, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, den1, den2, den3, den4, si, ssb, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst2( MGM_D0, int2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst4( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst5( MGM_D1, int2a, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst7( MGM_CLK2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst8( MGM_D2, int2b, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst10( MGM_CLK3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst11( MGM_D3, int2c, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst13( int1, IQ1, d1, den1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst14( int1a, IQ2, d2, den2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst15( int1b, IQ3, d3, den3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst16( int1c, IQ4, d4, den4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_3 inst17( int2, int1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst18( int2a, IQ1, int1a, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst19( int2b, IQ2, int1b, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst20( int2c, IQ3, int1c, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst21( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst22( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst23( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst24( o4, IQ4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst25( so, o4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst2( MGM_D0, int2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst4( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst5( MGM_D1, int2a );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst7( MGM_CLK2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst8( MGM_D2, int2b );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst10( MGM_CLK3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst11( MGM_D3, int2c );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_1 inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst13( int1, IQ1, d1, den1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst14( int1a, IQ2, d2, den2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst15( int1b, IQ3, d3, den3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst16( int1c, IQ4, d4, den4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_3 inst17( int2, int1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst18( int2a, IQ1, int1a, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst19( int2b, IQ2, int1b, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_2 inst20( int2c, IQ3, int1c, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst21( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst22( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst23( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst24( o4, IQ4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_0 inst25( so, o4 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, si, so, ssb, notifier0, notifier1, notifier2, notifier3, notifier4, notifier5, notifier6, notifier7 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, d5, d6, d7, d8, si, ssb, notifier0, notifier1, notifier2, notifier3, notifier4, notifier5, notifier6, notifier7;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst5( MGM_D1, IQ1, d2, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_CLK2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst8( MGM_D2, IQ2, d3, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_CLK3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D3, IQ3, d4, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( MGM_CLK4, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst14( MGM_D4, IQ4, d5, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst15( IQ5, 1'b0, 1'b0, MGM_CLK4, MGM_D4, vcc, vssx, notifier4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( MGM_CLK5, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst17( MGM_D5, IQ5, d6, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst18( IQ6, 1'b0, 1'b0, MGM_CLK5, MGM_D5, vcc, vssx, notifier5 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst19( MGM_CLK6, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst20( MGM_D6, IQ6, d7, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst21( IQ7, 1'b0, 1'b0, MGM_CLK6, MGM_D6, vcc, vssx, notifier6 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst22( MGM_CLK7, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst23( MGM_D7, IQ7, d8, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst24( IQ8, 1'b0, 1'b0, MGM_CLK7, MGM_D7, vcc, vssx, notifier7 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst25( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst26( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst27( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst28( o4, IQ4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst29( o5, IQ5, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst30( o6, IQ6, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst31( o7, IQ7, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst32( o8, IQ8, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst33( so, o8, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst2( MGM_D0, d1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst3( IQ1, 1'b0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst5( MGM_D1, IQ1, d2, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst6( IQ2, 1'b0, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_CLK2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst8( MGM_D2, IQ2, d3, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst9( IQ3, 1'b0, 1'b0, MGM_CLK2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_CLK3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D3, IQ3, d4, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ4, 1'b0, 1'b0, MGM_CLK3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( MGM_CLK4, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst14( MGM_D4, IQ4, d5, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst15( IQ5, 1'b0, 1'b0, MGM_CLK4, MGM_D4, notifier4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( MGM_CLK5, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst17( MGM_D5, IQ5, d6, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst18( IQ6, 1'b0, 1'b0, MGM_CLK5, MGM_D5, notifier5 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst19( MGM_CLK6, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst20( MGM_D6, IQ6, d7, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst21( IQ7, 1'b0, 1'b0, MGM_CLK6, MGM_D6, notifier6 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst22( MGM_CLK7, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst23( MGM_D7, IQ7, d8, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst24( IQ8, 1'b0, 1'b0, MGM_CLK7, MGM_D7, notifier7 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst25( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst26( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst27( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst28( o4, IQ4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst29( o5, IQ5 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst30( o6, IQ6 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst31( o7, IQ7 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst32( o8, IQ8 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst33( so, o8 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func( clk, d, o, rb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, rb, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst3( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst3( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  n  ?  1  0  ?  :  ?  :  -;
     ?  0  n  ?  1  0  ?  :  0  :  0;
     0  ?  n  ?  1  0  ?  :  1  :  1;
     ?  0  r  0  1  0  ?  :  ?  :  0;
     1  ?  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  r  1  1  0  ?  :  ?  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     0  0  ?  *  1  0  ?  :  ?  :  -;
     0  ?  ?  *  1  0  ?  :  1  :  1;
     ?  0  ?  *  1  0  ?  :  0  :  0;
     0  *  ?  ?  1  0  ?  :  1  :  1;
     *  0  ?  ?  1  0  ?  :  0  :  0;
     ?  0  *  0  1  0  ?  :  0  :  0;
     0  ?  *  1  1  0  ?  :  1  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  n  ?  ?  :  ?  :  -;
     ?  0  n  ?  ?  :  0  :  0;
     0  ?  n  ?  ?  :  1  :  1;
     ?  0  r  0  ?  :  ?  :  0;
     1  ?  ?  ?  ?  :  ?  :  0;
     0  ?  r  1  ?  :  ?  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     0  0  ?  *  ?  :  ?  :  -;
     0  ?  ?  *  ?  :  1  :  1;
     ?  0  ?  *  ?  :  0  :  0;
     0  *  ?  ?  ?  :  1  :  1;
     *  0  ?  ?  ?  :  0  :  0;
     ?  0  *  0  ?  :  0  :  0;
     0  ?  *  1  ?  :  1  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func( clk, d, o, rb, s, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, rb, s, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func( clk, d, den, o, rb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, den, rb, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst3( MGM_D0, IQ, d, den, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst3( MGM_D0, IQ, d, den );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func( clkb, d, o, rb, s, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, rb, s, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func( clk, d, o, rb, si, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, rb, si, ssb, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func( clk, d, o, rb, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, rb, si, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( so, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( so, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func( clk, d, o, rb, s, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, rb, s, si, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst4( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( so, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst4( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( so, IQ );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0( o, a `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output o;
  input a;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //a vcc, vssx: o
    1  1  0: 1;
    0  1  0: 0;
  `else
  //a: o
    1: 1;
    0: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_1( clkout, clk `ifdef POWER_AWARE_MODE , vcc_in, vssx `endif );
  output clkout;
  input clk;
  `ifdef POWER_AWARE_MODE
  input vcc_in, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //clk vcc_in, vssx: clkout
    0  1  0: 1;
    1  1  0: 0;
  `else
  //clk: clkout
    0: 1;
    1: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_2( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  n  ?  1  0  ?  :  ?  :  -;
     ?  0  n  ?  1  0  ?  :  0  :  0;
     0  ?  n  ?  1  0  ?  :  1  :  1;
     ?  0  r  0  1  0  ?  :  ?  :  0;
     1  0  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  r  1  1  0  ?  :  ?  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     0  0  ?  *  1  0  ?  :  ?  :  -;
     0  ?  ?  *  1  0  ?  :  1  :  1;
     ?  0  ?  *  1  0  ?  :  0  :  0;
     0  *  ?  ?  1  0  ?  :  1  :  1;
     *  0  ?  ?  1  0  ?  :  0  :  0;
     ?  0  *  0  1  0  ?  :  0  :  0;
     0  ?  *  1  1  0  ?  :  1  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  n  ?  ?  :  ?  :  -;
     ?  0  n  ?  ?  :  0  :  0;
     0  ?  n  ?  ?  :  1  :  1;
     ?  0  r  0  ?  :  ?  :  0;
     1  0  ?  ?  ?  :  ?  :  0;
     0  ?  r  1  ?  :  ?  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     0  0  ?  *  ?  :  ?  :  -;
     0  ?  ?  *  ?  :  1  :  1;
     ?  0  ?  *  ?  :  0  :  0;
     0  *  ?  ?  ?  :  1  :  1;
     *  0  ?  ?  ?  :  0  :  0;
     ?  0  *  0  ?  :  0  :  0;
     0  ?  *  1  ?  :  1  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_3( clkout, int1, int2, sb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output clkout;
  input int1, int2, sb;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //int1, int2, sb vcc, vssx: clkout
    1  1  ?  1  0: 1;
    1  ?  0  1  0: 1;
    ?  1  1  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  0  1  0: 0;
    ?  0  1  1  0: 0;
  `else
  //int1, int2, sb: clkout
    1  1  ?: 1;
    1  ?  0: 1;
    ?  1  1: 1;
    0  0  ?: 0;
    0  ?  0: 0;
    ?  0  1: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_4( clkout, clk1, clk2, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output clkout;
  input clk1, clk2, s;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //clk1, clk2, s vcc, vssx: clkout
    1  1  ?  1  0: 1;
    1  ?  1  1  0: 1;
    ?  1  0  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  1  1  0: 0;
    ?  0  0  1  0: 0;
  `else
  //clk1, clk2, s: clkout
    1  1  ?: 1;
    1  ?  1: 1;
    ?  1  0: 1;
    0  0  ?: 0;
    0  ?  1: 0;
    ?  0  0: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func( clk, d, den, o, rb, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, den, rb, si, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_1 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst3( MGM_D0, int2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_2 inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_3 inst5( int1, IQ, d, den, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_4 inst6( int2, int1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst7( o, IQ, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst8( so, o, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_1 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst3( MGM_D0, int2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_2 inst4( IQ, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_3 inst5( int1, IQ, d, den );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_4 inst6( int2, int1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst7( o, IQ );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_0 inst8( so, o );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func( clkb, d, o, rb, s, si, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, rb, s, si, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst4( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( so, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_CLK0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst4( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_LN_IQ_FF_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_CLK0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( so, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func( clk, d1, d2, o1, o2, rb, si, so, ssb, notifier0, notifier1 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, rb, si, ssb, notifier0, notifier1;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst6( MGM_C1, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst7( MGM_D1, IQ1, d2, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( so, o2, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst6( MGM_C1, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst7( MGM_D1, IQ1, d2, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( so, o2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func( clk, d1, d2, d3, d4, o1, o2, o3, o4, rb, si, so, ssb, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, rb, si, ssb, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst6( MGM_C1, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst7( MGM_D1, IQ1, d2, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( MGM_CLK2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_C2, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D2, IQ2, d3, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ3, MGM_C2, 1'b0, MGM_CLK2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( MGM_CLK3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst14( MGM_C3, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst15( MGM_D3, IQ3, d4, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst16( IQ4, MGM_C3, 1'b0, MGM_CLK3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst17( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst18( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst19( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst20( o4, IQ4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst21( so, o4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst6( MGM_C1, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst7( MGM_D1, IQ1, d2, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( MGM_CLK2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_C2, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D2, IQ2, d3, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ3, MGM_C2, 1'b0, MGM_CLK2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( MGM_CLK3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst14( MGM_C3, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst15( MGM_D3, IQ3, d4, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst16( IQ4, MGM_C3, 1'b0, MGM_CLK3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst17( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst18( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst19( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst20( o4, IQ4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst21( so, o4 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, rb, si, so, ssb, notifier0, notifier1, notifier2, notifier3, notifier4, notifier5, notifier6, notifier7 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, d5, d6, d7, d8, rb, si, ssb, notifier0, notifier1, notifier2, notifier3, notifier4, notifier5, notifier6, notifier7;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_CLK1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst6( MGM_C1, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst7( MGM_D1, IQ1, d2, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_CLK1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( MGM_CLK2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_C2, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D2, IQ2, d3, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ3, MGM_C2, 1'b0, MGM_CLK2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( MGM_CLK3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst14( MGM_C3, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst15( MGM_D3, IQ3, d4, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst16( IQ4, MGM_C3, 1'b0, MGM_CLK3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst17( MGM_CLK4, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst18( MGM_C4, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst19( MGM_D4, IQ4, d5, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst20( IQ5, MGM_C4, 1'b0, MGM_CLK4, MGM_D4, vcc, vssx, notifier4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst21( MGM_CLK5, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst22( MGM_C5, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst23( MGM_D5, IQ5, d6, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst24( IQ6, MGM_C5, 1'b0, MGM_CLK5, MGM_D5, vcc, vssx, notifier5 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst25( MGM_CLK6, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst26( MGM_C6, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst27( MGM_D6, IQ6, d7, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst28( IQ7, MGM_C6, 1'b0, MGM_CLK6, MGM_D6, vcc, vssx, notifier6 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst29( MGM_CLK7, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst30( MGM_C7, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst31( MGM_D7, IQ7, d8, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst32( IQ8, MGM_C7, 1'b0, MGM_CLK7, MGM_D7, vcc, vssx, notifier7 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst33( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst34( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst35( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst36( o4, IQ4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst37( o5, IQ5, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst38( o6, IQ6, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst39( o7, IQ7, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst40( o8, IQ8, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst41( so, o8, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_CLK0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_3 inst3( MGM_D0, d1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_CLK0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_CLK1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst6( MGM_C1, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst7( MGM_D1, IQ1, d2, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_CLK1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst9( MGM_CLK2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_C2, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst11( MGM_D2, IQ2, d3, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst12( IQ3, MGM_C2, 1'b0, MGM_CLK2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( MGM_CLK3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst14( MGM_C3, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst15( MGM_D3, IQ3, d4, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst16( IQ4, MGM_C3, 1'b0, MGM_CLK3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst17( MGM_CLK4, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst18( MGM_C4, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst19( MGM_D4, IQ4, d5, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst20( IQ5, MGM_C4, 1'b0, MGM_CLK4, MGM_D4, notifier4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst21( MGM_CLK5, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst22( MGM_C5, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst23( MGM_D5, IQ5, d6, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst24( IQ6, MGM_C5, 1'b0, MGM_CLK5, MGM_D5, notifier5 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst25( MGM_CLK6, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst26( MGM_C6, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst27( MGM_D6, IQ6, d7, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst28( IQ7, MGM_C6, 1'b0, MGM_CLK6, MGM_D6, notifier6 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst29( MGM_CLK7, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst30( MGM_C7, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_1 inst31( MGM_D7, IQ7, d8, ssb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_N_IQ_FF_UDP inst32( IQ8, MGM_C7, 1'b0, MGM_CLK7, MGM_D7, notifier7 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst33( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst34( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst35( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst36( o4, IQ4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst37( o5, IQ5 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst38( o6, IQ6 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst39( o7, IQ7 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst40( o8, IQ8 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst41( so, o8 );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  0  ?  1  0  ?  :  ?  :  -;
     ?  0  1  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  1  0  ?  :  0  :  0;
     ?  0  0  ?  1  0  ?  :  0  :  0;
     1  0  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  1  1  1  0  ?  :  ?  :  1;
     0  ?  ?  1  1  0  ?  :  1  :  1;
     0  ?  0  ?  1  0  ?  :  1  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  0  ?  ?  :  ?  :  -;
     ?  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  :  0  :  0;
     ?  0  0  ?  ?  :  0  :  0;
     1  0  ?  ?  ?  :  ?  :  0;
     0  ?  1  1  ?  :  ?  :  1;
     0  ?  ?  1  ?  :  1  :  1;
     0  ?  0  ?  ?  :  1  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func( clk, d, o, rb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, rb, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst3( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst4( IQ, MGM_C0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst3( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst4( IQ, MGM_C0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_N_L_IQ_LATCH_UDP( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D  PW GN N  :  Q  :  Q 
     0  0  0  ?  1  0  ?  :  ?  :  -;
     ?  0  1  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  1  0  ?  :  0  :  0;
     ?  0  0  ?  1  0  ?  :  0  :  0;
     1  ?  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  1  1  1  0  ?  :  ?  :  1;
     0  ?  ?  1  1  0  ?  :  1  :  1;
     0  ?  0  ?  1  0  ?  :  1  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D  N  :  Q  :  Q 
     0  0  0  ?  ?  :  ?  :  -;
     ?  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  :  0  :  0;
     ?  0  0  ?  ?  :  0  :  0;
     1  ?  ?  ?  ?  :  ?  :  0;
     0  ?  1  1  ?  :  ?  :  1;
     0  ?  ?  1  ?  :  1  :  1;
     0  ?  0  ?  ?  :  1  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func( clk, d, o, rb, s, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, rb, s, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_N_L_IQ_LATCH_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_N_L_IQ_LATCH_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func( clkb, d, o, rb, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, rb, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst3( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst4( IQ, MGM_C0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst3( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst4( IQ, MGM_C0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func( clkb, d, o, rb, s, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, rb, s, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_N_L_IQ_LATCH_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_P0, s );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst3( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_N_L_IQ_LATCH_UDP inst5( IQ, MGM_C0, MGM_P0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst6( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func( clk, d, o, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func( clkb, d, o, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func( clk, d1, d2, o1, o2, notifier0, notifier1 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, notifier0, notifier1;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func( clkb, d1, d2, o1, o2, notifier0, notifier1 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d1, d2, notifier0, notifier1;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_EN1, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_EN1, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( o2, IQ2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func( clk, d1, d2, d3, d4, o1, o2, o3, o4, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_EN2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst9( IQ3, 1'b0, 1'b0, MGM_EN2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_EN3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst12( IQ4, 1'b0, 1'b0, MGM_EN3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_EN2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst9( IQ3, 1'b0, 1'b0, MGM_EN2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_EN3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst12( IQ4, 1'b0, 1'b0, MGM_EN3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func( clkb, d1, d2, d3, d4, o1, o2, o3, o4, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d1, d2, d3, d4, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_EN1, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst7( MGM_EN2, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst9( IQ3, 1'b0, 1'b0, MGM_EN2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_EN3, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst12( IQ4, 1'b0, 1'b0, MGM_EN3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst4( MGM_EN1, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst7( MGM_EN2, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst9( IQ3, 1'b0, 1'b0, MGM_EN2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst10( MGM_EN3, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst12( IQ4, 1'b0, 1'b0, MGM_EN3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_ltn000ad_func( clk, d, o, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_ltn080ad_func( clkb, d, o, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clkb, d, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst1( MGM_EN0, clkb );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_ltn400ad_func( clk, d1, d2, d3, d4, o1, o2, o3, o4, notifier0, notifier1, notifier2, notifier3 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d1, d2, d3, d4, notifier0, notifier1, notifier2, notifier3;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, vcc, vssx, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_EN2, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst9( IQ3, 1'b0, 1'b0, MGM_EN2, MGM_D2, vcc, vssx, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_EN3, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst12( IQ4, 1'b0, 1'b0, MGM_EN3, MGM_D3, vcc, vssx, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst2( MGM_D0, d1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier0 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst5( MGM_D1, d2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, notifier1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst7( MGM_EN2, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst8( MGM_D2, d3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst9( IQ3, 1'b0, 1'b0, MGM_EN2, MGM_D2, notifier2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst10( MGM_EN3, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst11( MGM_D3, d4 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst12( IQ4, 1'b0, 1'b0, MGM_EN3, MGM_D3, notifier3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst13( o1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst14( o2, IQ2 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst15( o3, IQ3 );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst16( o4, IQ4 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dsldrseq_ltnf10ad_func( clk, d, ob, notifier `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
   input clk, d, notifier;
   output ob;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( ob, IQ, vcc, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_2 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_N_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_0 inst4( ob, IQ );
`endif

endmodule
`endcelldefine 




`celldefine 


module i0sfun000ad1d01x1( clk, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF o = {(d) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= d ;
// end
// 
// assign `fun000ad_delay o =  IQ;
// 

   input clk, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `fun000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2663(ENABLE_NOT_d,d_delay);
   buf MGM_G2664(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun000ad1d01x2( clk, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF o = {(d) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= d ;
// end
// 
// assign `fun000ad_delay o =  IQ;
// 

   input clk, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `fun000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2663(ENABLE_NOT_d,d_delay);
   buf MGM_G2664(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun000ad1d02x2( clk, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF o = {(d) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= d ;
// end
// 
// assign `fun000ad_delay o =  IQ;
// 

   input clk, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `fun000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun000ad_func i0sfun000ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2663(ENABLE_NOT_d,d_delay);
   buf MGM_G2664(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun010ad1d01x1( clk, d, ob `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF  with data inversion ob = (!d) on rising clk
// 
// 
// always @ (posedge clk)
// begin
// IQN <= d ;
// end
// 
// assign `fun010ad_delay ob =  !IQN;
// 

   input clk, d;
   output ob;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire ob_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(ob_random_init)
         if((ob_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign ob = ((random_init_ctrl_gls === 1'b1) && (ob_random_init === 1'bx)) ? init_val : ob_random_init;
      `else
         assign ob = ob_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x1_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun010ad_delay ob_random_init = ob_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x1_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0));
      assign `fun010ad_delay ob_random_init = ob_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun010ad1d01x2( clk, d, ob `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF  with data inversion ob = (!d) on rising clk
// 
// 
// always @ (posedge clk)
// begin
// IQN <= d ;
// end
// 
// assign `fun010ad_delay ob =  !IQN;
// 

   input clk, d;
   output ob;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire ob_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(ob_random_init)
         if((ob_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign ob = ((random_init_ctrl_gls === 1'b1) && (ob_random_init === 1'bx)) ? init_val : ob_random_init;
      `else
         assign ob = ob_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun010ad_delay ob_random_init = ob_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0));
      assign `fun010ad_delay ob_random_init = ob_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun010ad1d02x2( clk, d, ob `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF  with data inversion ob = (!d) on rising clk
// 
// 
// always @ (posedge clk)
// begin
// IQN <= d ;
// end
// 
// assign `fun010ad_delay ob =  !IQN;
// 

   input clk, d;
   output ob;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire ob_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(ob_random_init)
         if((ob_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign ob = ((random_init_ctrl_gls === 1'b1) && (ob_random_init === 1'bx)) ? init_val : ob_random_init;
      `else
         assign ob = ob_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d02x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun010ad_delay ob_random_init = ob_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d02x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0));
      assign `fun010ad_delay ob_random_init = ob_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun010ad_func i0sfun010ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun040ad1d01x1( clk, d, den, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with Re-circulating den o = {((den*d)+(!den*o)) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= den ? d : IQ ;
// end
// 
// assign `fun040ad_delay o =  IQ;
// 

   input clk, d, den;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun040ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.notifier(1'b0));
      assign `fun040ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G6(MGM_W1,d_delay);
   and MGM_G7(ENABLE_NOT_d_AND_den,den_delay,MGM_W1);
   and MGM_G8(ENABLE_d_AND_den,den_delay,d_delay);
   buf MGM_G9(ENABLE_den,den_delay);
   not MGM_G10(ENABLE_NOT_d,d_delay);
   buf MGM_G11(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den == 1'b1),
      negedge d &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den == 1'b1),
      posedge d &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d == 1'b1),
      negedge den &&& (ENABLE_NOT_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d == 1'b1),
      posedge den &&& (ENABLE_NOT_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d == 1'b1),
      negedge den &&& (ENABLE_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d == 1'b1),
      posedge den &&& (ENABLE_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun040ad1d01x2( clk, d, den, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with Re-circulating den o = {((den*d)+(!den*o)) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= den ? d : IQ ;
// end
// 
// assign `fun040ad_delay o =  IQ;
// 

   input clk, d, den;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun040ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.notifier(1'b0));
      assign `fun040ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G6(MGM_W1,d_delay);
   and MGM_G7(ENABLE_NOT_d_AND_den,den_delay,MGM_W1);
   and MGM_G8(ENABLE_d_AND_den,den_delay,d_delay);
   buf MGM_G9(ENABLE_den,den_delay);
   not MGM_G10(ENABLE_NOT_d,d_delay);
   buf MGM_G11(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den == 1'b1),
      negedge d &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den == 1'b1),
      posedge d &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d == 1'b1),
      negedge den &&& (ENABLE_NOT_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d == 1'b1),
      posedge den &&& (ENABLE_NOT_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d == 1'b1),
      negedge den &&& (ENABLE_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d == 1'b1),
      posedge den &&& (ENABLE_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun040ad1d02x2( clk, d, den, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with Re-circulating den o = {((den*d)+(!den*o)) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= den ? d : IQ ;
// end
// 
// assign `fun040ad_delay o =  IQ;
// 

   input clk, d, den;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun040ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.notifier(1'b0));
      assign `fun040ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun040ad_func i0sfun040ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G6(MGM_W1,d_delay);
   and MGM_G7(ENABLE_NOT_d_AND_den,den_delay,MGM_W1);
   and MGM_G8(ENABLE_d_AND_den,den_delay,d_delay);
   buf MGM_G9(ENABLE_den,den_delay);
   not MGM_G10(ENABLE_NOT_d,d_delay);
   buf MGM_G11(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den == 1'b1),
      negedge d &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den == 1'b1),
      posedge d &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d == 1'b1),
      negedge den &&& (ENABLE_NOT_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d == 1'b1),
      posedge den &&& (ENABLE_NOT_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d == 1'b1),
      negedge den &&& (ENABLE_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d == 1'b1),
      posedge den &&& (ENABLE_d == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun080ad1d01x1( clkb, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with clkb o = {(d) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ <= d ;
// end
// 
// assign `fun080ad_delay o =  IQ;
// 

   input clkb, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun080ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `fun080ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb,negedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb,posedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun080ad1d01x2( clkb, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with clkb o = {(d) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ <= d ;
// end
// 
// assign `fun080ad_delay o =  IQ;
// 

   input clkb, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun080ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `fun080ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb,negedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb,posedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun080ad1d02x2( clkb, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with clkb o = {(d) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ <= d ;
// end
// 
// assign `fun080ad_delay o =  IQ;
// 

   input clkb, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun080ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `fun080ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun080ad_func i0sfun080ad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb,negedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb,posedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun200ad1d01x1( clk, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 2-bit non-scan DFF o1 = {(d1) on rising clk} o2 = {(d2) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= d1 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= d2 ;
// end
// 
// assign `fun200ad_delay o1 =  IQ1;
// assign `fun200ad_delay o2 =  IQ2;
// 

   input clk, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun200ad_delay o1_random_init = o1_tmp ;
      assign `fun200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fun200ad_delay o1_random_init = o1_tmp ;
      assign `fun200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      
      // setuphold d1- clk-LH
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      
      // setuphold d2- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun200ad1d01x2( clk, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 2-bit non-scan DFF o1 = {(d1) on rising clk} o2 = {(d2) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= d1 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= d2 ;
// end
// 
// assign `fun200ad_delay o1 =  IQ1;
// assign `fun200ad_delay o2 =  IQ2;
// 

   input clk, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun200ad_delay o1_random_init = o1_tmp ;
      assign `fun200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fun200ad_delay o1_random_init = o1_tmp ;
      assign `fun200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d01x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      
      // setuphold d1- clk-LH
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      
      // setuphold d2- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun200ad1d02x2( clk, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 2-bit non-scan DFF o1 = {(d1) on rising clk} o2 = {(d2) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= d1 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= d2 ;
// end
// 
// assign `fun200ad_delay o1 =  IQ1;
// assign `fun200ad_delay o2 =  IQ2;
// 

   input clk, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d02x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun200ad_delay o1_random_init = o1_tmp ;
      assign `fun200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d02x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fun200ad_delay o1_random_init = o1_tmp ;
      assign `fun200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d02x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun200ad_func i0sfun200ad1d02x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      
      // setuphold d1- clk-LH
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      
      // setuphold d2- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun280ad1d01x1( clkb, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 2-bit non-scan DFF with clkb o1 = {(d1) on falling clkb} o2 = {(d2) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ1 <= d1 ;
// end
// always @ (negedge clkb)
// begin
// IQ2 <= d2 ;
// end
// 
// assign `fun280ad_delay o1 =  IQ1;
// assign `fun280ad_delay o2 =  IQ2;
// 

   input clkb, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun280ad_delay o1_random_init = o1_tmp ;
      assign `fun280ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fun280ad_delay o1_random_init = o1_tmp ;
      assign `fun280ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      
      // setuphold d1- clkb-HL
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      
      // setuphold d2- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun280ad1d01x2( clkb, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 2-bit non-scan DFF with clkb o1 = {(d1) on falling clkb} o2 = {(d2) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ1 <= d1 ;
// end
// always @ (negedge clkb)
// begin
// IQ2 <= d2 ;
// end
// 
// assign `fun280ad_delay o1 =  IQ1;
// assign `fun280ad_delay o2 =  IQ2;
// 

   input clkb, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun280ad_delay o1_random_init = o1_tmp ;
      assign `fun280ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fun280ad_delay o1_random_init = o1_tmp ;
      assign `fun280ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d01x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      
      // setuphold d1- clkb-HL
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      
      // setuphold d2- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun280ad1d02x2( clkb, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 2-bit non-scan DFF with clkb o1 = {(d1) on falling clkb} o2 = {(d2) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ1 <= d1 ;
// end
// always @ (negedge clkb)
// begin
// IQ2 <= d2 ;
// end
// 
// assign `fun280ad_delay o1 =  IQ1;
// assign `fun280ad_delay o2 =  IQ2;
// 

   input clkb, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d02x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun280ad_delay o1_random_init = o1_tmp ;
      assign `fun280ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d02x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fun280ad_delay o1_random_init = o1_tmp ;
      assign `fun280ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d02x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun280ad_func i0sfun280ad1d02x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      
      // setuphold d1- clkb-HL
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      
      // setuphold d2- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun400ad1q01x1( clk, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 4-bit non-scan DFF o1 = {(d1) on rising clk} o2 = {(d2) on rising clk} o3 = {(d3) on rising clk} o4 = {(d4) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= d1 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= d2 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= d3 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= d4 ;
// end
// 
// assign `fun400ad_delay o1 =  IQ1;
// assign `fun400ad_delay o2 =  IQ2;
// assign `fun400ad_delay o3 =  IQ3;
// assign `fun400ad_delay o4 =  IQ4;
// 

   input clk, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun400ad_delay o1_random_init = o1_tmp ;
      assign `fun400ad_delay o2_random_init = o2_tmp ;
      assign `fun400ad_delay o3_random_init = o3_tmp ;
      assign `fun400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fun400ad_delay o1_random_init = o1_tmp ;
      assign `fun400ad_delay o2_random_init = o2_tmp ;
      assign `fun400ad_delay o3_random_init = o3_tmp ;
      assign `fun400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G192(MGM_W144,d1_delay);
   not MGM_G193(MGM_W145,d2_delay);
   and MGM_G194(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G195(MGM_W147,d3_delay);
   and MGM_G196(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G197(MGM_W149,d4_delay);
   and MGM_G198(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W149,MGM_W148);
   not MGM_G199(MGM_W150,d1_delay);
   not MGM_G200(MGM_W151,d2_delay);
   and MGM_G201(MGM_W152,MGM_W151,MGM_W150);
   not MGM_G202(MGM_W153,d3_delay);
   and MGM_G203(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G204(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W154);
   not MGM_G205(MGM_W155,d1_delay);
   not MGM_G206(MGM_W156,d2_delay);
   and MGM_G207(MGM_W157,MGM_W156,MGM_W155);
   and MGM_G208(MGM_W158,d3_delay,MGM_W157);
   not MGM_G209(MGM_W159,d4_delay);
   and MGM_G210(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W159,MGM_W158);
   not MGM_G211(MGM_W160,d1_delay);
   not MGM_G212(MGM_W161,d2_delay);
   and MGM_G213(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G214(MGM_W163,d3_delay,MGM_W162);
   and MGM_G215(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W163);
   not MGM_G216(MGM_W164,d1_delay);
   and MGM_G217(MGM_W165,d2_delay,MGM_W164);
   not MGM_G218(MGM_W166,d3_delay);
   and MGM_G219(MGM_W167,MGM_W166,MGM_W165);
   not MGM_G220(MGM_W168,d4_delay);
   and MGM_G221(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W168,MGM_W167);
   not MGM_G222(MGM_W169,d1_delay);
   and MGM_G223(MGM_W170,d2_delay,MGM_W169);
   not MGM_G224(MGM_W171,d3_delay);
   and MGM_G225(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G226(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W172);
   not MGM_G227(MGM_W173,d1_delay);
   and MGM_G228(MGM_W174,d2_delay,MGM_W173);
   and MGM_G229(MGM_W175,d3_delay,MGM_W174);
   not MGM_G230(MGM_W176,d4_delay);
   and MGM_G231(ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W176,MGM_W175);
   not MGM_G232(MGM_W177,d1_delay);
   and MGM_G233(MGM_W178,d2_delay,MGM_W177);
   and MGM_G234(MGM_W179,d3_delay,MGM_W178);
   and MGM_G235(ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W179);
   not MGM_G236(MGM_W180,d2_delay);
   and MGM_G237(MGM_W181,MGM_W180,d1_delay);
   not MGM_G238(MGM_W182,d3_delay);
   and MGM_G239(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G240(MGM_W184,d4_delay);
   and MGM_G241(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W184,MGM_W183);
   not MGM_G242(MGM_W185,d2_delay);
   and MGM_G243(MGM_W186,MGM_W185,d1_delay);
   not MGM_G244(MGM_W187,d3_delay);
   and MGM_G245(MGM_W188,MGM_W187,MGM_W186);
   and MGM_G246(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W188);
   not MGM_G247(MGM_W189,d2_delay);
   and MGM_G248(MGM_W190,MGM_W189,d1_delay);
   and MGM_G249(MGM_W191,d3_delay,MGM_W190);
   not MGM_G250(MGM_W192,d4_delay);
   and MGM_G251(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W192,MGM_W191);
   not MGM_G252(MGM_W193,d2_delay);
   and MGM_G253(MGM_W194,MGM_W193,d1_delay);
   and MGM_G254(MGM_W195,d3_delay,MGM_W194);
   and MGM_G255(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W195);
   and MGM_G256(MGM_W196,d2_delay,d1_delay);
   not MGM_G257(MGM_W197,d3_delay);
   and MGM_G258(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G259(MGM_W199,d4_delay);
   and MGM_G260(ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W199,MGM_W198);
   and MGM_G261(MGM_W200,d2_delay,d1_delay);
   not MGM_G262(MGM_W201,d3_delay);
   and MGM_G263(MGM_W202,MGM_W201,MGM_W200);
   and MGM_G264(ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W202);
   and MGM_G265(MGM_W203,d2_delay,d1_delay);
   and MGM_G266(MGM_W204,d3_delay,MGM_W203);
   not MGM_G267(MGM_W205,d4_delay);
   and MGM_G268(ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W205,MGM_W204);
   and MGM_G269(MGM_W206,d2_delay,d1_delay);
   and MGM_G270(MGM_W207,d3_delay,MGM_W206);
   and MGM_G271(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W207);
   not MGM_G272(MGM_W208,d2_delay);
   not MGM_G273(MGM_W209,d3_delay);
   and MGM_G274(MGM_W210,MGM_W209,MGM_W208);
   not MGM_G275(MGM_W211,d4_delay);
   and MGM_G276(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W211,MGM_W210);
   not MGM_G277(MGM_W212,d2_delay);
   not MGM_G278(MGM_W213,d3_delay);
   and MGM_G279(MGM_W214,MGM_W213,MGM_W212);
   and MGM_G280(ENABLE_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W214);
   not MGM_G281(MGM_W215,d2_delay);
   and MGM_G282(MGM_W216,d3_delay,MGM_W215);
   not MGM_G283(MGM_W217,d4_delay);
   and MGM_G284(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W217,MGM_W216);
   not MGM_G285(MGM_W218,d2_delay);
   and MGM_G286(MGM_W219,d3_delay,MGM_W218);
   and MGM_G287(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W219);
   not MGM_G288(MGM_W220,d3_delay);
   and MGM_G289(MGM_W221,MGM_W220,d2_delay);
   not MGM_G290(MGM_W222,d4_delay);
   and MGM_G291(ENABLE_d2_AND_NOT_d3_AND_NOT_d4,MGM_W222,MGM_W221);
   not MGM_G292(MGM_W223,d3_delay);
   and MGM_G293(MGM_W224,MGM_W223,d2_delay);
   and MGM_G294(ENABLE_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W224);
   and MGM_G295(MGM_W225,d3_delay,d2_delay);
   not MGM_G296(MGM_W226,d4_delay);
   and MGM_G297(ENABLE_d2_AND_d3_AND_NOT_d4,MGM_W226,MGM_W225);
   and MGM_G298(MGM_W227,d3_delay,d2_delay);
   and MGM_G299(ENABLE_d2_AND_d3_AND_d4,d4_delay,MGM_W227);
   not MGM_G300(MGM_W228,d1_delay);
   not MGM_G301(MGM_W229,d3_delay);
   and MGM_G302(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G303(MGM_W231,d4_delay);
   and MGM_G304(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W231,MGM_W230);
   not MGM_G305(MGM_W232,d1_delay);
   not MGM_G306(MGM_W233,d3_delay);
   and MGM_G307(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G308(ENABLE_NOT_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W234);
   not MGM_G309(MGM_W235,d1_delay);
   and MGM_G310(MGM_W236,d3_delay,MGM_W235);
   not MGM_G311(MGM_W237,d4_delay);
   and MGM_G312(ENABLE_NOT_d1_AND_d3_AND_NOT_d4,MGM_W237,MGM_W236);
   not MGM_G313(MGM_W238,d1_delay);
   and MGM_G314(MGM_W239,d3_delay,MGM_W238);
   and MGM_G315(ENABLE_NOT_d1_AND_d3_AND_d4,d4_delay,MGM_W239);
   not MGM_G316(MGM_W240,d3_delay);
   and MGM_G317(MGM_W241,MGM_W240,d1_delay);
   not MGM_G318(MGM_W242,d4_delay);
   and MGM_G319(ENABLE_d1_AND_NOT_d3_AND_NOT_d4,MGM_W242,MGM_W241);
   not MGM_G320(MGM_W243,d3_delay);
   and MGM_G321(MGM_W244,MGM_W243,d1_delay);
   and MGM_G322(ENABLE_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W244);
   and MGM_G323(MGM_W245,d3_delay,d1_delay);
   not MGM_G324(MGM_W246,d4_delay);
   and MGM_G325(ENABLE_d1_AND_d3_AND_NOT_d4,MGM_W246,MGM_W245);
   and MGM_G326(MGM_W247,d3_delay,d1_delay);
   and MGM_G327(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W247);
   not MGM_G328(MGM_W248,d1_delay);
   not MGM_G329(MGM_W249,d2_delay);
   and MGM_G330(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G331(MGM_W251,d4_delay);
   and MGM_G332(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W251,MGM_W250);
   not MGM_G333(MGM_W252,d1_delay);
   not MGM_G334(MGM_W253,d2_delay);
   and MGM_G335(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G336(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W254);
   not MGM_G337(MGM_W255,d1_delay);
   and MGM_G338(MGM_W256,d2_delay,MGM_W255);
   not MGM_G339(MGM_W257,d4_delay);
   and MGM_G340(ENABLE_NOT_d1_AND_d2_AND_NOT_d4,MGM_W257,MGM_W256);
   not MGM_G341(MGM_W258,d1_delay);
   and MGM_G342(MGM_W259,d2_delay,MGM_W258);
   and MGM_G343(ENABLE_NOT_d1_AND_d2_AND_d4,d4_delay,MGM_W259);
   not MGM_G344(MGM_W260,d2_delay);
   and MGM_G345(MGM_W261,MGM_W260,d1_delay);
   not MGM_G346(MGM_W262,d4_delay);
   and MGM_G347(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W262,MGM_W261);
   not MGM_G348(MGM_W263,d2_delay);
   and MGM_G349(MGM_W264,MGM_W263,d1_delay);
   and MGM_G350(ENABLE_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W264);
   and MGM_G351(MGM_W265,d2_delay,d1_delay);
   not MGM_G352(MGM_W266,d4_delay);
   and MGM_G353(ENABLE_d1_AND_d2_AND_NOT_d4,MGM_W266,MGM_W265);
   and MGM_G354(MGM_W267,d2_delay,d1_delay);
   and MGM_G355(ENABLE_d1_AND_d2_AND_d4,d4_delay,MGM_W267);
   not MGM_G356(MGM_W268,d1_delay);
   not MGM_G357(MGM_W269,d2_delay);
   and MGM_G358(MGM_W270,MGM_W269,MGM_W268);
   not MGM_G359(MGM_W271,d3_delay);
   and MGM_G360(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W271,MGM_W270);
   not MGM_G361(MGM_W272,d1_delay);
   not MGM_G362(MGM_W273,d2_delay);
   and MGM_G363(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G364(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W274);
   not MGM_G365(MGM_W275,d1_delay);
   and MGM_G366(MGM_W276,d2_delay,MGM_W275);
   not MGM_G367(MGM_W277,d3_delay);
   and MGM_G368(ENABLE_NOT_d1_AND_d2_AND_NOT_d3,MGM_W277,MGM_W276);
   not MGM_G369(MGM_W278,d1_delay);
   and MGM_G370(MGM_W279,d2_delay,MGM_W278);
   and MGM_G371(ENABLE_NOT_d1_AND_d2_AND_d3,d3_delay,MGM_W279);
   not MGM_G372(MGM_W280,d2_delay);
   and MGM_G373(MGM_W281,MGM_W280,d1_delay);
   not MGM_G374(MGM_W282,d3_delay);
   and MGM_G375(ENABLE_d1_AND_NOT_d2_AND_NOT_d3,MGM_W282,MGM_W281);
   not MGM_G376(MGM_W283,d2_delay);
   and MGM_G377(MGM_W284,MGM_W283,d1_delay);
   and MGM_G378(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W284);
   and MGM_G379(MGM_W285,d2_delay,d1_delay);
   not MGM_G380(MGM_W286,d3_delay);
   and MGM_G381(ENABLE_d1_AND_d2_AND_NOT_d3,MGM_W286,MGM_W285);
   and MGM_G382(MGM_W287,d2_delay,d1_delay);
   and MGM_G383(ENABLE_d1_AND_d2_AND_d3,d3_delay,MGM_W287);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      
      // setuphold d1- clk-LH
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      
      // setuphold d2- clk-LH
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      
      // setuphold d3- clk-LH
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      
      // setuphold d4- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun400ad1q01x2( clk, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 4-bit non-scan DFF o1 = {(d1) on rising clk} o2 = {(d2) on rising clk} o3 = {(d3) on rising clk} o4 = {(d4) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= d1 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= d2 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= d3 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= d4 ;
// end
// 
// assign `fun400ad_delay o1 =  IQ1;
// assign `fun400ad_delay o2 =  IQ2;
// assign `fun400ad_delay o3 =  IQ3;
// assign `fun400ad_delay o4 =  IQ4;
// 

   input clk, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun400ad_delay o1_random_init = o1_tmp ;
      assign `fun400ad_delay o2_random_init = o2_tmp ;
      assign `fun400ad_delay o3_random_init = o3_tmp ;
      assign `fun400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fun400ad_delay o1_random_init = o1_tmp ;
      assign `fun400ad_delay o2_random_init = o2_tmp ;
      assign `fun400ad_delay o3_random_init = o3_tmp ;
      assign `fun400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q01x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G192(MGM_W144,d1_delay);
   not MGM_G193(MGM_W145,d2_delay);
   and MGM_G194(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G195(MGM_W147,d3_delay);
   and MGM_G196(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G197(MGM_W149,d4_delay);
   and MGM_G198(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W149,MGM_W148);
   not MGM_G199(MGM_W150,d1_delay);
   not MGM_G200(MGM_W151,d2_delay);
   and MGM_G201(MGM_W152,MGM_W151,MGM_W150);
   not MGM_G202(MGM_W153,d3_delay);
   and MGM_G203(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G204(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W154);
   not MGM_G205(MGM_W155,d1_delay);
   not MGM_G206(MGM_W156,d2_delay);
   and MGM_G207(MGM_W157,MGM_W156,MGM_W155);
   and MGM_G208(MGM_W158,d3_delay,MGM_W157);
   not MGM_G209(MGM_W159,d4_delay);
   and MGM_G210(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W159,MGM_W158);
   not MGM_G211(MGM_W160,d1_delay);
   not MGM_G212(MGM_W161,d2_delay);
   and MGM_G213(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G214(MGM_W163,d3_delay,MGM_W162);
   and MGM_G215(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W163);
   not MGM_G216(MGM_W164,d1_delay);
   and MGM_G217(MGM_W165,d2_delay,MGM_W164);
   not MGM_G218(MGM_W166,d3_delay);
   and MGM_G219(MGM_W167,MGM_W166,MGM_W165);
   not MGM_G220(MGM_W168,d4_delay);
   and MGM_G221(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W168,MGM_W167);
   not MGM_G222(MGM_W169,d1_delay);
   and MGM_G223(MGM_W170,d2_delay,MGM_W169);
   not MGM_G224(MGM_W171,d3_delay);
   and MGM_G225(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G226(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W172);
   not MGM_G227(MGM_W173,d1_delay);
   and MGM_G228(MGM_W174,d2_delay,MGM_W173);
   and MGM_G229(MGM_W175,d3_delay,MGM_W174);
   not MGM_G230(MGM_W176,d4_delay);
   and MGM_G231(ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W176,MGM_W175);
   not MGM_G232(MGM_W177,d1_delay);
   and MGM_G233(MGM_W178,d2_delay,MGM_W177);
   and MGM_G234(MGM_W179,d3_delay,MGM_W178);
   and MGM_G235(ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W179);
   not MGM_G236(MGM_W180,d2_delay);
   and MGM_G237(MGM_W181,MGM_W180,d1_delay);
   not MGM_G238(MGM_W182,d3_delay);
   and MGM_G239(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G240(MGM_W184,d4_delay);
   and MGM_G241(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W184,MGM_W183);
   not MGM_G242(MGM_W185,d2_delay);
   and MGM_G243(MGM_W186,MGM_W185,d1_delay);
   not MGM_G244(MGM_W187,d3_delay);
   and MGM_G245(MGM_W188,MGM_W187,MGM_W186);
   and MGM_G246(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W188);
   not MGM_G247(MGM_W189,d2_delay);
   and MGM_G248(MGM_W190,MGM_W189,d1_delay);
   and MGM_G249(MGM_W191,d3_delay,MGM_W190);
   not MGM_G250(MGM_W192,d4_delay);
   and MGM_G251(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W192,MGM_W191);
   not MGM_G252(MGM_W193,d2_delay);
   and MGM_G253(MGM_W194,MGM_W193,d1_delay);
   and MGM_G254(MGM_W195,d3_delay,MGM_W194);
   and MGM_G255(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W195);
   and MGM_G256(MGM_W196,d2_delay,d1_delay);
   not MGM_G257(MGM_W197,d3_delay);
   and MGM_G258(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G259(MGM_W199,d4_delay);
   and MGM_G260(ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W199,MGM_W198);
   and MGM_G261(MGM_W200,d2_delay,d1_delay);
   not MGM_G262(MGM_W201,d3_delay);
   and MGM_G263(MGM_W202,MGM_W201,MGM_W200);
   and MGM_G264(ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W202);
   and MGM_G265(MGM_W203,d2_delay,d1_delay);
   and MGM_G266(MGM_W204,d3_delay,MGM_W203);
   not MGM_G267(MGM_W205,d4_delay);
   and MGM_G268(ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W205,MGM_W204);
   and MGM_G269(MGM_W206,d2_delay,d1_delay);
   and MGM_G270(MGM_W207,d3_delay,MGM_W206);
   and MGM_G271(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W207);
   not MGM_G272(MGM_W208,d2_delay);
   not MGM_G273(MGM_W209,d3_delay);
   and MGM_G274(MGM_W210,MGM_W209,MGM_W208);
   not MGM_G275(MGM_W211,d4_delay);
   and MGM_G276(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W211,MGM_W210);
   not MGM_G277(MGM_W212,d2_delay);
   not MGM_G278(MGM_W213,d3_delay);
   and MGM_G279(MGM_W214,MGM_W213,MGM_W212);
   and MGM_G280(ENABLE_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W214);
   not MGM_G281(MGM_W215,d2_delay);
   and MGM_G282(MGM_W216,d3_delay,MGM_W215);
   not MGM_G283(MGM_W217,d4_delay);
   and MGM_G284(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W217,MGM_W216);
   not MGM_G285(MGM_W218,d2_delay);
   and MGM_G286(MGM_W219,d3_delay,MGM_W218);
   and MGM_G287(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W219);
   not MGM_G288(MGM_W220,d3_delay);
   and MGM_G289(MGM_W221,MGM_W220,d2_delay);
   not MGM_G290(MGM_W222,d4_delay);
   and MGM_G291(ENABLE_d2_AND_NOT_d3_AND_NOT_d4,MGM_W222,MGM_W221);
   not MGM_G292(MGM_W223,d3_delay);
   and MGM_G293(MGM_W224,MGM_W223,d2_delay);
   and MGM_G294(ENABLE_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W224);
   and MGM_G295(MGM_W225,d3_delay,d2_delay);
   not MGM_G296(MGM_W226,d4_delay);
   and MGM_G297(ENABLE_d2_AND_d3_AND_NOT_d4,MGM_W226,MGM_W225);
   and MGM_G298(MGM_W227,d3_delay,d2_delay);
   and MGM_G299(ENABLE_d2_AND_d3_AND_d4,d4_delay,MGM_W227);
   not MGM_G300(MGM_W228,d1_delay);
   not MGM_G301(MGM_W229,d3_delay);
   and MGM_G302(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G303(MGM_W231,d4_delay);
   and MGM_G304(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W231,MGM_W230);
   not MGM_G305(MGM_W232,d1_delay);
   not MGM_G306(MGM_W233,d3_delay);
   and MGM_G307(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G308(ENABLE_NOT_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W234);
   not MGM_G309(MGM_W235,d1_delay);
   and MGM_G310(MGM_W236,d3_delay,MGM_W235);
   not MGM_G311(MGM_W237,d4_delay);
   and MGM_G312(ENABLE_NOT_d1_AND_d3_AND_NOT_d4,MGM_W237,MGM_W236);
   not MGM_G313(MGM_W238,d1_delay);
   and MGM_G314(MGM_W239,d3_delay,MGM_W238);
   and MGM_G315(ENABLE_NOT_d1_AND_d3_AND_d4,d4_delay,MGM_W239);
   not MGM_G316(MGM_W240,d3_delay);
   and MGM_G317(MGM_W241,MGM_W240,d1_delay);
   not MGM_G318(MGM_W242,d4_delay);
   and MGM_G319(ENABLE_d1_AND_NOT_d3_AND_NOT_d4,MGM_W242,MGM_W241);
   not MGM_G320(MGM_W243,d3_delay);
   and MGM_G321(MGM_W244,MGM_W243,d1_delay);
   and MGM_G322(ENABLE_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W244);
   and MGM_G323(MGM_W245,d3_delay,d1_delay);
   not MGM_G324(MGM_W246,d4_delay);
   and MGM_G325(ENABLE_d1_AND_d3_AND_NOT_d4,MGM_W246,MGM_W245);
   and MGM_G326(MGM_W247,d3_delay,d1_delay);
   and MGM_G327(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W247);
   not MGM_G328(MGM_W248,d1_delay);
   not MGM_G329(MGM_W249,d2_delay);
   and MGM_G330(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G331(MGM_W251,d4_delay);
   and MGM_G332(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W251,MGM_W250);
   not MGM_G333(MGM_W252,d1_delay);
   not MGM_G334(MGM_W253,d2_delay);
   and MGM_G335(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G336(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W254);
   not MGM_G337(MGM_W255,d1_delay);
   and MGM_G338(MGM_W256,d2_delay,MGM_W255);
   not MGM_G339(MGM_W257,d4_delay);
   and MGM_G340(ENABLE_NOT_d1_AND_d2_AND_NOT_d4,MGM_W257,MGM_W256);
   not MGM_G341(MGM_W258,d1_delay);
   and MGM_G342(MGM_W259,d2_delay,MGM_W258);
   and MGM_G343(ENABLE_NOT_d1_AND_d2_AND_d4,d4_delay,MGM_W259);
   not MGM_G344(MGM_W260,d2_delay);
   and MGM_G345(MGM_W261,MGM_W260,d1_delay);
   not MGM_G346(MGM_W262,d4_delay);
   and MGM_G347(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W262,MGM_W261);
   not MGM_G348(MGM_W263,d2_delay);
   and MGM_G349(MGM_W264,MGM_W263,d1_delay);
   and MGM_G350(ENABLE_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W264);
   and MGM_G351(MGM_W265,d2_delay,d1_delay);
   not MGM_G352(MGM_W266,d4_delay);
   and MGM_G353(ENABLE_d1_AND_d2_AND_NOT_d4,MGM_W266,MGM_W265);
   and MGM_G354(MGM_W267,d2_delay,d1_delay);
   and MGM_G355(ENABLE_d1_AND_d2_AND_d4,d4_delay,MGM_W267);
   not MGM_G356(MGM_W268,d1_delay);
   not MGM_G357(MGM_W269,d2_delay);
   and MGM_G358(MGM_W270,MGM_W269,MGM_W268);
   not MGM_G359(MGM_W271,d3_delay);
   and MGM_G360(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W271,MGM_W270);
   not MGM_G361(MGM_W272,d1_delay);
   not MGM_G362(MGM_W273,d2_delay);
   and MGM_G363(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G364(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W274);
   not MGM_G365(MGM_W275,d1_delay);
   and MGM_G366(MGM_W276,d2_delay,MGM_W275);
   not MGM_G367(MGM_W277,d3_delay);
   and MGM_G368(ENABLE_NOT_d1_AND_d2_AND_NOT_d3,MGM_W277,MGM_W276);
   not MGM_G369(MGM_W278,d1_delay);
   and MGM_G370(MGM_W279,d2_delay,MGM_W278);
   and MGM_G371(ENABLE_NOT_d1_AND_d2_AND_d3,d3_delay,MGM_W279);
   not MGM_G372(MGM_W280,d2_delay);
   and MGM_G373(MGM_W281,MGM_W280,d1_delay);
   not MGM_G374(MGM_W282,d3_delay);
   and MGM_G375(ENABLE_d1_AND_NOT_d2_AND_NOT_d3,MGM_W282,MGM_W281);
   not MGM_G376(MGM_W283,d2_delay);
   and MGM_G377(MGM_W284,MGM_W283,d1_delay);
   and MGM_G378(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W284);
   and MGM_G379(MGM_W285,d2_delay,d1_delay);
   not MGM_G380(MGM_W286,d3_delay);
   and MGM_G381(ENABLE_d1_AND_d2_AND_NOT_d3,MGM_W286,MGM_W285);
   and MGM_G382(MGM_W287,d2_delay,d1_delay);
   and MGM_G383(ENABLE_d1_AND_d2_AND_d3,d3_delay,MGM_W287);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      
      // setuphold d1- clk-LH
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      
      // setuphold d2- clk-LH
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      
      // setuphold d3- clk-LH
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      
      // setuphold d4- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun400ad1q02x2( clk, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 4-bit non-scan DFF o1 = {(d1) on rising clk} o2 = {(d2) on rising clk} o3 = {(d3) on rising clk} o4 = {(d4) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= d1 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= d2 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= d3 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= d4 ;
// end
// 
// assign `fun400ad_delay o1 =  IQ1;
// assign `fun400ad_delay o2 =  IQ2;
// assign `fun400ad_delay o3 =  IQ3;
// assign `fun400ad_delay o4 =  IQ4;
// 

   input clk, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q02x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun400ad_delay o1_random_init = o1_tmp ;
      assign `fun400ad_delay o2_random_init = o2_tmp ;
      assign `fun400ad_delay o3_random_init = o3_tmp ;
      assign `fun400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q02x2_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fun400ad_delay o1_random_init = o1_tmp ;
      assign `fun400ad_delay o2_random_init = o2_tmp ;
      assign `fun400ad_delay o3_random_init = o3_tmp ;
      assign `fun400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q02x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun400ad_func i0sfun400ad1q02x2_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G192(MGM_W144,d1_delay);
   not MGM_G193(MGM_W145,d2_delay);
   and MGM_G194(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G195(MGM_W147,d3_delay);
   and MGM_G196(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G197(MGM_W149,d4_delay);
   and MGM_G198(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W149,MGM_W148);
   not MGM_G199(MGM_W150,d1_delay);
   not MGM_G200(MGM_W151,d2_delay);
   and MGM_G201(MGM_W152,MGM_W151,MGM_W150);
   not MGM_G202(MGM_W153,d3_delay);
   and MGM_G203(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G204(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W154);
   not MGM_G205(MGM_W155,d1_delay);
   not MGM_G206(MGM_W156,d2_delay);
   and MGM_G207(MGM_W157,MGM_W156,MGM_W155);
   and MGM_G208(MGM_W158,d3_delay,MGM_W157);
   not MGM_G209(MGM_W159,d4_delay);
   and MGM_G210(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W159,MGM_W158);
   not MGM_G211(MGM_W160,d1_delay);
   not MGM_G212(MGM_W161,d2_delay);
   and MGM_G213(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G214(MGM_W163,d3_delay,MGM_W162);
   and MGM_G215(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W163);
   not MGM_G216(MGM_W164,d1_delay);
   and MGM_G217(MGM_W165,d2_delay,MGM_W164);
   not MGM_G218(MGM_W166,d3_delay);
   and MGM_G219(MGM_W167,MGM_W166,MGM_W165);
   not MGM_G220(MGM_W168,d4_delay);
   and MGM_G221(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W168,MGM_W167);
   not MGM_G222(MGM_W169,d1_delay);
   and MGM_G223(MGM_W170,d2_delay,MGM_W169);
   not MGM_G224(MGM_W171,d3_delay);
   and MGM_G225(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G226(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W172);
   not MGM_G227(MGM_W173,d1_delay);
   and MGM_G228(MGM_W174,d2_delay,MGM_W173);
   and MGM_G229(MGM_W175,d3_delay,MGM_W174);
   not MGM_G230(MGM_W176,d4_delay);
   and MGM_G231(ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W176,MGM_W175);
   not MGM_G232(MGM_W177,d1_delay);
   and MGM_G233(MGM_W178,d2_delay,MGM_W177);
   and MGM_G234(MGM_W179,d3_delay,MGM_W178);
   and MGM_G235(ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W179);
   not MGM_G236(MGM_W180,d2_delay);
   and MGM_G237(MGM_W181,MGM_W180,d1_delay);
   not MGM_G238(MGM_W182,d3_delay);
   and MGM_G239(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G240(MGM_W184,d4_delay);
   and MGM_G241(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W184,MGM_W183);
   not MGM_G242(MGM_W185,d2_delay);
   and MGM_G243(MGM_W186,MGM_W185,d1_delay);
   not MGM_G244(MGM_W187,d3_delay);
   and MGM_G245(MGM_W188,MGM_W187,MGM_W186);
   and MGM_G246(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W188);
   not MGM_G247(MGM_W189,d2_delay);
   and MGM_G248(MGM_W190,MGM_W189,d1_delay);
   and MGM_G249(MGM_W191,d3_delay,MGM_W190);
   not MGM_G250(MGM_W192,d4_delay);
   and MGM_G251(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W192,MGM_W191);
   not MGM_G252(MGM_W193,d2_delay);
   and MGM_G253(MGM_W194,MGM_W193,d1_delay);
   and MGM_G254(MGM_W195,d3_delay,MGM_W194);
   and MGM_G255(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W195);
   and MGM_G256(MGM_W196,d2_delay,d1_delay);
   not MGM_G257(MGM_W197,d3_delay);
   and MGM_G258(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G259(MGM_W199,d4_delay);
   and MGM_G260(ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W199,MGM_W198);
   and MGM_G261(MGM_W200,d2_delay,d1_delay);
   not MGM_G262(MGM_W201,d3_delay);
   and MGM_G263(MGM_W202,MGM_W201,MGM_W200);
   and MGM_G264(ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W202);
   and MGM_G265(MGM_W203,d2_delay,d1_delay);
   and MGM_G266(MGM_W204,d3_delay,MGM_W203);
   not MGM_G267(MGM_W205,d4_delay);
   and MGM_G268(ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W205,MGM_W204);
   and MGM_G269(MGM_W206,d2_delay,d1_delay);
   and MGM_G270(MGM_W207,d3_delay,MGM_W206);
   and MGM_G271(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W207);
   not MGM_G272(MGM_W208,d2_delay);
   not MGM_G273(MGM_W209,d3_delay);
   and MGM_G274(MGM_W210,MGM_W209,MGM_W208);
   not MGM_G275(MGM_W211,d4_delay);
   and MGM_G276(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W211,MGM_W210);
   not MGM_G277(MGM_W212,d2_delay);
   not MGM_G278(MGM_W213,d3_delay);
   and MGM_G279(MGM_W214,MGM_W213,MGM_W212);
   and MGM_G280(ENABLE_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W214);
   not MGM_G281(MGM_W215,d2_delay);
   and MGM_G282(MGM_W216,d3_delay,MGM_W215);
   not MGM_G283(MGM_W217,d4_delay);
   and MGM_G284(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W217,MGM_W216);
   not MGM_G285(MGM_W218,d2_delay);
   and MGM_G286(MGM_W219,d3_delay,MGM_W218);
   and MGM_G287(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W219);
   not MGM_G288(MGM_W220,d3_delay);
   and MGM_G289(MGM_W221,MGM_W220,d2_delay);
   not MGM_G290(MGM_W222,d4_delay);
   and MGM_G291(ENABLE_d2_AND_NOT_d3_AND_NOT_d4,MGM_W222,MGM_W221);
   not MGM_G292(MGM_W223,d3_delay);
   and MGM_G293(MGM_W224,MGM_W223,d2_delay);
   and MGM_G294(ENABLE_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W224);
   and MGM_G295(MGM_W225,d3_delay,d2_delay);
   not MGM_G296(MGM_W226,d4_delay);
   and MGM_G297(ENABLE_d2_AND_d3_AND_NOT_d4,MGM_W226,MGM_W225);
   and MGM_G298(MGM_W227,d3_delay,d2_delay);
   and MGM_G299(ENABLE_d2_AND_d3_AND_d4,d4_delay,MGM_W227);
   not MGM_G300(MGM_W228,d1_delay);
   not MGM_G301(MGM_W229,d3_delay);
   and MGM_G302(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G303(MGM_W231,d4_delay);
   and MGM_G304(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W231,MGM_W230);
   not MGM_G305(MGM_W232,d1_delay);
   not MGM_G306(MGM_W233,d3_delay);
   and MGM_G307(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G308(ENABLE_NOT_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W234);
   not MGM_G309(MGM_W235,d1_delay);
   and MGM_G310(MGM_W236,d3_delay,MGM_W235);
   not MGM_G311(MGM_W237,d4_delay);
   and MGM_G312(ENABLE_NOT_d1_AND_d3_AND_NOT_d4,MGM_W237,MGM_W236);
   not MGM_G313(MGM_W238,d1_delay);
   and MGM_G314(MGM_W239,d3_delay,MGM_W238);
   and MGM_G315(ENABLE_NOT_d1_AND_d3_AND_d4,d4_delay,MGM_W239);
   not MGM_G316(MGM_W240,d3_delay);
   and MGM_G317(MGM_W241,MGM_W240,d1_delay);
   not MGM_G318(MGM_W242,d4_delay);
   and MGM_G319(ENABLE_d1_AND_NOT_d3_AND_NOT_d4,MGM_W242,MGM_W241);
   not MGM_G320(MGM_W243,d3_delay);
   and MGM_G321(MGM_W244,MGM_W243,d1_delay);
   and MGM_G322(ENABLE_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W244);
   and MGM_G323(MGM_W245,d3_delay,d1_delay);
   not MGM_G324(MGM_W246,d4_delay);
   and MGM_G325(ENABLE_d1_AND_d3_AND_NOT_d4,MGM_W246,MGM_W245);
   and MGM_G326(MGM_W247,d3_delay,d1_delay);
   and MGM_G327(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W247);
   not MGM_G328(MGM_W248,d1_delay);
   not MGM_G329(MGM_W249,d2_delay);
   and MGM_G330(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G331(MGM_W251,d4_delay);
   and MGM_G332(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W251,MGM_W250);
   not MGM_G333(MGM_W252,d1_delay);
   not MGM_G334(MGM_W253,d2_delay);
   and MGM_G335(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G336(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W254);
   not MGM_G337(MGM_W255,d1_delay);
   and MGM_G338(MGM_W256,d2_delay,MGM_W255);
   not MGM_G339(MGM_W257,d4_delay);
   and MGM_G340(ENABLE_NOT_d1_AND_d2_AND_NOT_d4,MGM_W257,MGM_W256);
   not MGM_G341(MGM_W258,d1_delay);
   and MGM_G342(MGM_W259,d2_delay,MGM_W258);
   and MGM_G343(ENABLE_NOT_d1_AND_d2_AND_d4,d4_delay,MGM_W259);
   not MGM_G344(MGM_W260,d2_delay);
   and MGM_G345(MGM_W261,MGM_W260,d1_delay);
   not MGM_G346(MGM_W262,d4_delay);
   and MGM_G347(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W262,MGM_W261);
   not MGM_G348(MGM_W263,d2_delay);
   and MGM_G349(MGM_W264,MGM_W263,d1_delay);
   and MGM_G350(ENABLE_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W264);
   and MGM_G351(MGM_W265,d2_delay,d1_delay);
   not MGM_G352(MGM_W266,d4_delay);
   and MGM_G353(ENABLE_d1_AND_d2_AND_NOT_d4,MGM_W266,MGM_W265);
   and MGM_G354(MGM_W267,d2_delay,d1_delay);
   and MGM_G355(ENABLE_d1_AND_d2_AND_d4,d4_delay,MGM_W267);
   not MGM_G356(MGM_W268,d1_delay);
   not MGM_G357(MGM_W269,d2_delay);
   and MGM_G358(MGM_W270,MGM_W269,MGM_W268);
   not MGM_G359(MGM_W271,d3_delay);
   and MGM_G360(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W271,MGM_W270);
   not MGM_G361(MGM_W272,d1_delay);
   not MGM_G362(MGM_W273,d2_delay);
   and MGM_G363(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G364(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W274);
   not MGM_G365(MGM_W275,d1_delay);
   and MGM_G366(MGM_W276,d2_delay,MGM_W275);
   not MGM_G367(MGM_W277,d3_delay);
   and MGM_G368(ENABLE_NOT_d1_AND_d2_AND_NOT_d3,MGM_W277,MGM_W276);
   not MGM_G369(MGM_W278,d1_delay);
   and MGM_G370(MGM_W279,d2_delay,MGM_W278);
   and MGM_G371(ENABLE_NOT_d1_AND_d2_AND_d3,d3_delay,MGM_W279);
   not MGM_G372(MGM_W280,d2_delay);
   and MGM_G373(MGM_W281,MGM_W280,d1_delay);
   not MGM_G374(MGM_W282,d3_delay);
   and MGM_G375(ENABLE_d1_AND_NOT_d2_AND_NOT_d3,MGM_W282,MGM_W281);
   not MGM_G376(MGM_W283,d2_delay);
   and MGM_G377(MGM_W284,MGM_W283,d1_delay);
   and MGM_G378(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W284);
   and MGM_G379(MGM_W285,d2_delay,d1_delay);
   not MGM_G380(MGM_W286,d3_delay);
   and MGM_G381(ENABLE_d1_AND_d2_AND_NOT_d3,MGM_W286,MGM_W285);
   and MGM_G382(MGM_W287,d2_delay,d1_delay);
   and MGM_G383(ENABLE_d1_AND_d2_AND_d3,d3_delay,MGM_W287);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      
      // setuphold d1- clk-LH
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      
      // setuphold d2- clk-LH
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      
      // setuphold d3- clk-LH
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      
      // setuphold d4- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun480ad1q01x1( clkb, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 4-bit non-scan DFF with clkb o1 = {(d1) on falling clkb} o2 = {(d2) on falling clkb} o3 = {(d3) on falling clkb} o4 = {(d4) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ1 <= d1 ;
// end
// always @ (negedge clkb)
// begin
// IQ2 <= d2 ;
// end
// always @ (negedge clkb)
// begin
// IQ3 <= d3 ;
// end
// always @ (negedge clkb)
// begin
// IQ4 <= d4 ;
// end
// 
// assign `fun480ad_delay o1 =  IQ1;
// assign `fun480ad_delay o2 =  IQ2;
// assign `fun480ad_delay o3 =  IQ3;
// assign `fun480ad_delay o4 =  IQ4;
// 

   input clkb, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun480ad_delay o1_random_init = o1_tmp ;
      assign `fun480ad_delay o2_random_init = o2_tmp ;
      assign `fun480ad_delay o3_random_init = o3_tmp ;
      assign `fun480ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fun480ad_delay o1_random_init = o1_tmp ;
      assign `fun480ad_delay o2_random_init = o2_tmp ;
      assign `fun480ad_delay o3_random_init = o3_tmp ;
      assign `fun480ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G192(MGM_W144,d1_delay);
   not MGM_G193(MGM_W145,d2_delay);
   and MGM_G194(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G195(MGM_W147,d3_delay);
   and MGM_G196(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G197(MGM_W149,d4_delay);
   and MGM_G198(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W149,MGM_W148);
   not MGM_G199(MGM_W150,d1_delay);
   not MGM_G200(MGM_W151,d2_delay);
   and MGM_G201(MGM_W152,MGM_W151,MGM_W150);
   not MGM_G202(MGM_W153,d3_delay);
   and MGM_G203(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G204(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W154);
   not MGM_G205(MGM_W155,d1_delay);
   not MGM_G206(MGM_W156,d2_delay);
   and MGM_G207(MGM_W157,MGM_W156,MGM_W155);
   and MGM_G208(MGM_W158,d3_delay,MGM_W157);
   not MGM_G209(MGM_W159,d4_delay);
   and MGM_G210(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W159,MGM_W158);
   not MGM_G211(MGM_W160,d1_delay);
   not MGM_G212(MGM_W161,d2_delay);
   and MGM_G213(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G214(MGM_W163,d3_delay,MGM_W162);
   and MGM_G215(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W163);
   not MGM_G216(MGM_W164,d1_delay);
   and MGM_G217(MGM_W165,d2_delay,MGM_W164);
   not MGM_G218(MGM_W166,d3_delay);
   and MGM_G219(MGM_W167,MGM_W166,MGM_W165);
   not MGM_G220(MGM_W168,d4_delay);
   and MGM_G221(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W168,MGM_W167);
   not MGM_G222(MGM_W169,d1_delay);
   and MGM_G223(MGM_W170,d2_delay,MGM_W169);
   not MGM_G224(MGM_W171,d3_delay);
   and MGM_G225(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G226(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W172);
   not MGM_G227(MGM_W173,d1_delay);
   and MGM_G228(MGM_W174,d2_delay,MGM_W173);
   and MGM_G229(MGM_W175,d3_delay,MGM_W174);
   not MGM_G230(MGM_W176,d4_delay);
   and MGM_G231(ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W176,MGM_W175);
   not MGM_G232(MGM_W177,d1_delay);
   and MGM_G233(MGM_W178,d2_delay,MGM_W177);
   and MGM_G234(MGM_W179,d3_delay,MGM_W178);
   and MGM_G235(ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W179);
   not MGM_G236(MGM_W180,d2_delay);
   and MGM_G237(MGM_W181,MGM_W180,d1_delay);
   not MGM_G238(MGM_W182,d3_delay);
   and MGM_G239(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G240(MGM_W184,d4_delay);
   and MGM_G241(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W184,MGM_W183);
   not MGM_G242(MGM_W185,d2_delay);
   and MGM_G243(MGM_W186,MGM_W185,d1_delay);
   not MGM_G244(MGM_W187,d3_delay);
   and MGM_G245(MGM_W188,MGM_W187,MGM_W186);
   and MGM_G246(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W188);
   not MGM_G247(MGM_W189,d2_delay);
   and MGM_G248(MGM_W190,MGM_W189,d1_delay);
   and MGM_G249(MGM_W191,d3_delay,MGM_W190);
   not MGM_G250(MGM_W192,d4_delay);
   and MGM_G251(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W192,MGM_W191);
   not MGM_G252(MGM_W193,d2_delay);
   and MGM_G253(MGM_W194,MGM_W193,d1_delay);
   and MGM_G254(MGM_W195,d3_delay,MGM_W194);
   and MGM_G255(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W195);
   and MGM_G256(MGM_W196,d2_delay,d1_delay);
   not MGM_G257(MGM_W197,d3_delay);
   and MGM_G258(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G259(MGM_W199,d4_delay);
   and MGM_G260(ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W199,MGM_W198);
   and MGM_G261(MGM_W200,d2_delay,d1_delay);
   not MGM_G262(MGM_W201,d3_delay);
   and MGM_G263(MGM_W202,MGM_W201,MGM_W200);
   and MGM_G264(ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W202);
   and MGM_G265(MGM_W203,d2_delay,d1_delay);
   and MGM_G266(MGM_W204,d3_delay,MGM_W203);
   not MGM_G267(MGM_W205,d4_delay);
   and MGM_G268(ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W205,MGM_W204);
   and MGM_G269(MGM_W206,d2_delay,d1_delay);
   and MGM_G270(MGM_W207,d3_delay,MGM_W206);
   and MGM_G271(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W207);
   not MGM_G272(MGM_W208,d2_delay);
   not MGM_G273(MGM_W209,d3_delay);
   and MGM_G274(MGM_W210,MGM_W209,MGM_W208);
   not MGM_G275(MGM_W211,d4_delay);
   and MGM_G276(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W211,MGM_W210);
   not MGM_G277(MGM_W212,d2_delay);
   not MGM_G278(MGM_W213,d3_delay);
   and MGM_G279(MGM_W214,MGM_W213,MGM_W212);
   and MGM_G280(ENABLE_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W214);
   not MGM_G281(MGM_W215,d2_delay);
   and MGM_G282(MGM_W216,d3_delay,MGM_W215);
   not MGM_G283(MGM_W217,d4_delay);
   and MGM_G284(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W217,MGM_W216);
   not MGM_G285(MGM_W218,d2_delay);
   and MGM_G286(MGM_W219,d3_delay,MGM_W218);
   and MGM_G287(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W219);
   not MGM_G288(MGM_W220,d3_delay);
   and MGM_G289(MGM_W221,MGM_W220,d2_delay);
   not MGM_G290(MGM_W222,d4_delay);
   and MGM_G291(ENABLE_d2_AND_NOT_d3_AND_NOT_d4,MGM_W222,MGM_W221);
   not MGM_G292(MGM_W223,d3_delay);
   and MGM_G293(MGM_W224,MGM_W223,d2_delay);
   and MGM_G294(ENABLE_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W224);
   and MGM_G295(MGM_W225,d3_delay,d2_delay);
   not MGM_G296(MGM_W226,d4_delay);
   and MGM_G297(ENABLE_d2_AND_d3_AND_NOT_d4,MGM_W226,MGM_W225);
   and MGM_G298(MGM_W227,d3_delay,d2_delay);
   and MGM_G299(ENABLE_d2_AND_d3_AND_d4,d4_delay,MGM_W227);
   not MGM_G300(MGM_W228,d1_delay);
   not MGM_G301(MGM_W229,d3_delay);
   and MGM_G302(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G303(MGM_W231,d4_delay);
   and MGM_G304(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W231,MGM_W230);
   not MGM_G305(MGM_W232,d1_delay);
   not MGM_G306(MGM_W233,d3_delay);
   and MGM_G307(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G308(ENABLE_NOT_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W234);
   not MGM_G309(MGM_W235,d1_delay);
   and MGM_G310(MGM_W236,d3_delay,MGM_W235);
   not MGM_G311(MGM_W237,d4_delay);
   and MGM_G312(ENABLE_NOT_d1_AND_d3_AND_NOT_d4,MGM_W237,MGM_W236);
   not MGM_G313(MGM_W238,d1_delay);
   and MGM_G314(MGM_W239,d3_delay,MGM_W238);
   and MGM_G315(ENABLE_NOT_d1_AND_d3_AND_d4,d4_delay,MGM_W239);
   not MGM_G316(MGM_W240,d3_delay);
   and MGM_G317(MGM_W241,MGM_W240,d1_delay);
   not MGM_G318(MGM_W242,d4_delay);
   and MGM_G319(ENABLE_d1_AND_NOT_d3_AND_NOT_d4,MGM_W242,MGM_W241);
   not MGM_G320(MGM_W243,d3_delay);
   and MGM_G321(MGM_W244,MGM_W243,d1_delay);
   and MGM_G322(ENABLE_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W244);
   and MGM_G323(MGM_W245,d3_delay,d1_delay);
   not MGM_G324(MGM_W246,d4_delay);
   and MGM_G325(ENABLE_d1_AND_d3_AND_NOT_d4,MGM_W246,MGM_W245);
   and MGM_G326(MGM_W247,d3_delay,d1_delay);
   and MGM_G327(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W247);
   not MGM_G328(MGM_W248,d1_delay);
   not MGM_G329(MGM_W249,d2_delay);
   and MGM_G330(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G331(MGM_W251,d4_delay);
   and MGM_G332(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W251,MGM_W250);
   not MGM_G333(MGM_W252,d1_delay);
   not MGM_G334(MGM_W253,d2_delay);
   and MGM_G335(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G336(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W254);
   not MGM_G337(MGM_W255,d1_delay);
   and MGM_G338(MGM_W256,d2_delay,MGM_W255);
   not MGM_G339(MGM_W257,d4_delay);
   and MGM_G340(ENABLE_NOT_d1_AND_d2_AND_NOT_d4,MGM_W257,MGM_W256);
   not MGM_G341(MGM_W258,d1_delay);
   and MGM_G342(MGM_W259,d2_delay,MGM_W258);
   and MGM_G343(ENABLE_NOT_d1_AND_d2_AND_d4,d4_delay,MGM_W259);
   not MGM_G344(MGM_W260,d2_delay);
   and MGM_G345(MGM_W261,MGM_W260,d1_delay);
   not MGM_G346(MGM_W262,d4_delay);
   and MGM_G347(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W262,MGM_W261);
   not MGM_G348(MGM_W263,d2_delay);
   and MGM_G349(MGM_W264,MGM_W263,d1_delay);
   and MGM_G350(ENABLE_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W264);
   and MGM_G351(MGM_W265,d2_delay,d1_delay);
   not MGM_G352(MGM_W266,d4_delay);
   and MGM_G353(ENABLE_d1_AND_d2_AND_NOT_d4,MGM_W266,MGM_W265);
   and MGM_G354(MGM_W267,d2_delay,d1_delay);
   and MGM_G355(ENABLE_d1_AND_d2_AND_d4,d4_delay,MGM_W267);
   not MGM_G356(MGM_W268,d1_delay);
   not MGM_G357(MGM_W269,d2_delay);
   and MGM_G358(MGM_W270,MGM_W269,MGM_W268);
   not MGM_G359(MGM_W271,d3_delay);
   and MGM_G360(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W271,MGM_W270);
   not MGM_G361(MGM_W272,d1_delay);
   not MGM_G362(MGM_W273,d2_delay);
   and MGM_G363(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G364(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W274);
   not MGM_G365(MGM_W275,d1_delay);
   and MGM_G366(MGM_W276,d2_delay,MGM_W275);
   not MGM_G367(MGM_W277,d3_delay);
   and MGM_G368(ENABLE_NOT_d1_AND_d2_AND_NOT_d3,MGM_W277,MGM_W276);
   not MGM_G369(MGM_W278,d1_delay);
   and MGM_G370(MGM_W279,d2_delay,MGM_W278);
   and MGM_G371(ENABLE_NOT_d1_AND_d2_AND_d3,d3_delay,MGM_W279);
   not MGM_G372(MGM_W280,d2_delay);
   and MGM_G373(MGM_W281,MGM_W280,d1_delay);
   not MGM_G374(MGM_W282,d3_delay);
   and MGM_G375(ENABLE_d1_AND_NOT_d2_AND_NOT_d3,MGM_W282,MGM_W281);
   not MGM_G376(MGM_W283,d2_delay);
   and MGM_G377(MGM_W284,MGM_W283,d1_delay);
   and MGM_G378(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W284);
   and MGM_G379(MGM_W285,d2_delay,d1_delay);
   not MGM_G380(MGM_W286,d3_delay);
   and MGM_G381(ENABLE_d1_AND_d2_AND_NOT_d3,MGM_W286,MGM_W285);
   and MGM_G382(MGM_W287,d2_delay,d1_delay);
   and MGM_G383(ENABLE_d1_AND_d2_AND_d3,d3_delay,MGM_W287);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      
      // setuphold d1- clkb-HL
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      
      // setuphold d2- clkb-HL
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      
      // setuphold d3- clkb-HL
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      
      // setuphold d4- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun480ad1q01x2( clkb, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 4-bit non-scan DFF with clkb o1 = {(d1) on falling clkb} o2 = {(d2) on falling clkb} o3 = {(d3) on falling clkb} o4 = {(d4) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ1 <= d1 ;
// end
// always @ (negedge clkb)
// begin
// IQ2 <= d2 ;
// end
// always @ (negedge clkb)
// begin
// IQ3 <= d3 ;
// end
// always @ (negedge clkb)
// begin
// IQ4 <= d4 ;
// end
// 
// assign `fun480ad_delay o1 =  IQ1;
// assign `fun480ad_delay o2 =  IQ2;
// assign `fun480ad_delay o3 =  IQ3;
// assign `fun480ad_delay o4 =  IQ4;
// 

   input clkb, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun480ad_delay o1_random_init = o1_tmp ;
      assign `fun480ad_delay o2_random_init = o2_tmp ;
      assign `fun480ad_delay o3_random_init = o3_tmp ;
      assign `fun480ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fun480ad_delay o1_random_init = o1_tmp ;
      assign `fun480ad_delay o2_random_init = o2_tmp ;
      assign `fun480ad_delay o3_random_init = o3_tmp ;
      assign `fun480ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q01x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G192(MGM_W144,d1_delay);
   not MGM_G193(MGM_W145,d2_delay);
   and MGM_G194(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G195(MGM_W147,d3_delay);
   and MGM_G196(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G197(MGM_W149,d4_delay);
   and MGM_G198(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W149,MGM_W148);
   not MGM_G199(MGM_W150,d1_delay);
   not MGM_G200(MGM_W151,d2_delay);
   and MGM_G201(MGM_W152,MGM_W151,MGM_W150);
   not MGM_G202(MGM_W153,d3_delay);
   and MGM_G203(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G204(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W154);
   not MGM_G205(MGM_W155,d1_delay);
   not MGM_G206(MGM_W156,d2_delay);
   and MGM_G207(MGM_W157,MGM_W156,MGM_W155);
   and MGM_G208(MGM_W158,d3_delay,MGM_W157);
   not MGM_G209(MGM_W159,d4_delay);
   and MGM_G210(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W159,MGM_W158);
   not MGM_G211(MGM_W160,d1_delay);
   not MGM_G212(MGM_W161,d2_delay);
   and MGM_G213(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G214(MGM_W163,d3_delay,MGM_W162);
   and MGM_G215(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W163);
   not MGM_G216(MGM_W164,d1_delay);
   and MGM_G217(MGM_W165,d2_delay,MGM_W164);
   not MGM_G218(MGM_W166,d3_delay);
   and MGM_G219(MGM_W167,MGM_W166,MGM_W165);
   not MGM_G220(MGM_W168,d4_delay);
   and MGM_G221(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W168,MGM_W167);
   not MGM_G222(MGM_W169,d1_delay);
   and MGM_G223(MGM_W170,d2_delay,MGM_W169);
   not MGM_G224(MGM_W171,d3_delay);
   and MGM_G225(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G226(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W172);
   not MGM_G227(MGM_W173,d1_delay);
   and MGM_G228(MGM_W174,d2_delay,MGM_W173);
   and MGM_G229(MGM_W175,d3_delay,MGM_W174);
   not MGM_G230(MGM_W176,d4_delay);
   and MGM_G231(ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W176,MGM_W175);
   not MGM_G232(MGM_W177,d1_delay);
   and MGM_G233(MGM_W178,d2_delay,MGM_W177);
   and MGM_G234(MGM_W179,d3_delay,MGM_W178);
   and MGM_G235(ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W179);
   not MGM_G236(MGM_W180,d2_delay);
   and MGM_G237(MGM_W181,MGM_W180,d1_delay);
   not MGM_G238(MGM_W182,d3_delay);
   and MGM_G239(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G240(MGM_W184,d4_delay);
   and MGM_G241(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W184,MGM_W183);
   not MGM_G242(MGM_W185,d2_delay);
   and MGM_G243(MGM_W186,MGM_W185,d1_delay);
   not MGM_G244(MGM_W187,d3_delay);
   and MGM_G245(MGM_W188,MGM_W187,MGM_W186);
   and MGM_G246(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W188);
   not MGM_G247(MGM_W189,d2_delay);
   and MGM_G248(MGM_W190,MGM_W189,d1_delay);
   and MGM_G249(MGM_W191,d3_delay,MGM_W190);
   not MGM_G250(MGM_W192,d4_delay);
   and MGM_G251(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W192,MGM_W191);
   not MGM_G252(MGM_W193,d2_delay);
   and MGM_G253(MGM_W194,MGM_W193,d1_delay);
   and MGM_G254(MGM_W195,d3_delay,MGM_W194);
   and MGM_G255(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W195);
   and MGM_G256(MGM_W196,d2_delay,d1_delay);
   not MGM_G257(MGM_W197,d3_delay);
   and MGM_G258(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G259(MGM_W199,d4_delay);
   and MGM_G260(ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W199,MGM_W198);
   and MGM_G261(MGM_W200,d2_delay,d1_delay);
   not MGM_G262(MGM_W201,d3_delay);
   and MGM_G263(MGM_W202,MGM_W201,MGM_W200);
   and MGM_G264(ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W202);
   and MGM_G265(MGM_W203,d2_delay,d1_delay);
   and MGM_G266(MGM_W204,d3_delay,MGM_W203);
   not MGM_G267(MGM_W205,d4_delay);
   and MGM_G268(ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W205,MGM_W204);
   and MGM_G269(MGM_W206,d2_delay,d1_delay);
   and MGM_G270(MGM_W207,d3_delay,MGM_W206);
   and MGM_G271(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W207);
   not MGM_G272(MGM_W208,d2_delay);
   not MGM_G273(MGM_W209,d3_delay);
   and MGM_G274(MGM_W210,MGM_W209,MGM_W208);
   not MGM_G275(MGM_W211,d4_delay);
   and MGM_G276(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W211,MGM_W210);
   not MGM_G277(MGM_W212,d2_delay);
   not MGM_G278(MGM_W213,d3_delay);
   and MGM_G279(MGM_W214,MGM_W213,MGM_W212);
   and MGM_G280(ENABLE_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W214);
   not MGM_G281(MGM_W215,d2_delay);
   and MGM_G282(MGM_W216,d3_delay,MGM_W215);
   not MGM_G283(MGM_W217,d4_delay);
   and MGM_G284(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W217,MGM_W216);
   not MGM_G285(MGM_W218,d2_delay);
   and MGM_G286(MGM_W219,d3_delay,MGM_W218);
   and MGM_G287(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W219);
   not MGM_G288(MGM_W220,d3_delay);
   and MGM_G289(MGM_W221,MGM_W220,d2_delay);
   not MGM_G290(MGM_W222,d4_delay);
   and MGM_G291(ENABLE_d2_AND_NOT_d3_AND_NOT_d4,MGM_W222,MGM_W221);
   not MGM_G292(MGM_W223,d3_delay);
   and MGM_G293(MGM_W224,MGM_W223,d2_delay);
   and MGM_G294(ENABLE_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W224);
   and MGM_G295(MGM_W225,d3_delay,d2_delay);
   not MGM_G296(MGM_W226,d4_delay);
   and MGM_G297(ENABLE_d2_AND_d3_AND_NOT_d4,MGM_W226,MGM_W225);
   and MGM_G298(MGM_W227,d3_delay,d2_delay);
   and MGM_G299(ENABLE_d2_AND_d3_AND_d4,d4_delay,MGM_W227);
   not MGM_G300(MGM_W228,d1_delay);
   not MGM_G301(MGM_W229,d3_delay);
   and MGM_G302(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G303(MGM_W231,d4_delay);
   and MGM_G304(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W231,MGM_W230);
   not MGM_G305(MGM_W232,d1_delay);
   not MGM_G306(MGM_W233,d3_delay);
   and MGM_G307(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G308(ENABLE_NOT_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W234);
   not MGM_G309(MGM_W235,d1_delay);
   and MGM_G310(MGM_W236,d3_delay,MGM_W235);
   not MGM_G311(MGM_W237,d4_delay);
   and MGM_G312(ENABLE_NOT_d1_AND_d3_AND_NOT_d4,MGM_W237,MGM_W236);
   not MGM_G313(MGM_W238,d1_delay);
   and MGM_G314(MGM_W239,d3_delay,MGM_W238);
   and MGM_G315(ENABLE_NOT_d1_AND_d3_AND_d4,d4_delay,MGM_W239);
   not MGM_G316(MGM_W240,d3_delay);
   and MGM_G317(MGM_W241,MGM_W240,d1_delay);
   not MGM_G318(MGM_W242,d4_delay);
   and MGM_G319(ENABLE_d1_AND_NOT_d3_AND_NOT_d4,MGM_W242,MGM_W241);
   not MGM_G320(MGM_W243,d3_delay);
   and MGM_G321(MGM_W244,MGM_W243,d1_delay);
   and MGM_G322(ENABLE_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W244);
   and MGM_G323(MGM_W245,d3_delay,d1_delay);
   not MGM_G324(MGM_W246,d4_delay);
   and MGM_G325(ENABLE_d1_AND_d3_AND_NOT_d4,MGM_W246,MGM_W245);
   and MGM_G326(MGM_W247,d3_delay,d1_delay);
   and MGM_G327(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W247);
   not MGM_G328(MGM_W248,d1_delay);
   not MGM_G329(MGM_W249,d2_delay);
   and MGM_G330(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G331(MGM_W251,d4_delay);
   and MGM_G332(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W251,MGM_W250);
   not MGM_G333(MGM_W252,d1_delay);
   not MGM_G334(MGM_W253,d2_delay);
   and MGM_G335(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G336(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W254);
   not MGM_G337(MGM_W255,d1_delay);
   and MGM_G338(MGM_W256,d2_delay,MGM_W255);
   not MGM_G339(MGM_W257,d4_delay);
   and MGM_G340(ENABLE_NOT_d1_AND_d2_AND_NOT_d4,MGM_W257,MGM_W256);
   not MGM_G341(MGM_W258,d1_delay);
   and MGM_G342(MGM_W259,d2_delay,MGM_W258);
   and MGM_G343(ENABLE_NOT_d1_AND_d2_AND_d4,d4_delay,MGM_W259);
   not MGM_G344(MGM_W260,d2_delay);
   and MGM_G345(MGM_W261,MGM_W260,d1_delay);
   not MGM_G346(MGM_W262,d4_delay);
   and MGM_G347(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W262,MGM_W261);
   not MGM_G348(MGM_W263,d2_delay);
   and MGM_G349(MGM_W264,MGM_W263,d1_delay);
   and MGM_G350(ENABLE_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W264);
   and MGM_G351(MGM_W265,d2_delay,d1_delay);
   not MGM_G352(MGM_W266,d4_delay);
   and MGM_G353(ENABLE_d1_AND_d2_AND_NOT_d4,MGM_W266,MGM_W265);
   and MGM_G354(MGM_W267,d2_delay,d1_delay);
   and MGM_G355(ENABLE_d1_AND_d2_AND_d4,d4_delay,MGM_W267);
   not MGM_G356(MGM_W268,d1_delay);
   not MGM_G357(MGM_W269,d2_delay);
   and MGM_G358(MGM_W270,MGM_W269,MGM_W268);
   not MGM_G359(MGM_W271,d3_delay);
   and MGM_G360(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W271,MGM_W270);
   not MGM_G361(MGM_W272,d1_delay);
   not MGM_G362(MGM_W273,d2_delay);
   and MGM_G363(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G364(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W274);
   not MGM_G365(MGM_W275,d1_delay);
   and MGM_G366(MGM_W276,d2_delay,MGM_W275);
   not MGM_G367(MGM_W277,d3_delay);
   and MGM_G368(ENABLE_NOT_d1_AND_d2_AND_NOT_d3,MGM_W277,MGM_W276);
   not MGM_G369(MGM_W278,d1_delay);
   and MGM_G370(MGM_W279,d2_delay,MGM_W278);
   and MGM_G371(ENABLE_NOT_d1_AND_d2_AND_d3,d3_delay,MGM_W279);
   not MGM_G372(MGM_W280,d2_delay);
   and MGM_G373(MGM_W281,MGM_W280,d1_delay);
   not MGM_G374(MGM_W282,d3_delay);
   and MGM_G375(ENABLE_d1_AND_NOT_d2_AND_NOT_d3,MGM_W282,MGM_W281);
   not MGM_G376(MGM_W283,d2_delay);
   and MGM_G377(MGM_W284,MGM_W283,d1_delay);
   and MGM_G378(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W284);
   and MGM_G379(MGM_W285,d2_delay,d1_delay);
   not MGM_G380(MGM_W286,d3_delay);
   and MGM_G381(ENABLE_d1_AND_d2_AND_NOT_d3,MGM_W286,MGM_W285);
   and MGM_G382(MGM_W287,d2_delay,d1_delay);
   and MGM_G383(ENABLE_d1_AND_d2_AND_d3,d3_delay,MGM_W287);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      
      // setuphold d1- clkb-HL
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      
      // setuphold d2- clkb-HL
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      
      // setuphold d3- clkb-HL
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      
      // setuphold d4- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfun480ad1q02x2( clkb, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap 4-bit non-scan DFF with clkb o1 = {(d1) on falling clkb} o2 = {(d2) on falling clkb} o3 = {(d3) on falling clkb} o4 = {(d4) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ1 <= d1 ;
// end
// always @ (negedge clkb)
// begin
// IQ2 <= d2 ;
// end
// always @ (negedge clkb)
// begin
// IQ3 <= d3 ;
// end
// always @ (negedge clkb)
// begin
// IQ4 <= d4 ;
// end
// 
// assign `fun480ad_delay o1 =  IQ1;
// assign `fun480ad_delay o2 =  IQ2;
// assign `fun480ad_delay o3 =  IQ3;
// assign `fun480ad_delay o4 =  IQ4;
// 

   input clkb, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q02x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fun480ad_delay o1_random_init = o1_tmp ;
      assign `fun480ad_delay o2_random_init = o2_tmp ;
      assign `fun480ad_delay o3_random_init = o3_tmp ;
      assign `fun480ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q02x2_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fun480ad_delay o1_random_init = o1_tmp ;
      assign `fun480ad_delay o2_random_init = o2_tmp ;
      assign `fun480ad_delay o3_random_init = o3_tmp ;
      assign `fun480ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q02x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fun480ad_func i0sfun480ad1q02x2_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G192(MGM_W144,d1_delay);
   not MGM_G193(MGM_W145,d2_delay);
   and MGM_G194(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G195(MGM_W147,d3_delay);
   and MGM_G196(MGM_W148,MGM_W147,MGM_W146);
   not MGM_G197(MGM_W149,d4_delay);
   and MGM_G198(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W149,MGM_W148);
   not MGM_G199(MGM_W150,d1_delay);
   not MGM_G200(MGM_W151,d2_delay);
   and MGM_G201(MGM_W152,MGM_W151,MGM_W150);
   not MGM_G202(MGM_W153,d3_delay);
   and MGM_G203(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G204(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W154);
   not MGM_G205(MGM_W155,d1_delay);
   not MGM_G206(MGM_W156,d2_delay);
   and MGM_G207(MGM_W157,MGM_W156,MGM_W155);
   and MGM_G208(MGM_W158,d3_delay,MGM_W157);
   not MGM_G209(MGM_W159,d4_delay);
   and MGM_G210(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W159,MGM_W158);
   not MGM_G211(MGM_W160,d1_delay);
   not MGM_G212(MGM_W161,d2_delay);
   and MGM_G213(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G214(MGM_W163,d3_delay,MGM_W162);
   and MGM_G215(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W163);
   not MGM_G216(MGM_W164,d1_delay);
   and MGM_G217(MGM_W165,d2_delay,MGM_W164);
   not MGM_G218(MGM_W166,d3_delay);
   and MGM_G219(MGM_W167,MGM_W166,MGM_W165);
   not MGM_G220(MGM_W168,d4_delay);
   and MGM_G221(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W168,MGM_W167);
   not MGM_G222(MGM_W169,d1_delay);
   and MGM_G223(MGM_W170,d2_delay,MGM_W169);
   not MGM_G224(MGM_W171,d3_delay);
   and MGM_G225(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G226(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W172);
   not MGM_G227(MGM_W173,d1_delay);
   and MGM_G228(MGM_W174,d2_delay,MGM_W173);
   and MGM_G229(MGM_W175,d3_delay,MGM_W174);
   not MGM_G230(MGM_W176,d4_delay);
   and MGM_G231(ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W176,MGM_W175);
   not MGM_G232(MGM_W177,d1_delay);
   and MGM_G233(MGM_W178,d2_delay,MGM_W177);
   and MGM_G234(MGM_W179,d3_delay,MGM_W178);
   and MGM_G235(ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W179);
   not MGM_G236(MGM_W180,d2_delay);
   and MGM_G237(MGM_W181,MGM_W180,d1_delay);
   not MGM_G238(MGM_W182,d3_delay);
   and MGM_G239(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G240(MGM_W184,d4_delay);
   and MGM_G241(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W184,MGM_W183);
   not MGM_G242(MGM_W185,d2_delay);
   and MGM_G243(MGM_W186,MGM_W185,d1_delay);
   not MGM_G244(MGM_W187,d3_delay);
   and MGM_G245(MGM_W188,MGM_W187,MGM_W186);
   and MGM_G246(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W188);
   not MGM_G247(MGM_W189,d2_delay);
   and MGM_G248(MGM_W190,MGM_W189,d1_delay);
   and MGM_G249(MGM_W191,d3_delay,MGM_W190);
   not MGM_G250(MGM_W192,d4_delay);
   and MGM_G251(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W192,MGM_W191);
   not MGM_G252(MGM_W193,d2_delay);
   and MGM_G253(MGM_W194,MGM_W193,d1_delay);
   and MGM_G254(MGM_W195,d3_delay,MGM_W194);
   and MGM_G255(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W195);
   and MGM_G256(MGM_W196,d2_delay,d1_delay);
   not MGM_G257(MGM_W197,d3_delay);
   and MGM_G258(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G259(MGM_W199,d4_delay);
   and MGM_G260(ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W199,MGM_W198);
   and MGM_G261(MGM_W200,d2_delay,d1_delay);
   not MGM_G262(MGM_W201,d3_delay);
   and MGM_G263(MGM_W202,MGM_W201,MGM_W200);
   and MGM_G264(ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W202);
   and MGM_G265(MGM_W203,d2_delay,d1_delay);
   and MGM_G266(MGM_W204,d3_delay,MGM_W203);
   not MGM_G267(MGM_W205,d4_delay);
   and MGM_G268(ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4,MGM_W205,MGM_W204);
   and MGM_G269(MGM_W206,d2_delay,d1_delay);
   and MGM_G270(MGM_W207,d3_delay,MGM_W206);
   and MGM_G271(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W207);
   not MGM_G272(MGM_W208,d2_delay);
   not MGM_G273(MGM_W209,d3_delay);
   and MGM_G274(MGM_W210,MGM_W209,MGM_W208);
   not MGM_G275(MGM_W211,d4_delay);
   and MGM_G276(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W211,MGM_W210);
   not MGM_G277(MGM_W212,d2_delay);
   not MGM_G278(MGM_W213,d3_delay);
   and MGM_G279(MGM_W214,MGM_W213,MGM_W212);
   and MGM_G280(ENABLE_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W214);
   not MGM_G281(MGM_W215,d2_delay);
   and MGM_G282(MGM_W216,d3_delay,MGM_W215);
   not MGM_G283(MGM_W217,d4_delay);
   and MGM_G284(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W217,MGM_W216);
   not MGM_G285(MGM_W218,d2_delay);
   and MGM_G286(MGM_W219,d3_delay,MGM_W218);
   and MGM_G287(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W219);
   not MGM_G288(MGM_W220,d3_delay);
   and MGM_G289(MGM_W221,MGM_W220,d2_delay);
   not MGM_G290(MGM_W222,d4_delay);
   and MGM_G291(ENABLE_d2_AND_NOT_d3_AND_NOT_d4,MGM_W222,MGM_W221);
   not MGM_G292(MGM_W223,d3_delay);
   and MGM_G293(MGM_W224,MGM_W223,d2_delay);
   and MGM_G294(ENABLE_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W224);
   and MGM_G295(MGM_W225,d3_delay,d2_delay);
   not MGM_G296(MGM_W226,d4_delay);
   and MGM_G297(ENABLE_d2_AND_d3_AND_NOT_d4,MGM_W226,MGM_W225);
   and MGM_G298(MGM_W227,d3_delay,d2_delay);
   and MGM_G299(ENABLE_d2_AND_d3_AND_d4,d4_delay,MGM_W227);
   not MGM_G300(MGM_W228,d1_delay);
   not MGM_G301(MGM_W229,d3_delay);
   and MGM_G302(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G303(MGM_W231,d4_delay);
   and MGM_G304(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W231,MGM_W230);
   not MGM_G305(MGM_W232,d1_delay);
   not MGM_G306(MGM_W233,d3_delay);
   and MGM_G307(MGM_W234,MGM_W233,MGM_W232);
   and MGM_G308(ENABLE_NOT_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W234);
   not MGM_G309(MGM_W235,d1_delay);
   and MGM_G310(MGM_W236,d3_delay,MGM_W235);
   not MGM_G311(MGM_W237,d4_delay);
   and MGM_G312(ENABLE_NOT_d1_AND_d3_AND_NOT_d4,MGM_W237,MGM_W236);
   not MGM_G313(MGM_W238,d1_delay);
   and MGM_G314(MGM_W239,d3_delay,MGM_W238);
   and MGM_G315(ENABLE_NOT_d1_AND_d3_AND_d4,d4_delay,MGM_W239);
   not MGM_G316(MGM_W240,d3_delay);
   and MGM_G317(MGM_W241,MGM_W240,d1_delay);
   not MGM_G318(MGM_W242,d4_delay);
   and MGM_G319(ENABLE_d1_AND_NOT_d3_AND_NOT_d4,MGM_W242,MGM_W241);
   not MGM_G320(MGM_W243,d3_delay);
   and MGM_G321(MGM_W244,MGM_W243,d1_delay);
   and MGM_G322(ENABLE_d1_AND_NOT_d3_AND_d4,d4_delay,MGM_W244);
   and MGM_G323(MGM_W245,d3_delay,d1_delay);
   not MGM_G324(MGM_W246,d4_delay);
   and MGM_G325(ENABLE_d1_AND_d3_AND_NOT_d4,MGM_W246,MGM_W245);
   and MGM_G326(MGM_W247,d3_delay,d1_delay);
   and MGM_G327(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W247);
   not MGM_G328(MGM_W248,d1_delay);
   not MGM_G329(MGM_W249,d2_delay);
   and MGM_G330(MGM_W250,MGM_W249,MGM_W248);
   not MGM_G331(MGM_W251,d4_delay);
   and MGM_G332(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W251,MGM_W250);
   not MGM_G333(MGM_W252,d1_delay);
   not MGM_G334(MGM_W253,d2_delay);
   and MGM_G335(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G336(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W254);
   not MGM_G337(MGM_W255,d1_delay);
   and MGM_G338(MGM_W256,d2_delay,MGM_W255);
   not MGM_G339(MGM_W257,d4_delay);
   and MGM_G340(ENABLE_NOT_d1_AND_d2_AND_NOT_d4,MGM_W257,MGM_W256);
   not MGM_G341(MGM_W258,d1_delay);
   and MGM_G342(MGM_W259,d2_delay,MGM_W258);
   and MGM_G343(ENABLE_NOT_d1_AND_d2_AND_d4,d4_delay,MGM_W259);
   not MGM_G344(MGM_W260,d2_delay);
   and MGM_G345(MGM_W261,MGM_W260,d1_delay);
   not MGM_G346(MGM_W262,d4_delay);
   and MGM_G347(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W262,MGM_W261);
   not MGM_G348(MGM_W263,d2_delay);
   and MGM_G349(MGM_W264,MGM_W263,d1_delay);
   and MGM_G350(ENABLE_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W264);
   and MGM_G351(MGM_W265,d2_delay,d1_delay);
   not MGM_G352(MGM_W266,d4_delay);
   and MGM_G353(ENABLE_d1_AND_d2_AND_NOT_d4,MGM_W266,MGM_W265);
   and MGM_G354(MGM_W267,d2_delay,d1_delay);
   and MGM_G355(ENABLE_d1_AND_d2_AND_d4,d4_delay,MGM_W267);
   not MGM_G356(MGM_W268,d1_delay);
   not MGM_G357(MGM_W269,d2_delay);
   and MGM_G358(MGM_W270,MGM_W269,MGM_W268);
   not MGM_G359(MGM_W271,d3_delay);
   and MGM_G360(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W271,MGM_W270);
   not MGM_G361(MGM_W272,d1_delay);
   not MGM_G362(MGM_W273,d2_delay);
   and MGM_G363(MGM_W274,MGM_W273,MGM_W272);
   and MGM_G364(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W274);
   not MGM_G365(MGM_W275,d1_delay);
   and MGM_G366(MGM_W276,d2_delay,MGM_W275);
   not MGM_G367(MGM_W277,d3_delay);
   and MGM_G368(ENABLE_NOT_d1_AND_d2_AND_NOT_d3,MGM_W277,MGM_W276);
   not MGM_G369(MGM_W278,d1_delay);
   and MGM_G370(MGM_W279,d2_delay,MGM_W278);
   and MGM_G371(ENABLE_NOT_d1_AND_d2_AND_d3,d3_delay,MGM_W279);
   not MGM_G372(MGM_W280,d2_delay);
   and MGM_G373(MGM_W281,MGM_W280,d1_delay);
   not MGM_G374(MGM_W282,d3_delay);
   and MGM_G375(ENABLE_d1_AND_NOT_d2_AND_NOT_d3,MGM_W282,MGM_W281);
   not MGM_G376(MGM_W283,d2_delay);
   and MGM_G377(MGM_W284,MGM_W283,d1_delay);
   and MGM_G378(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W284);
   and MGM_G379(MGM_W285,d2_delay,d1_delay);
   not MGM_G380(MGM_W286,d3_delay);
   and MGM_G381(ENABLE_d1_AND_d2_AND_NOT_d3,MGM_W286,MGM_W285);
   and MGM_G382(MGM_W287,d2_delay,d1_delay);
   and MGM_G383(ENABLE_d1_AND_d2_AND_d3,d3_delay,MGM_W287);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-HL
      
      // setuphold d1- clkb-HL
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_NOT_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-HL
      
      // setuphold d2- clkb-HL
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-HL
      
      // setuphold d3- clkb-HL
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-HL
      
      // setuphold d4- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuy000ad1d01x1( clk, d, o, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF o = {(si*!ssb+d*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuy000ad_delay o =  IQ;
// 

   input clk, d, si, ssb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuy000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.ssb(ssb),.notifier(1'b0));
      assign `fuy000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuy000ad1d01x2( clk, d, o, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF o = {(si*!ssb+d*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuy000ad_delay o =  IQ;
// 

   input clk, d, si, ssb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuy000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.ssb(ssb),.notifier(1'b0));
      assign `fuy000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuy000ad1d02x2( clk, d, o, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF o = {(si*!ssb+d*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuy000ad_delay o =  IQ;
// 

   input clk, d, si, ssb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuy000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.ssb(ssb),.notifier(1'b0));
      assign `fuy000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuy000ad_func i0sfuy000ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz000ad1d01x1( clk, d, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout o = {(si*!ssb+d*ssb) on rising clk} so = {(si*!ssb+d*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuz000ad_delay o =  IQ;
// assign `fuz000ad_delay so =  IQ;
// 

   input clk, d, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz000ad_delay o_random_init = o_tmp ;
      assign `fuz000ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz000ad_delay o_random_init = o_tmp ;
      assign `fuz000ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz000ad1d01x2( clk, d, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout o = {(si*!ssb+d*ssb) on rising clk} so = {(si*!ssb+d*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuz000ad_delay o =  IQ;
// assign `fuz000ad_delay so =  IQ;
// 

   input clk, d, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz000ad_delay o_random_init = o_tmp ;
      assign `fuz000ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz000ad_delay o_random_init = o_tmp ;
      assign `fuz000ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz000ad1d02x2( clk, d, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout o = {(si*!ssb+d*ssb) on rising clk} so = {(si*!ssb+d*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuz000ad_delay o =  IQ;
// assign `fuz000ad_delay so =  IQ;
// 

   input clk, d, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz000ad_delay o_random_init = o_tmp ;
      assign `fuz000ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz000ad_delay o_random_init = o_tmp ;
      assign `fuz000ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz000ad_func i0sfuz000ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz010ad1d01x1( clk, d, ob, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and data/scan-in inversion ob = {(!d*ssb+!si*!ssb) on rising clk} so = {(!d*ssb+!si*!ssb) on rising clk}
// 
// 
// wire si_temp, ssb_temp;
// 
// `ifdef REMOVE_SCAN
// assign si_temp = 1'b0;
// assign ssb_temp = 1'b1;
// `else
// assign si_temp = si;
// assign ssb_temp = ssb;
// `endif
// always @ (posedge clk)
// begin
// IQN <= ssb_temp ? d : si_temp ;
// end
// 
// assign `fuz010ad_delay ob =  !IQN;
// assign `fuz010ad_delay so =  !IQN;
// 

   input clk, d, si, ssb;
   output ob, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire ob_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(ob_random_init or so_random_init)
         if((ob_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign ob = ((random_init_ctrl_gls === 1'b1) && (ob_random_init === 1'bx)) ? init_val : ob_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign ob = ob_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x1_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz010ad_delay ob_random_init = ob_tmp ;
      assign `fuz010ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x1_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz010ad_delay ob_random_init = ob_tmp ;
      assign `fuz010ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz010ad1d01x2( clk, d, ob, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and data/scan-in inversion ob = {(!d*ssb+!si*!ssb) on rising clk} so = {(!d*ssb+!si*!ssb) on rising clk}
// 
// 
// wire si_temp, ssb_temp;
// 
// `ifdef REMOVE_SCAN
// assign si_temp = 1'b0;
// assign ssb_temp = 1'b1;
// `else
// assign si_temp = si;
// assign ssb_temp = ssb;
// `endif
// always @ (posedge clk)
// begin
// IQN <= ssb_temp ? d : si_temp ;
// end
// 
// assign `fuz010ad_delay ob =  !IQN;
// assign `fuz010ad_delay so =  !IQN;
// 

   input clk, d, si, ssb;
   output ob, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire ob_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(ob_random_init or so_random_init)
         if((ob_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign ob = ((random_init_ctrl_gls === 1'b1) && (ob_random_init === 1'bx)) ? init_val : ob_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign ob = ob_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz010ad_delay ob_random_init = ob_tmp ;
      assign `fuz010ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz010ad_delay ob_random_init = ob_tmp ;
      assign `fuz010ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz010ad1d02x2( clk, d, ob, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and data/scan-in inversion ob = {(!d*ssb+!si*!ssb) on rising clk} so = {(!d*ssb+!si*!ssb) on rising clk}
// 
// 
// wire si_temp, ssb_temp;
// 
// `ifdef REMOVE_SCAN
// assign si_temp = 1'b0;
// assign ssb_temp = 1'b1;
// `else
// assign si_temp = si;
// assign ssb_temp = ssb;
// `endif
// always @ (posedge clk)
// begin
// IQN <= ssb_temp ? d : si_temp ;
// end
// 
// assign `fuz010ad_delay ob =  !IQN;
// assign `fuz010ad_delay so =  !IQN;
// 

   input clk, d, si, ssb;
   output ob, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire ob_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(ob_random_init or so_random_init)
         if((ob_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign ob = ((random_init_ctrl_gls === 1'b1) && (ob_random_init === 1'bx)) ? init_val : ob_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign ob = ob_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d02x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz010ad_delay ob_random_init = ob_tmp ;
      assign `fuz010ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d02x2_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz010ad_delay ob_random_init = ob_tmp ;
      assign `fuz010ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz010ad_func i0sfuz010ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz040ad1d01x1( clk, d, den, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and Re-circulating data-enable o {((!ssb*si)+(ssb*den*d)+(ssb*!den*o)) on rising clk} so {((!ssb*si)+(ssb*den*d)+(ssb*!den*o)) on rising clk}
// 
// 
// wire si_temp, ssb_temp;
// 
// `ifdef REMOVE_SCAN
// assign si_temp = 1'b0;
// assign ssb_temp = 1'b1;
// `else
// assign si_temp = si;
// assign ssb_temp = ssb;
// `endif
// 
// assign int1 =  den ? d : IQ;
// assign int2 =  ssb_temp ? int1 : si_temp;
// 
// always @ (posedge clk)
// begin
// IQ <= int2 ;
// end
// 
// assign  o =  IQ;
// assign  so =  o;
// 

   input clk, d, den, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire o_random_init;
wire so_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(o_random_init or so_random_init)
   if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
`else
   assign o = o_random_init;
   assign so = so_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz040ad_delay o_random_init = o_tmp ;
      assign `fuz040ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz040ad_delay o_random_init = o_tmp ;
      assign `fuz040ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d_delay);
   not MGM_G1(MGM_W1,den_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,si_delay);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,ssb_delay);
   and MGM_G6(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,d_delay);
   not MGM_G8(MGM_W7,den_delay);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(MGM_W9,si_delay,MGM_W8);
   not MGM_G11(MGM_W10,ssb_delay);
   and MGM_G12(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W10,MGM_W9);
   not MGM_G13(MGM_W11,d_delay);
   and MGM_G14(MGM_W12,den_delay,MGM_W11);
   not MGM_G15(MGM_W13,si_delay);
   and MGM_G16(MGM_W14,MGM_W13,MGM_W12);
   not MGM_G17(MGM_W15,ssb_delay);
   and MGM_G18(ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,d_delay);
   and MGM_G20(MGM_W17,den_delay,MGM_W16);
   not MGM_G21(MGM_W18,si_delay);
   and MGM_G22(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G23(ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G24(MGM_W20,d_delay);
   and MGM_G25(MGM_W21,den_delay,MGM_W20);
   and MGM_G26(MGM_W22,si_delay,MGM_W21);
   not MGM_G27(MGM_W23,ssb_delay);
   and MGM_G28(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W23,MGM_W22);
   not MGM_G29(MGM_W24,d_delay);
   and MGM_G30(MGM_W25,den_delay,MGM_W24);
   and MGM_G31(MGM_W26,si_delay,MGM_W25);
   and MGM_G32(ENABLE_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W26);
   not MGM_G33(MGM_W27,den_delay);
   and MGM_G34(MGM_W28,MGM_W27,d_delay);
   not MGM_G35(MGM_W29,si_delay);
   and MGM_G36(MGM_W30,MGM_W29,MGM_W28);
   not MGM_G37(MGM_W31,ssb_delay);
   and MGM_G38(ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W31,MGM_W30);
   not MGM_G39(MGM_W32,den_delay);
   and MGM_G40(MGM_W33,MGM_W32,d_delay);
   and MGM_G41(MGM_W34,si_delay,MGM_W33);
   not MGM_G42(MGM_W35,ssb_delay);
   and MGM_G43(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   and MGM_G44(MGM_W36,den_delay,d_delay);
   not MGM_G45(MGM_W37,si_delay);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,ssb_delay);
   and MGM_G48(ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,den_delay,d_delay);
   not MGM_G50(MGM_W41,si_delay);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G53(MGM_W43,den_delay,d_delay);
   and MGM_G54(MGM_W44,si_delay,MGM_W43);
   not MGM_G55(MGM_W45,ssb_delay);
   and MGM_G56(ENABLE_d_AND_den_AND_si_AND_NOT_ssb,MGM_W45,MGM_W44);
   and MGM_G57(MGM_W46,den_delay,d_delay);
   and MGM_G58(MGM_W47,si_delay,MGM_W46);
   and MGM_G59(ENABLE_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W47);
   not MGM_G60(MGM_W48,si_delay);
   and MGM_G61(MGM_W49,MGM_W48,den_delay);
   and MGM_G62(ENABLE_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W49);
   and MGM_G63(MGM_W50,si_delay,den_delay);
   and MGM_G64(ENABLE_den_AND_si_AND_ssb,ssb_delay,MGM_W50);
   not MGM_G65(MGM_W51,d_delay);
   not MGM_G66(MGM_W52,si_delay);
   and MGM_G67(MGM_W53,MGM_W52,MGM_W51);
   and MGM_G68(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W53);
   not MGM_G69(MGM_W54,d_delay);
   and MGM_G70(MGM_W55,si_delay,MGM_W54);
   and MGM_G71(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W55);
   not MGM_G72(MGM_W56,si_delay);
   and MGM_G73(MGM_W57,MGM_W56,d_delay);
   and MGM_G74(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W57);
   and MGM_G75(MGM_W58,si_delay,d_delay);
   and MGM_G76(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W58);
   not MGM_G77(MGM_W59,d_delay);
   not MGM_G78(MGM_W60,den_delay);
   and MGM_G79(MGM_W61,MGM_W60,MGM_W59);
   not MGM_G80(MGM_W62,ssb_delay);
   and MGM_G81(ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb,MGM_W62,MGM_W61);
   not MGM_G82(MGM_W63,d_delay);
   and MGM_G83(MGM_W64,den_delay,MGM_W63);
   not MGM_G84(MGM_W65,ssb_delay);
   and MGM_G85(ENABLE_NOT_d_AND_den_AND_NOT_ssb,MGM_W65,MGM_W64);
   not MGM_G86(MGM_W66,den_delay);
   and MGM_G87(MGM_W67,MGM_W66,d_delay);
   not MGM_G88(MGM_W68,ssb_delay);
   and MGM_G89(ENABLE_d_AND_NOT_den_AND_NOT_ssb,MGM_W68,MGM_W67);
   and MGM_G90(MGM_W69,den_delay,d_delay);
   not MGM_G91(MGM_W70,ssb_delay);
   and MGM_G92(ENABLE_d_AND_den_AND_NOT_ssb,MGM_W70,MGM_W69);
   not MGM_G93(MGM_W71,d_delay);
   not MGM_G94(MGM_W72,den_delay);
   and MGM_G95(MGM_W73,MGM_W72,MGM_W71);
   not MGM_G96(MGM_W74,si_delay);
   and MGM_G97(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si,MGM_W74,MGM_W73);
   not MGM_G98(MGM_W75,d_delay);
   not MGM_G99(MGM_W76,den_delay);
   and MGM_G100(MGM_W77,MGM_W76,MGM_W75);
   and MGM_G101(ENABLE_NOT_d_AND_NOT_den_AND_si,si_delay,MGM_W77);
   not MGM_G102(MGM_W78,d_delay);
   and MGM_G103(MGM_W79,den_delay,MGM_W78);
   and MGM_G104(ENABLE_NOT_d_AND_den_AND_si,si_delay,MGM_W79);
   not MGM_G105(MGM_W80,den_delay);
   and MGM_G106(MGM_W81,MGM_W80,d_delay);
   not MGM_G107(MGM_W82,si_delay);
   and MGM_G108(ENABLE_d_AND_NOT_den_AND_NOT_si,MGM_W82,MGM_W81);
   not MGM_G109(MGM_W83,den_delay);
   and MGM_G110(MGM_W84,MGM_W83,d_delay);
   and MGM_G111(ENABLE_d_AND_NOT_den_AND_si,si_delay,MGM_W84);
   and MGM_G112(MGM_W85,den_delay,d_delay);
   not MGM_G113(MGM_W86,si_delay);
   and MGM_G114(ENABLE_d_AND_den_AND_NOT_si,MGM_W86,MGM_W85);
   // spec_gates_end
  specify
   if(d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH

   // setuphold d- clk-LH

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH

   // setuphold den- clk-LH

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH

   // setuphold si- clk-LH

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfuz040ad1d01x2( clk, d, den, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and Re-circulating data-enable o {((!ssb*si)+(ssb*den*d)+(ssb*!den*o)) on rising clk} so {((!ssb*si)+(ssb*den*d)+(ssb*!den*o)) on rising clk}
// 
// 
// wire si_temp, ssb_temp;
// 
// `ifdef REMOVE_SCAN
// assign si_temp = 1'b0;
// assign ssb_temp = 1'b1;
// `else
// assign si_temp = si;
// assign ssb_temp = ssb;
// `endif
// 
// assign int1 =  den ? d : IQ;
// assign int2 =  ssb_temp ? int1 : si_temp;
// 
// always @ (posedge clk)
// begin
// IQ <= int2 ;
// end
// 
// assign  o =  IQ;
// assign  so =  o;
// 

   input clk, d, den, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire o_random_init;
wire so_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(o_random_init or so_random_init)
   if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
`else
   assign o = o_random_init;
   assign so = so_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz040ad_delay o_random_init = o_tmp ;
      assign `fuz040ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz040ad_delay o_random_init = o_tmp ;
      assign `fuz040ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d_delay);
   not MGM_G1(MGM_W1,den_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,si_delay);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,ssb_delay);
   and MGM_G6(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,d_delay);
   not MGM_G8(MGM_W7,den_delay);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(MGM_W9,si_delay,MGM_W8);
   not MGM_G11(MGM_W10,ssb_delay);
   and MGM_G12(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W10,MGM_W9);
   not MGM_G13(MGM_W11,d_delay);
   and MGM_G14(MGM_W12,den_delay,MGM_W11);
   not MGM_G15(MGM_W13,si_delay);
   and MGM_G16(MGM_W14,MGM_W13,MGM_W12);
   not MGM_G17(MGM_W15,ssb_delay);
   and MGM_G18(ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,d_delay);
   and MGM_G20(MGM_W17,den_delay,MGM_W16);
   not MGM_G21(MGM_W18,si_delay);
   and MGM_G22(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G23(ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G24(MGM_W20,d_delay);
   and MGM_G25(MGM_W21,den_delay,MGM_W20);
   and MGM_G26(MGM_W22,si_delay,MGM_W21);
   not MGM_G27(MGM_W23,ssb_delay);
   and MGM_G28(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W23,MGM_W22);
   not MGM_G29(MGM_W24,d_delay);
   and MGM_G30(MGM_W25,den_delay,MGM_W24);
   and MGM_G31(MGM_W26,si_delay,MGM_W25);
   and MGM_G32(ENABLE_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W26);
   not MGM_G33(MGM_W27,den_delay);
   and MGM_G34(MGM_W28,MGM_W27,d_delay);
   not MGM_G35(MGM_W29,si_delay);
   and MGM_G36(MGM_W30,MGM_W29,MGM_W28);
   not MGM_G37(MGM_W31,ssb_delay);
   and MGM_G38(ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W31,MGM_W30);
   not MGM_G39(MGM_W32,den_delay);
   and MGM_G40(MGM_W33,MGM_W32,d_delay);
   and MGM_G41(MGM_W34,si_delay,MGM_W33);
   not MGM_G42(MGM_W35,ssb_delay);
   and MGM_G43(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   and MGM_G44(MGM_W36,den_delay,d_delay);
   not MGM_G45(MGM_W37,si_delay);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,ssb_delay);
   and MGM_G48(ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,den_delay,d_delay);
   not MGM_G50(MGM_W41,si_delay);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G53(MGM_W43,den_delay,d_delay);
   and MGM_G54(MGM_W44,si_delay,MGM_W43);
   not MGM_G55(MGM_W45,ssb_delay);
   and MGM_G56(ENABLE_d_AND_den_AND_si_AND_NOT_ssb,MGM_W45,MGM_W44);
   and MGM_G57(MGM_W46,den_delay,d_delay);
   and MGM_G58(MGM_W47,si_delay,MGM_W46);
   and MGM_G59(ENABLE_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W47);
   not MGM_G60(MGM_W48,si_delay);
   and MGM_G61(MGM_W49,MGM_W48,den_delay);
   and MGM_G62(ENABLE_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W49);
   and MGM_G63(MGM_W50,si_delay,den_delay);
   and MGM_G64(ENABLE_den_AND_si_AND_ssb,ssb_delay,MGM_W50);
   not MGM_G65(MGM_W51,d_delay);
   not MGM_G66(MGM_W52,si_delay);
   and MGM_G67(MGM_W53,MGM_W52,MGM_W51);
   and MGM_G68(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W53);
   not MGM_G69(MGM_W54,d_delay);
   and MGM_G70(MGM_W55,si_delay,MGM_W54);
   and MGM_G71(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W55);
   not MGM_G72(MGM_W56,si_delay);
   and MGM_G73(MGM_W57,MGM_W56,d_delay);
   and MGM_G74(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W57);
   and MGM_G75(MGM_W58,si_delay,d_delay);
   and MGM_G76(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W58);
   not MGM_G77(MGM_W59,d_delay);
   not MGM_G78(MGM_W60,den_delay);
   and MGM_G79(MGM_W61,MGM_W60,MGM_W59);
   not MGM_G80(MGM_W62,ssb_delay);
   and MGM_G81(ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb,MGM_W62,MGM_W61);
   not MGM_G82(MGM_W63,d_delay);
   and MGM_G83(MGM_W64,den_delay,MGM_W63);
   not MGM_G84(MGM_W65,ssb_delay);
   and MGM_G85(ENABLE_NOT_d_AND_den_AND_NOT_ssb,MGM_W65,MGM_W64);
   not MGM_G86(MGM_W66,den_delay);
   and MGM_G87(MGM_W67,MGM_W66,d_delay);
   not MGM_G88(MGM_W68,ssb_delay);
   and MGM_G89(ENABLE_d_AND_NOT_den_AND_NOT_ssb,MGM_W68,MGM_W67);
   and MGM_G90(MGM_W69,den_delay,d_delay);
   not MGM_G91(MGM_W70,ssb_delay);
   and MGM_G92(ENABLE_d_AND_den_AND_NOT_ssb,MGM_W70,MGM_W69);
   not MGM_G93(MGM_W71,d_delay);
   not MGM_G94(MGM_W72,den_delay);
   and MGM_G95(MGM_W73,MGM_W72,MGM_W71);
   not MGM_G96(MGM_W74,si_delay);
   and MGM_G97(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si,MGM_W74,MGM_W73);
   not MGM_G98(MGM_W75,d_delay);
   not MGM_G99(MGM_W76,den_delay);
   and MGM_G100(MGM_W77,MGM_W76,MGM_W75);
   and MGM_G101(ENABLE_NOT_d_AND_NOT_den_AND_si,si_delay,MGM_W77);
   not MGM_G102(MGM_W78,d_delay);
   and MGM_G103(MGM_W79,den_delay,MGM_W78);
   and MGM_G104(ENABLE_NOT_d_AND_den_AND_si,si_delay,MGM_W79);
   not MGM_G105(MGM_W80,den_delay);
   and MGM_G106(MGM_W81,MGM_W80,d_delay);
   not MGM_G107(MGM_W82,si_delay);
   and MGM_G108(ENABLE_d_AND_NOT_den_AND_NOT_si,MGM_W82,MGM_W81);
   not MGM_G109(MGM_W83,den_delay);
   and MGM_G110(MGM_W84,MGM_W83,d_delay);
   and MGM_G111(ENABLE_d_AND_NOT_den_AND_si,si_delay,MGM_W84);
   and MGM_G112(MGM_W85,den_delay,d_delay);
   not MGM_G113(MGM_W86,si_delay);
   and MGM_G114(ENABLE_d_AND_den_AND_NOT_si,MGM_W86,MGM_W85);
   // spec_gates_end
  specify
   if(d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH

   // setuphold d- clk-LH

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH

   // setuphold den- clk-LH

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH

   // setuphold si- clk-LH

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfuz040ad1d02x2( clk, d, den, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and Re-circulating data-enable o {((!ssb*si)+(ssb*den*d)+(ssb*!den*o)) on rising clk} so {((!ssb*si)+(ssb*den*d)+(ssb*!den*o)) on rising clk}
// 
// 
// wire si_temp, ssb_temp;
// 
// `ifdef REMOVE_SCAN
// assign si_temp = 1'b0;
// assign ssb_temp = 1'b1;
// `else
// assign si_temp = si;
// assign ssb_temp = ssb;
// `endif
// 
// assign int1 =  den ? d : IQ;
// assign int2 =  ssb_temp ? int1 : si_temp;
// 
// always @ (posedge clk)
// begin
// IQ <= int2 ;
// end
// 
// assign  o =  IQ;
// assign  so =  o;
// 

   input clk, d, den, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire o_random_init;
wire so_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(o_random_init or so_random_init)
   if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
`else
   assign o = o_random_init;
   assign so = so_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz040ad_delay o_random_init = o_tmp ;
      assign `fuz040ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz040ad_delay o_random_init = o_tmp ;
      assign `fuz040ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz040ad_func i0sfuz040ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d_delay);
   not MGM_G1(MGM_W1,den_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,si_delay);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,ssb_delay);
   and MGM_G6(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W5,MGM_W4);
   not MGM_G7(MGM_W6,d_delay);
   not MGM_G8(MGM_W7,den_delay);
   and MGM_G9(MGM_W8,MGM_W7,MGM_W6);
   and MGM_G10(MGM_W9,si_delay,MGM_W8);
   not MGM_G11(MGM_W10,ssb_delay);
   and MGM_G12(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W10,MGM_W9);
   not MGM_G13(MGM_W11,d_delay);
   and MGM_G14(MGM_W12,den_delay,MGM_W11);
   not MGM_G15(MGM_W13,si_delay);
   and MGM_G16(MGM_W14,MGM_W13,MGM_W12);
   not MGM_G17(MGM_W15,ssb_delay);
   and MGM_G18(ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W15,MGM_W14);
   not MGM_G19(MGM_W16,d_delay);
   and MGM_G20(MGM_W17,den_delay,MGM_W16);
   not MGM_G21(MGM_W18,si_delay);
   and MGM_G22(MGM_W19,MGM_W18,MGM_W17);
   and MGM_G23(ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G24(MGM_W20,d_delay);
   and MGM_G25(MGM_W21,den_delay,MGM_W20);
   and MGM_G26(MGM_W22,si_delay,MGM_W21);
   not MGM_G27(MGM_W23,ssb_delay);
   and MGM_G28(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W23,MGM_W22);
   not MGM_G29(MGM_W24,d_delay);
   and MGM_G30(MGM_W25,den_delay,MGM_W24);
   and MGM_G31(MGM_W26,si_delay,MGM_W25);
   and MGM_G32(ENABLE_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W26);
   not MGM_G33(MGM_W27,den_delay);
   and MGM_G34(MGM_W28,MGM_W27,d_delay);
   not MGM_G35(MGM_W29,si_delay);
   and MGM_G36(MGM_W30,MGM_W29,MGM_W28);
   not MGM_G37(MGM_W31,ssb_delay);
   and MGM_G38(ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W31,MGM_W30);
   not MGM_G39(MGM_W32,den_delay);
   and MGM_G40(MGM_W33,MGM_W32,d_delay);
   and MGM_G41(MGM_W34,si_delay,MGM_W33);
   not MGM_G42(MGM_W35,ssb_delay);
   and MGM_G43(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   and MGM_G44(MGM_W36,den_delay,d_delay);
   not MGM_G45(MGM_W37,si_delay);
   and MGM_G46(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G47(MGM_W39,ssb_delay);
   and MGM_G48(ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W39,MGM_W38);
   and MGM_G49(MGM_W40,den_delay,d_delay);
   not MGM_G50(MGM_W41,si_delay);
   and MGM_G51(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G52(ENABLE_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G53(MGM_W43,den_delay,d_delay);
   and MGM_G54(MGM_W44,si_delay,MGM_W43);
   not MGM_G55(MGM_W45,ssb_delay);
   and MGM_G56(ENABLE_d_AND_den_AND_si_AND_NOT_ssb,MGM_W45,MGM_W44);
   and MGM_G57(MGM_W46,den_delay,d_delay);
   and MGM_G58(MGM_W47,si_delay,MGM_W46);
   and MGM_G59(ENABLE_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W47);
   not MGM_G60(MGM_W48,si_delay);
   and MGM_G61(MGM_W49,MGM_W48,den_delay);
   and MGM_G62(ENABLE_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W49);
   and MGM_G63(MGM_W50,si_delay,den_delay);
   and MGM_G64(ENABLE_den_AND_si_AND_ssb,ssb_delay,MGM_W50);
   not MGM_G65(MGM_W51,d_delay);
   not MGM_G66(MGM_W52,si_delay);
   and MGM_G67(MGM_W53,MGM_W52,MGM_W51);
   and MGM_G68(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W53);
   not MGM_G69(MGM_W54,d_delay);
   and MGM_G70(MGM_W55,si_delay,MGM_W54);
   and MGM_G71(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W55);
   not MGM_G72(MGM_W56,si_delay);
   and MGM_G73(MGM_W57,MGM_W56,d_delay);
   and MGM_G74(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W57);
   and MGM_G75(MGM_W58,si_delay,d_delay);
   and MGM_G76(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W58);
   not MGM_G77(MGM_W59,d_delay);
   not MGM_G78(MGM_W60,den_delay);
   and MGM_G79(MGM_W61,MGM_W60,MGM_W59);
   not MGM_G80(MGM_W62,ssb_delay);
   and MGM_G81(ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb,MGM_W62,MGM_W61);
   not MGM_G82(MGM_W63,d_delay);
   and MGM_G83(MGM_W64,den_delay,MGM_W63);
   not MGM_G84(MGM_W65,ssb_delay);
   and MGM_G85(ENABLE_NOT_d_AND_den_AND_NOT_ssb,MGM_W65,MGM_W64);
   not MGM_G86(MGM_W66,den_delay);
   and MGM_G87(MGM_W67,MGM_W66,d_delay);
   not MGM_G88(MGM_W68,ssb_delay);
   and MGM_G89(ENABLE_d_AND_NOT_den_AND_NOT_ssb,MGM_W68,MGM_W67);
   and MGM_G90(MGM_W69,den_delay,d_delay);
   not MGM_G91(MGM_W70,ssb_delay);
   and MGM_G92(ENABLE_d_AND_den_AND_NOT_ssb,MGM_W70,MGM_W69);
   not MGM_G93(MGM_W71,d_delay);
   not MGM_G94(MGM_W72,den_delay);
   and MGM_G95(MGM_W73,MGM_W72,MGM_W71);
   not MGM_G96(MGM_W74,si_delay);
   and MGM_G97(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si,MGM_W74,MGM_W73);
   not MGM_G98(MGM_W75,d_delay);
   not MGM_G99(MGM_W76,den_delay);
   and MGM_G100(MGM_W77,MGM_W76,MGM_W75);
   and MGM_G101(ENABLE_NOT_d_AND_NOT_den_AND_si,si_delay,MGM_W77);
   not MGM_G102(MGM_W78,d_delay);
   and MGM_G103(MGM_W79,den_delay,MGM_W78);
   and MGM_G104(ENABLE_NOT_d_AND_den_AND_si,si_delay,MGM_W79);
   not MGM_G105(MGM_W80,den_delay);
   and MGM_G106(MGM_W81,MGM_W80,d_delay);
   not MGM_G107(MGM_W82,si_delay);
   and MGM_G108(ENABLE_d_AND_NOT_den_AND_NOT_si,MGM_W82,MGM_W81);
   not MGM_G109(MGM_W83,den_delay);
   and MGM_G110(MGM_W84,MGM_W83,d_delay);
   and MGM_G111(ENABLE_d_AND_NOT_den_AND_si,si_delay,MGM_W84);
   and MGM_G112(MGM_W85,den_delay,d_delay);
   not MGM_G113(MGM_W86,si_delay);
   and MGM_G114(ENABLE_d_AND_den_AND_NOT_si,MGM_W86,MGM_W85);
   // spec_gates_end
  specify
   if(d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH

   // setuphold d- clk-LH

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH

   // setuphold den- clk-LH

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_NOT_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_den_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH

   // setuphold si- clk-LH

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_den_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfuz080ad1d01x1( clkb, d, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and clkb o = {(si*!ssb+d*ssb) on falling clkb} so = {(si*!ssb+d*ssb) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuz080ad_delay o =  IQ;
// assign `fuz080ad_delay so =  IQ;
// 

   input clkb, d, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz080ad_delay o_random_init = o_tmp ;
      assign `fuz080ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz080ad_delay o_random_init = o_tmp ;
      assign `fuz080ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      
      // setuphold si- clkb-HL
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      
      // setuphold ssb- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz080ad1d01x2( clkb, d, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and clkb o = {(si*!ssb+d*ssb) on falling clkb} so = {(si*!ssb+d*ssb) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuz080ad_delay o =  IQ;
// assign `fuz080ad_delay so =  IQ;
// 

   input clkb, d, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz080ad_delay o_random_init = o_tmp ;
      assign `fuz080ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz080ad_delay o_random_init = o_tmp ;
      assign `fuz080ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      
      // setuphold si- clkb-HL
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      
      // setuphold ssb- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz080ad1d02x2( clkb, d, o, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and clkb o = {(si*!ssb+d*ssb) on falling clkb} so = {(si*!ssb+d*ssb) on falling clkb}
// 
// 
// always @ (negedge clkb)
// begin
// IQ <= ssb ? d : si ;
// end
// 
// assign `fuz080ad_delay o =  IQ;
// assign `fuz080ad_delay so =  IQ;
// 

   input clkb, d, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz080ad_delay o_random_init = o_tmp ;
      assign `fuz080ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuz080ad_delay o_random_init = o_tmp ;
      assign `fuz080ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz080ad_func i0sfuz080ad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G40(MGM_W26,d_delay);
   not MGM_G41(MGM_W27,si_delay);
   and MGM_G42(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G43(MGM_W29,ssb_delay);
   and MGM_G44(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W29,MGM_W28);
   not MGM_G45(MGM_W30,d_delay);
   not MGM_G46(MGM_W31,si_delay);
   and MGM_G47(MGM_W32,MGM_W31,MGM_W30);
   and MGM_G48(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G49(MGM_W33,d_delay);
   and MGM_G50(MGM_W34,si_delay,MGM_W33);
   not MGM_G51(MGM_W35,ssb_delay);
   and MGM_G52(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W35,MGM_W34);
   not MGM_G53(MGM_W36,d_delay);
   and MGM_G54(MGM_W37,si_delay,MGM_W36);
   and MGM_G55(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W37);
   not MGM_G56(MGM_W38,si_delay);
   and MGM_G57(MGM_W39,MGM_W38,d_delay);
   not MGM_G58(MGM_W40,ssb_delay);
   and MGM_G59(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W40,MGM_W39);
   not MGM_G60(MGM_W41,si_delay);
   and MGM_G61(MGM_W42,MGM_W41,d_delay);
   and MGM_G62(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W42);
   and MGM_G63(MGM_W43,si_delay,d_delay);
   not MGM_G64(MGM_W44,ssb_delay);
   and MGM_G65(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W44,MGM_W43);
   and MGM_G66(MGM_W45,si_delay,d_delay);
   and MGM_G67(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W45);
   not MGM_G68(MGM_W46,si_delay);
   and MGM_G69(ENABLE_NOT_si_AND_ssb,ssb_delay,MGM_W46);
   and MGM_G70(ENABLE_si_AND_ssb,ssb_delay,si_delay);
   not MGM_G71(MGM_W47,d_delay);
   not MGM_G72(MGM_W48,ssb_delay);
   and MGM_G73(ENABLE_NOT_d_AND_NOT_ssb,MGM_W48,MGM_W47);
   not MGM_G74(MGM_W49,ssb_delay);
   and MGM_G75(ENABLE_d_AND_NOT_ssb,MGM_W49,d_delay);
   not MGM_G76(MGM_W50,d_delay);
   and MGM_G77(ENABLE_NOT_d_AND_si,si_delay,MGM_W50);
   not MGM_G78(MGM_W51,si_delay);
   and MGM_G79(ENABLE_d_AND_NOT_si,MGM_W51,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      
      // setuphold si- clkb-HL
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      
      // setuphold ssb- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz200ad1d01x1( clk, d1, d2, o1, o2, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 2bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} so = {(o1*!ssb+d2*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// 
// assign `fuz200ad_delay o1 =  IQ1;
// assign `fuz200ad_delay o2 =  IQ2;
// assign `fuz200ad_delay so =  o2;
// 

   input clk, d1, d2, si, ssb;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz200ad_delay so_random_init = so_tmp ;
      assign `fuz200ad_delay o1_random_init = o1_tmp ;
      assign `fuz200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fuz200ad_delay so_random_init = so_tmp ;
      assign `fuz200ad_delay o1_random_init = o1_tmp ;
      assign `fuz200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G110(MGM_W84,d1_delay);
   not MGM_G111(MGM_W85,d2_delay);
   and MGM_G112(MGM_W86,MGM_W85,MGM_W84);
   not MGM_G113(MGM_W87,si_delay);
   and MGM_G114(MGM_W88,MGM_W87,MGM_W86);
   not MGM_G115(MGM_W89,ssb_delay);
   and MGM_G116(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W89,MGM_W88);
   not MGM_G117(MGM_W90,d1_delay);
   not MGM_G118(MGM_W91,d2_delay);
   and MGM_G119(MGM_W92,MGM_W91,MGM_W90);
   not MGM_G120(MGM_W93,si_delay);
   and MGM_G121(MGM_W94,MGM_W93,MGM_W92);
   and MGM_G122(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W94);
   not MGM_G123(MGM_W95,d1_delay);
   not MGM_G124(MGM_W96,d2_delay);
   and MGM_G125(MGM_W97,MGM_W96,MGM_W95);
   and MGM_G126(MGM_W98,si_delay,MGM_W97);
   not MGM_G127(MGM_W99,ssb_delay);
   and MGM_G128(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W99,MGM_W98);
   not MGM_G129(MGM_W100,d1_delay);
   not MGM_G130(MGM_W101,d2_delay);
   and MGM_G131(MGM_W102,MGM_W101,MGM_W100);
   and MGM_G132(MGM_W103,si_delay,MGM_W102);
   and MGM_G133(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W103);
   not MGM_G134(MGM_W104,d1_delay);
   and MGM_G135(MGM_W105,d2_delay,MGM_W104);
   not MGM_G136(MGM_W106,si_delay);
   and MGM_G137(MGM_W107,MGM_W106,MGM_W105);
   not MGM_G138(MGM_W108,ssb_delay);
   and MGM_G139(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W108,MGM_W107);
   not MGM_G140(MGM_W109,d1_delay);
   and MGM_G141(MGM_W110,d2_delay,MGM_W109);
   not MGM_G142(MGM_W111,si_delay);
   and MGM_G143(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G144(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G145(MGM_W113,d1_delay);
   and MGM_G146(MGM_W114,d2_delay,MGM_W113);
   and MGM_G147(MGM_W115,si_delay,MGM_W114);
   not MGM_G148(MGM_W116,ssb_delay);
   and MGM_G149(ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G150(MGM_W117,d1_delay);
   and MGM_G151(MGM_W118,d2_delay,MGM_W117);
   and MGM_G152(MGM_W119,si_delay,MGM_W118);
   and MGM_G153(ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W119);
   not MGM_G154(MGM_W120,d2_delay);
   and MGM_G155(MGM_W121,MGM_W120,d1_delay);
   not MGM_G156(MGM_W122,si_delay);
   and MGM_G157(MGM_W123,MGM_W122,MGM_W121);
   not MGM_G158(MGM_W124,ssb_delay);
   and MGM_G159(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G160(MGM_W125,d2_delay);
   and MGM_G161(MGM_W126,MGM_W125,d1_delay);
   not MGM_G162(MGM_W127,si_delay);
   and MGM_G163(MGM_W128,MGM_W127,MGM_W126);
   and MGM_G164(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W128);
   not MGM_G165(MGM_W129,d2_delay);
   and MGM_G166(MGM_W130,MGM_W129,d1_delay);
   and MGM_G167(MGM_W131,si_delay,MGM_W130);
   not MGM_G168(MGM_W132,ssb_delay);
   and MGM_G169(ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W132,MGM_W131);
   not MGM_G170(MGM_W133,d2_delay);
   and MGM_G171(MGM_W134,MGM_W133,d1_delay);
   and MGM_G172(MGM_W135,si_delay,MGM_W134);
   and MGM_G173(ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W135);
   and MGM_G174(MGM_W136,d2_delay,d1_delay);
   not MGM_G175(MGM_W137,si_delay);
   and MGM_G176(MGM_W138,MGM_W137,MGM_W136);
   not MGM_G177(MGM_W139,ssb_delay);
   and MGM_G178(ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G179(MGM_W140,d2_delay,d1_delay);
   not MGM_G180(MGM_W141,si_delay);
   and MGM_G181(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G182(ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W142);
   and MGM_G183(MGM_W143,d2_delay,d1_delay);
   and MGM_G184(MGM_W144,si_delay,MGM_W143);
   not MGM_G185(MGM_W145,ssb_delay);
   and MGM_G186(ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   and MGM_G187(MGM_W146,d2_delay,d1_delay);
   and MGM_G188(MGM_W147,si_delay,MGM_W146);
   and MGM_G189(ENABLE_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G190(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G191(MGM_W148,d1_delay);
   not MGM_G192(MGM_W149,d2_delay);
   and MGM_G193(MGM_W150,MGM_W149,MGM_W148);
   not MGM_G194(MGM_W151,si_delay);
   and MGM_G195(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si,MGM_W151,MGM_W150);
   not MGM_G196(MGM_W152,d1_delay);
   not MGM_G197(MGM_W153,d2_delay);
   and MGM_G198(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G199(ENABLE_NOT_d1_AND_NOT_d2_AND_si,si_delay,MGM_W154);
   not MGM_G200(MGM_W155,d1_delay);
   and MGM_G201(MGM_W156,d2_delay,MGM_W155);
   not MGM_G202(MGM_W157,si_delay);
   and MGM_G203(ENABLE_NOT_d1_AND_d2_AND_NOT_si,MGM_W157,MGM_W156);
   not MGM_G204(MGM_W158,d1_delay);
   and MGM_G205(MGM_W159,d2_delay,MGM_W158);
   and MGM_G206(ENABLE_NOT_d1_AND_d2_AND_si,si_delay,MGM_W159);
   not MGM_G207(MGM_W160,d2_delay);
   and MGM_G208(MGM_W161,MGM_W160,d1_delay);
   not MGM_G209(MGM_W162,si_delay);
   and MGM_G210(ENABLE_d1_AND_NOT_d2_AND_NOT_si,MGM_W162,MGM_W161);
   not MGM_G211(MGM_W163,d2_delay);
   and MGM_G212(MGM_W164,MGM_W163,d1_delay);
   and MGM_G213(ENABLE_d1_AND_NOT_d2_AND_si,si_delay,MGM_W164);
   and MGM_G214(MGM_W165,d2_delay,d1_delay);
   not MGM_G215(MGM_W166,si_delay);
   and MGM_G216(ENABLE_d1_AND_d2_AND_NOT_si,MGM_W166,MGM_W165);
   and MGM_G217(MGM_W167,d2_delay,d1_delay);
   and MGM_G218(ENABLE_d1_AND_d2_AND_si,si_delay,MGM_W167);
   buf MGM_G219(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz200ad1d01x2( clk, d1, d2, o1, o2, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 2bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} so = {(o1*!ssb+d2*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// 
// assign `fuz200ad_delay o1 =  IQ1;
// assign `fuz200ad_delay o2 =  IQ2;
// assign `fuz200ad_delay so =  o2;
// 

   input clk, d1, d2, si, ssb;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz200ad_delay so_random_init = so_tmp ;
      assign `fuz200ad_delay o1_random_init = o1_tmp ;
      assign `fuz200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fuz200ad_delay so_random_init = so_tmp ;
      assign `fuz200ad_delay o1_random_init = o1_tmp ;
      assign `fuz200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G110(MGM_W84,d1_delay);
   not MGM_G111(MGM_W85,d2_delay);
   and MGM_G112(MGM_W86,MGM_W85,MGM_W84);
   not MGM_G113(MGM_W87,si_delay);
   and MGM_G114(MGM_W88,MGM_W87,MGM_W86);
   not MGM_G115(MGM_W89,ssb_delay);
   and MGM_G116(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W89,MGM_W88);
   not MGM_G117(MGM_W90,d1_delay);
   not MGM_G118(MGM_W91,d2_delay);
   and MGM_G119(MGM_W92,MGM_W91,MGM_W90);
   not MGM_G120(MGM_W93,si_delay);
   and MGM_G121(MGM_W94,MGM_W93,MGM_W92);
   and MGM_G122(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W94);
   not MGM_G123(MGM_W95,d1_delay);
   not MGM_G124(MGM_W96,d2_delay);
   and MGM_G125(MGM_W97,MGM_W96,MGM_W95);
   and MGM_G126(MGM_W98,si_delay,MGM_W97);
   not MGM_G127(MGM_W99,ssb_delay);
   and MGM_G128(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W99,MGM_W98);
   not MGM_G129(MGM_W100,d1_delay);
   not MGM_G130(MGM_W101,d2_delay);
   and MGM_G131(MGM_W102,MGM_W101,MGM_W100);
   and MGM_G132(MGM_W103,si_delay,MGM_W102);
   and MGM_G133(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W103);
   not MGM_G134(MGM_W104,d1_delay);
   and MGM_G135(MGM_W105,d2_delay,MGM_W104);
   not MGM_G136(MGM_W106,si_delay);
   and MGM_G137(MGM_W107,MGM_W106,MGM_W105);
   not MGM_G138(MGM_W108,ssb_delay);
   and MGM_G139(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W108,MGM_W107);
   not MGM_G140(MGM_W109,d1_delay);
   and MGM_G141(MGM_W110,d2_delay,MGM_W109);
   not MGM_G142(MGM_W111,si_delay);
   and MGM_G143(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G144(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G145(MGM_W113,d1_delay);
   and MGM_G146(MGM_W114,d2_delay,MGM_W113);
   and MGM_G147(MGM_W115,si_delay,MGM_W114);
   not MGM_G148(MGM_W116,ssb_delay);
   and MGM_G149(ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G150(MGM_W117,d1_delay);
   and MGM_G151(MGM_W118,d2_delay,MGM_W117);
   and MGM_G152(MGM_W119,si_delay,MGM_W118);
   and MGM_G153(ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W119);
   not MGM_G154(MGM_W120,d2_delay);
   and MGM_G155(MGM_W121,MGM_W120,d1_delay);
   not MGM_G156(MGM_W122,si_delay);
   and MGM_G157(MGM_W123,MGM_W122,MGM_W121);
   not MGM_G158(MGM_W124,ssb_delay);
   and MGM_G159(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G160(MGM_W125,d2_delay);
   and MGM_G161(MGM_W126,MGM_W125,d1_delay);
   not MGM_G162(MGM_W127,si_delay);
   and MGM_G163(MGM_W128,MGM_W127,MGM_W126);
   and MGM_G164(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W128);
   not MGM_G165(MGM_W129,d2_delay);
   and MGM_G166(MGM_W130,MGM_W129,d1_delay);
   and MGM_G167(MGM_W131,si_delay,MGM_W130);
   not MGM_G168(MGM_W132,ssb_delay);
   and MGM_G169(ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W132,MGM_W131);
   not MGM_G170(MGM_W133,d2_delay);
   and MGM_G171(MGM_W134,MGM_W133,d1_delay);
   and MGM_G172(MGM_W135,si_delay,MGM_W134);
   and MGM_G173(ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W135);
   and MGM_G174(MGM_W136,d2_delay,d1_delay);
   not MGM_G175(MGM_W137,si_delay);
   and MGM_G176(MGM_W138,MGM_W137,MGM_W136);
   not MGM_G177(MGM_W139,ssb_delay);
   and MGM_G178(ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G179(MGM_W140,d2_delay,d1_delay);
   not MGM_G180(MGM_W141,si_delay);
   and MGM_G181(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G182(ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W142);
   and MGM_G183(MGM_W143,d2_delay,d1_delay);
   and MGM_G184(MGM_W144,si_delay,MGM_W143);
   not MGM_G185(MGM_W145,ssb_delay);
   and MGM_G186(ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   and MGM_G187(MGM_W146,d2_delay,d1_delay);
   and MGM_G188(MGM_W147,si_delay,MGM_W146);
   and MGM_G189(ENABLE_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G190(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G191(MGM_W148,d1_delay);
   not MGM_G192(MGM_W149,d2_delay);
   and MGM_G193(MGM_W150,MGM_W149,MGM_W148);
   not MGM_G194(MGM_W151,si_delay);
   and MGM_G195(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si,MGM_W151,MGM_W150);
   not MGM_G196(MGM_W152,d1_delay);
   not MGM_G197(MGM_W153,d2_delay);
   and MGM_G198(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G199(ENABLE_NOT_d1_AND_NOT_d2_AND_si,si_delay,MGM_W154);
   not MGM_G200(MGM_W155,d1_delay);
   and MGM_G201(MGM_W156,d2_delay,MGM_W155);
   not MGM_G202(MGM_W157,si_delay);
   and MGM_G203(ENABLE_NOT_d1_AND_d2_AND_NOT_si,MGM_W157,MGM_W156);
   not MGM_G204(MGM_W158,d1_delay);
   and MGM_G205(MGM_W159,d2_delay,MGM_W158);
   and MGM_G206(ENABLE_NOT_d1_AND_d2_AND_si,si_delay,MGM_W159);
   not MGM_G207(MGM_W160,d2_delay);
   and MGM_G208(MGM_W161,MGM_W160,d1_delay);
   not MGM_G209(MGM_W162,si_delay);
   and MGM_G210(ENABLE_d1_AND_NOT_d2_AND_NOT_si,MGM_W162,MGM_W161);
   not MGM_G211(MGM_W163,d2_delay);
   and MGM_G212(MGM_W164,MGM_W163,d1_delay);
   and MGM_G213(ENABLE_d1_AND_NOT_d2_AND_si,si_delay,MGM_W164);
   and MGM_G214(MGM_W165,d2_delay,d1_delay);
   not MGM_G215(MGM_W166,si_delay);
   and MGM_G216(ENABLE_d1_AND_d2_AND_NOT_si,MGM_W166,MGM_W165);
   and MGM_G217(MGM_W167,d2_delay,d1_delay);
   and MGM_G218(ENABLE_d1_AND_d2_AND_si,si_delay,MGM_W167);
   buf MGM_G219(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz200ad1d02x2( clk, d1, d2, o1, o2, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 2bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} so = {(o1*!ssb+d2*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// 
// assign `fuz200ad_delay o1 =  IQ1;
// assign `fuz200ad_delay o2 =  IQ2;
// assign `fuz200ad_delay so =  o2;
// 

   input clk, d1, d2, si, ssb;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz200ad_delay so_random_init = so_tmp ;
      assign `fuz200ad_delay o1_random_init = o1_tmp ;
      assign `fuz200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fuz200ad_delay so_random_init = so_tmp ;
      assign `fuz200ad_delay o1_random_init = o1_tmp ;
      assign `fuz200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz200ad_func i0sfuz200ad1d02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G110(MGM_W84,d1_delay);
   not MGM_G111(MGM_W85,d2_delay);
   and MGM_G112(MGM_W86,MGM_W85,MGM_W84);
   not MGM_G113(MGM_W87,si_delay);
   and MGM_G114(MGM_W88,MGM_W87,MGM_W86);
   not MGM_G115(MGM_W89,ssb_delay);
   and MGM_G116(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W89,MGM_W88);
   not MGM_G117(MGM_W90,d1_delay);
   not MGM_G118(MGM_W91,d2_delay);
   and MGM_G119(MGM_W92,MGM_W91,MGM_W90);
   not MGM_G120(MGM_W93,si_delay);
   and MGM_G121(MGM_W94,MGM_W93,MGM_W92);
   and MGM_G122(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W94);
   not MGM_G123(MGM_W95,d1_delay);
   not MGM_G124(MGM_W96,d2_delay);
   and MGM_G125(MGM_W97,MGM_W96,MGM_W95);
   and MGM_G126(MGM_W98,si_delay,MGM_W97);
   not MGM_G127(MGM_W99,ssb_delay);
   and MGM_G128(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W99,MGM_W98);
   not MGM_G129(MGM_W100,d1_delay);
   not MGM_G130(MGM_W101,d2_delay);
   and MGM_G131(MGM_W102,MGM_W101,MGM_W100);
   and MGM_G132(MGM_W103,si_delay,MGM_W102);
   and MGM_G133(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W103);
   not MGM_G134(MGM_W104,d1_delay);
   and MGM_G135(MGM_W105,d2_delay,MGM_W104);
   not MGM_G136(MGM_W106,si_delay);
   and MGM_G137(MGM_W107,MGM_W106,MGM_W105);
   not MGM_G138(MGM_W108,ssb_delay);
   and MGM_G139(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W108,MGM_W107);
   not MGM_G140(MGM_W109,d1_delay);
   and MGM_G141(MGM_W110,d2_delay,MGM_W109);
   not MGM_G142(MGM_W111,si_delay);
   and MGM_G143(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G144(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G145(MGM_W113,d1_delay);
   and MGM_G146(MGM_W114,d2_delay,MGM_W113);
   and MGM_G147(MGM_W115,si_delay,MGM_W114);
   not MGM_G148(MGM_W116,ssb_delay);
   and MGM_G149(ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G150(MGM_W117,d1_delay);
   and MGM_G151(MGM_W118,d2_delay,MGM_W117);
   and MGM_G152(MGM_W119,si_delay,MGM_W118);
   and MGM_G153(ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W119);
   not MGM_G154(MGM_W120,d2_delay);
   and MGM_G155(MGM_W121,MGM_W120,d1_delay);
   not MGM_G156(MGM_W122,si_delay);
   and MGM_G157(MGM_W123,MGM_W122,MGM_W121);
   not MGM_G158(MGM_W124,ssb_delay);
   and MGM_G159(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G160(MGM_W125,d2_delay);
   and MGM_G161(MGM_W126,MGM_W125,d1_delay);
   not MGM_G162(MGM_W127,si_delay);
   and MGM_G163(MGM_W128,MGM_W127,MGM_W126);
   and MGM_G164(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W128);
   not MGM_G165(MGM_W129,d2_delay);
   and MGM_G166(MGM_W130,MGM_W129,d1_delay);
   and MGM_G167(MGM_W131,si_delay,MGM_W130);
   not MGM_G168(MGM_W132,ssb_delay);
   and MGM_G169(ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W132,MGM_W131);
   not MGM_G170(MGM_W133,d2_delay);
   and MGM_G171(MGM_W134,MGM_W133,d1_delay);
   and MGM_G172(MGM_W135,si_delay,MGM_W134);
   and MGM_G173(ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W135);
   and MGM_G174(MGM_W136,d2_delay,d1_delay);
   not MGM_G175(MGM_W137,si_delay);
   and MGM_G176(MGM_W138,MGM_W137,MGM_W136);
   not MGM_G177(MGM_W139,ssb_delay);
   and MGM_G178(ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G179(MGM_W140,d2_delay,d1_delay);
   not MGM_G180(MGM_W141,si_delay);
   and MGM_G181(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G182(ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W142);
   and MGM_G183(MGM_W143,d2_delay,d1_delay);
   and MGM_G184(MGM_W144,si_delay,MGM_W143);
   not MGM_G185(MGM_W145,ssb_delay);
   and MGM_G186(ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   and MGM_G187(MGM_W146,d2_delay,d1_delay);
   and MGM_G188(MGM_W147,si_delay,MGM_W146);
   and MGM_G189(ENABLE_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G190(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G191(MGM_W148,d1_delay);
   not MGM_G192(MGM_W149,d2_delay);
   and MGM_G193(MGM_W150,MGM_W149,MGM_W148);
   not MGM_G194(MGM_W151,si_delay);
   and MGM_G195(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si,MGM_W151,MGM_W150);
   not MGM_G196(MGM_W152,d1_delay);
   not MGM_G197(MGM_W153,d2_delay);
   and MGM_G198(MGM_W154,MGM_W153,MGM_W152);
   and MGM_G199(ENABLE_NOT_d1_AND_NOT_d2_AND_si,si_delay,MGM_W154);
   not MGM_G200(MGM_W155,d1_delay);
   and MGM_G201(MGM_W156,d2_delay,MGM_W155);
   not MGM_G202(MGM_W157,si_delay);
   and MGM_G203(ENABLE_NOT_d1_AND_d2_AND_NOT_si,MGM_W157,MGM_W156);
   not MGM_G204(MGM_W158,d1_delay);
   and MGM_G205(MGM_W159,d2_delay,MGM_W158);
   and MGM_G206(ENABLE_NOT_d1_AND_d2_AND_si,si_delay,MGM_W159);
   not MGM_G207(MGM_W160,d2_delay);
   and MGM_G208(MGM_W161,MGM_W160,d1_delay);
   not MGM_G209(MGM_W162,si_delay);
   and MGM_G210(ENABLE_d1_AND_NOT_d2_AND_NOT_si,MGM_W162,MGM_W161);
   not MGM_G211(MGM_W163,d2_delay);
   and MGM_G212(MGM_W164,MGM_W163,d1_delay);
   and MGM_G213(ENABLE_d1_AND_NOT_d2_AND_si,si_delay,MGM_W164);
   and MGM_G214(MGM_W165,d2_delay,d1_delay);
   not MGM_G215(MGM_W166,si_delay);
   and MGM_G216(ENABLE_d1_AND_d2_AND_NOT_si,MGM_W166,MGM_W165);
   and MGM_G217(MGM_W167,d2_delay,d1_delay);
   and MGM_G218(ENABLE_d1_AND_d2_AND_si,si_delay,MGM_W167);
   buf MGM_G219(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz400ad1q01x1( clk, d1, d2, d3, d4, o1, o2, o3, o4, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} o3 = {(o2*!ssb+d3*ssb) on rising clk} o4 = {(o3*!ssb+d4*ssb) on rising clk} so = {(o3*!ssb+d4*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// 
// assign `fuz400ad_delay o1 =  IQ1;
// assign `fuz400ad_delay o2 =  IQ2;
// assign `fuz400ad_delay o3 =  IQ3;
// assign `fuz400ad_delay o4 =  IQ4;
// assign `fuz400ad_delay so =  o4;
// 

   input clk, d1, d2, d3, d4, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz400ad_delay so_random_init = so_tmp ;
      assign `fuz400ad_delay o1_random_init = o1_tmp ;
      assign `fuz400ad_delay o2_random_init = o2_tmp ;
      assign `fuz400ad_delay o3_random_init = o3_tmp ;
      assign `fuz400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fuz400ad_delay so_random_init = so_tmp ;
      assign `fuz400ad_delay o1_random_init = o1_tmp ;
      assign `fuz400ad_delay o2_random_init = o2_tmp ;
      assign `fuz400ad_delay o3_random_init = o3_tmp ;
      assign `fuz400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G32(MGM_W24,d1_delay);
   not MGM_G33(MGM_W25,d2_delay);
   and MGM_G34(MGM_W26,MGM_W25,MGM_W24);
   not MGM_G35(MGM_W27,d3_delay);
   and MGM_G36(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G37(MGM_W29,d4_delay);
   and MGM_G38(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G39(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb,ssb_delay,MGM_W30);
   not MGM_G40(MGM_W31,si_delay);
   not MGM_G41(MGM_W32,ssb_delay);
   and MGM_G42(ENABLE_NOT_si_AND_NOT_ssb,MGM_W32,MGM_W31);
   and MGM_G43(MGM_W33,d2_delay,d1_delay);
   and MGM_G44(MGM_W34,d3_delay,MGM_W33);
   and MGM_G45(MGM_W35,d4_delay,MGM_W34);
   and MGM_G46(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb,ssb_delay,MGM_W35);
   not MGM_G47(MGM_W36,ssb_delay);
   and MGM_G48(ENABLE_si_AND_NOT_ssb,MGM_W36,si_delay);
   not MGM_G49(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G50(MGM_W37,d1_delay);
   and MGM_G51(MGM_W38,d2_delay,MGM_W37);
   not MGM_G52(MGM_W39,d3_delay);
   and MGM_G53(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G54(MGM_W41,d4_delay,MGM_W40);
   and MGM_G55(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si,si_delay,MGM_W41);
   not MGM_G56(MGM_W42,d2_delay);
   and MGM_G57(MGM_W43,MGM_W42,d1_delay);
   and MGM_G58(MGM_W44,d3_delay,MGM_W43);
   not MGM_G59(MGM_W45,d4_delay);
   and MGM_G60(MGM_W46,MGM_W45,MGM_W44);
   not MGM_G61(MGM_W47,si_delay);
   and MGM_G62(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si,MGM_W47,MGM_W46);
   buf MGM_G63(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o3==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o3==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz400ad1q01x2( clk, d1, d2, d3, d4, o1, o2, o3, o4, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} o3 = {(o2*!ssb+d3*ssb) on rising clk} o4 = {(o3*!ssb+d4*ssb) on rising clk} so = {(o3*!ssb+d4*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// 
// assign `fuz400ad_delay o1 =  IQ1;
// assign `fuz400ad_delay o2 =  IQ2;
// assign `fuz400ad_delay o3 =  IQ3;
// assign `fuz400ad_delay o4 =  IQ4;
// assign `fuz400ad_delay so =  o4;
// 

   input clk, d1, d2, d3, d4, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz400ad_delay so_random_init = so_tmp ;
      assign `fuz400ad_delay o1_random_init = o1_tmp ;
      assign `fuz400ad_delay o2_random_init = o2_tmp ;
      assign `fuz400ad_delay o3_random_init = o3_tmp ;
      assign `fuz400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fuz400ad_delay so_random_init = so_tmp ;
      assign `fuz400ad_delay o1_random_init = o1_tmp ;
      assign `fuz400ad_delay o2_random_init = o2_tmp ;
      assign `fuz400ad_delay o3_random_init = o3_tmp ;
      assign `fuz400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G32(MGM_W24,d1_delay);
   not MGM_G33(MGM_W25,d2_delay);
   and MGM_G34(MGM_W26,MGM_W25,MGM_W24);
   not MGM_G35(MGM_W27,d3_delay);
   and MGM_G36(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G37(MGM_W29,d4_delay);
   and MGM_G38(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G39(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb,ssb_delay,MGM_W30);
   not MGM_G40(MGM_W31,si_delay);
   not MGM_G41(MGM_W32,ssb_delay);
   and MGM_G42(ENABLE_NOT_si_AND_NOT_ssb,MGM_W32,MGM_W31);
   and MGM_G43(MGM_W33,d2_delay,d1_delay);
   and MGM_G44(MGM_W34,d3_delay,MGM_W33);
   and MGM_G45(MGM_W35,d4_delay,MGM_W34);
   and MGM_G46(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb,ssb_delay,MGM_W35);
   not MGM_G47(MGM_W36,ssb_delay);
   and MGM_G48(ENABLE_si_AND_NOT_ssb,MGM_W36,si_delay);
   not MGM_G49(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G50(MGM_W37,d1_delay);
   and MGM_G51(MGM_W38,d2_delay,MGM_W37);
   not MGM_G52(MGM_W39,d3_delay);
   and MGM_G53(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G54(MGM_W41,d4_delay,MGM_W40);
   and MGM_G55(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si,si_delay,MGM_W41);
   not MGM_G56(MGM_W42,d2_delay);
   and MGM_G57(MGM_W43,MGM_W42,d1_delay);
   and MGM_G58(MGM_W44,d3_delay,MGM_W43);
   not MGM_G59(MGM_W45,d4_delay);
   and MGM_G60(MGM_W46,MGM_W45,MGM_W44);
   not MGM_G61(MGM_W47,si_delay);
   and MGM_G62(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si,MGM_W47,MGM_W46);
   buf MGM_G63(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o3==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o3==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz400ad1q02x2( clk, d1, d2, d3, d4, o1, o2, o3, o4, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} o3 = {(o2*!ssb+d3*ssb) on rising clk} o4 = {(o3*!ssb+d4*ssb) on rising clk} so = {(o3*!ssb+d4*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// 
// assign `fuz400ad_delay o1 =  IQ1;
// assign `fuz400ad_delay o2 =  IQ2;
// assign `fuz400ad_delay o3 =  IQ3;
// assign `fuz400ad_delay o4 =  IQ4;
// assign `fuz400ad_delay so =  o4;
// 

   input clk, d1, d2, d3, d4, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz400ad_delay so_random_init = so_tmp ;
      assign `fuz400ad_delay o1_random_init = o1_tmp ;
      assign `fuz400ad_delay o2_random_init = o2_tmp ;
      assign `fuz400ad_delay o3_random_init = o3_tmp ;
      assign `fuz400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fuz400ad_delay so_random_init = so_tmp ;
      assign `fuz400ad_delay o1_random_init = o1_tmp ;
      assign `fuz400ad_delay o2_random_init = o2_tmp ;
      assign `fuz400ad_delay o3_random_init = o3_tmp ;
      assign `fuz400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz400ad_func i0sfuz400ad1q02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G32(MGM_W24,d1_delay);
   not MGM_G33(MGM_W25,d2_delay);
   and MGM_G34(MGM_W26,MGM_W25,MGM_W24);
   not MGM_G35(MGM_W27,d3_delay);
   and MGM_G36(MGM_W28,MGM_W27,MGM_W26);
   not MGM_G37(MGM_W29,d4_delay);
   and MGM_G38(MGM_W30,MGM_W29,MGM_W28);
   and MGM_G39(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb,ssb_delay,MGM_W30);
   not MGM_G40(MGM_W31,si_delay);
   not MGM_G41(MGM_W32,ssb_delay);
   and MGM_G42(ENABLE_NOT_si_AND_NOT_ssb,MGM_W32,MGM_W31);
   and MGM_G43(MGM_W33,d2_delay,d1_delay);
   and MGM_G44(MGM_W34,d3_delay,MGM_W33);
   and MGM_G45(MGM_W35,d4_delay,MGM_W34);
   and MGM_G46(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb,ssb_delay,MGM_W35);
   not MGM_G47(MGM_W36,ssb_delay);
   and MGM_G48(ENABLE_si_AND_NOT_ssb,MGM_W36,si_delay);
   not MGM_G49(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G50(MGM_W37,d1_delay);
   and MGM_G51(MGM_W38,d2_delay,MGM_W37);
   not MGM_G52(MGM_W39,d3_delay);
   and MGM_G53(MGM_W40,MGM_W39,MGM_W38);
   and MGM_G54(MGM_W41,d4_delay,MGM_W40);
   and MGM_G55(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si,si_delay,MGM_W41);
   not MGM_G56(MGM_W42,d2_delay);
   and MGM_G57(MGM_W43,MGM_W42,d1_delay);
   and MGM_G58(MGM_W44,d3_delay,MGM_W43);
   not MGM_G59(MGM_W45,d4_delay);
   and MGM_G60(MGM_W46,MGM_W45,MGM_W44);
   not MGM_G61(MGM_W47,si_delay);
   and MGM_G62(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si,MGM_W47,MGM_W46);
   buf MGM_G63(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o3==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o3==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz440ad1q01x1( clk, d1, d2, d3, d4, den1, den2, den3, den4, o1, o2, o3, o4, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit Den-MBFF with internally stitched scanout and synch reset
// 
// 
// 
// assign  int1 =  den1 ? d1 : IQ1;
// assign  int1a =  den2 ? d2 : IQ2;
// assign  int1b =  den3 ? d3 : IQ3;
// assign  int1c =  den4 ? d4 : IQ4;
// assign  int2 =  ssb ? int1 : si;
// assign  int2a =  ssb ? int1a : IQ1;
// assign  int2b =  ssb ? int1b : IQ2;
// assign  int2c =  ssb ? int1c : IQ3;
// 
// always @ (posedge clk)
// begin
// IQ1 <= int2 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= int2a ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= int2b ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= int2c ;
// end
// 
// assign  o1 =  IQ1;
// assign  o2 =  IQ2;
// assign  o3 =  IQ3;
// assign  o4 =  IQ4;
// assign  so =  o4;
// 

   input clk, d1, d2, d3, d4, den1, den2, den3, den4, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire so_random_init;
wire o1_random_init;
wire o2_random_init;
wire o3_random_init;
wire o4_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
   if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
   assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
   assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
   assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
   assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
`else
   assign so = so_random_init;
   assign o1 = o1_random_init;
   assign o2 = o2_random_init;
   assign o3 = o3_random_init;
   assign o4 = o4_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.den1(den1),.den2(den2),.den3(den3),.den4(den4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz440ad_delay so_random_init = so_tmp ;
      assign `fuz440ad_delay o1_random_init = o1_tmp ;
      assign `fuz440ad_delay o2_random_init = o2_tmp ;
      assign `fuz440ad_delay o3_random_init = o3_tmp ;
      assign `fuz440ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.den1(den1),.den2(den2),.den3(den3),.den4(den4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fuz440ad_delay so_random_init = so_tmp ;
      assign `fuz440ad_delay o1_random_init = o1_tmp ;
      assign `fuz440ad_delay o2_random_init = o2_tmp ;
      assign `fuz440ad_delay o3_random_init = o3_tmp ;
      assign `fuz440ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire den1_delay ;
   wire den2_delay ;
   wire den3_delay ;
   wire den4_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.den1(den1_delay),.den2(den2_delay),.den3(den3_delay),.den4(den4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.den1(den1_delay),.den2(den2_delay),.den3(den3_delay),.den4(den4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d1_delay);
   not MGM_G1(MGM_W1,d2_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,d3_delay);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,d4_delay);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G7(MGM_W7,den1_delay,MGM_W6);
   and MGM_G8(MGM_W8,den2_delay,MGM_W7);
   and MGM_G9(MGM_W9,den3_delay,MGM_W8);
   and MGM_G10(MGM_W10,den4_delay,MGM_W9);
   and MGM_G11(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb,ssb_delay,MGM_W10);
   not MGM_G12(MGM_W11,si_delay);
   not MGM_G13(MGM_W12,ssb_delay);
   and MGM_G14(ENABLE_NOT_si_AND_NOT_ssb,MGM_W12,MGM_W11);
   and MGM_G15(MGM_W13,d2_delay,d1_delay);
   and MGM_G16(MGM_W14,d3_delay,MGM_W13);
   and MGM_G17(MGM_W15,d4_delay,MGM_W14);
   and MGM_G18(MGM_W16,den1_delay,MGM_W15);
   and MGM_G19(MGM_W17,den2_delay,MGM_W16);
   and MGM_G20(MGM_W18,den3_delay,MGM_W17);
   and MGM_G21(MGM_W19,den4_delay,MGM_W18);
   and MGM_G22(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G23(MGM_W20,ssb_delay);
   and MGM_G24(ENABLE_si_AND_NOT_ssb,MGM_W20,si_delay);
   not MGM_G25(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G26(MGM_W21,d1_delay);
   not MGM_G27(MGM_W22,d2_delay);
   and MGM_G28(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G29(MGM_W24,d3_delay);
   and MGM_G30(MGM_W25,MGM_W24,MGM_W23);
   not MGM_G31(MGM_W26,d4_delay);
   and MGM_G32(MGM_W27,MGM_W26,MGM_W25);
   not MGM_G33(MGM_W28,den1_delay);
   and MGM_G34(MGM_W29,MGM_W28,MGM_W27);
   not MGM_G35(MGM_W30,den2_delay);
   and MGM_G36(MGM_W31,MGM_W30,MGM_W29);
   not MGM_G37(MGM_W32,den3_delay);
   and MGM_G38(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G39(MGM_W34,den4_delay);
   and MGM_G40(MGM_W35,MGM_W34,MGM_W33);
   and MGM_G41(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si,si_delay,MGM_W35);
   not MGM_G42(MGM_W36,d1_delay);
   not MGM_G43(MGM_W37,d2_delay);
   and MGM_G44(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G45(MGM_W39,d3_delay);
   and MGM_G46(MGM_W40,MGM_W39,MGM_W38);
   not MGM_G47(MGM_W41,d4_delay);
   and MGM_G48(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G49(MGM_W43,den1_delay,MGM_W42);
   and MGM_G50(MGM_W44,den2_delay,MGM_W43);
   and MGM_G51(MGM_W45,den3_delay,MGM_W44);
   and MGM_G52(MGM_W46,den4_delay,MGM_W45);
   and MGM_G53(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si,si_delay,MGM_W46);
   and MGM_G54(MGM_W47,d2_delay,d1_delay);
   and MGM_G55(MGM_W48,d3_delay,MGM_W47);
   and MGM_G56(MGM_W49,d4_delay,MGM_W48);
   not MGM_G57(MGM_W50,den1_delay);
   and MGM_G58(MGM_W51,MGM_W50,MGM_W49);
   not MGM_G59(MGM_W52,den2_delay);
   and MGM_G60(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G61(MGM_W54,den3_delay);
   and MGM_G62(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G63(MGM_W56,den4_delay);
   and MGM_G64(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G65(MGM_W58,si_delay);
   and MGM_G66(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si,MGM_W58,MGM_W57);
   and MGM_G67(MGM_W59,d2_delay,d1_delay);
   and MGM_G68(MGM_W60,d3_delay,MGM_W59);
   and MGM_G69(MGM_W61,d4_delay,MGM_W60);
   and MGM_G70(MGM_W62,den1_delay,MGM_W61);
   and MGM_G71(MGM_W63,den2_delay,MGM_W62);
   and MGM_G72(MGM_W64,den3_delay,MGM_W63);
   and MGM_G73(MGM_W65,den4_delay,MGM_W64);
   not MGM_G74(MGM_W66,si_delay);
   and MGM_G75(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si,MGM_W66,MGM_W65);
   and MGM_G76(ENABLE_ssb_AND_den1,den1_delay,ssb_delay);
   and MGM_G77(ENABLE_ssb_AND_den2,den2_delay,ssb_delay);
   and MGM_G78(ENABLE_ssb_AND_den3,den3_delay,ssb_delay);
   and MGM_G79(ENABLE_ssb_AND_den4,den4_delay,ssb_delay);
   buf MGM_G80(ENABLE_ssb,ssb_delay);
   // spec_gates_end
  specify
   if(o3==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d1))  = (0.0,0.0);

   if(o3==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so +: 1'b1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b0 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b0 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b1 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b0 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b0 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b0 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b0 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b1 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b0 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b0 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b1 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b0 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b0 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b0 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b0 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b1 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b0 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b0 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b1 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b0 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b0 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b0 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b0 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b1 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,si_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

   // setuphold d1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den1 == 1'b1),
		negedge d1 &&& (ENABLE_ssb_AND_den1 == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,d1_delay);

   // setuphold d1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den1 == 1'b1),
		posedge d1 &&& (ENABLE_ssb_AND_den1 == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,d1_delay);

   // setuphold d2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den2 == 1'b1),
		negedge d2 &&& (ENABLE_ssb_AND_den2 == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,d2_delay);

   // setuphold d2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den2 == 1'b1),
		posedge d2 &&& (ENABLE_ssb_AND_den2 == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,d2_delay);

   // setuphold d3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den3 == 1'b1),
		negedge d3 &&& (ENABLE_ssb_AND_den3 == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,d3_delay);

   // setuphold d3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den3 == 1'b1),
		posedge d3 &&& (ENABLE_ssb_AND_den3 == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,d3_delay);

   // setuphold d4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den4 == 1'b1),
		negedge d4 &&& (ENABLE_ssb_AND_den4 == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,d4_delay);

   // setuphold d4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den4 == 1'b1),
		posedge d4 &&& (ENABLE_ssb_AND_den4 == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,d4_delay);

   // setuphold den1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den1 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,den1_delay);

   // setuphold den1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den1 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,den1_delay);

   // setuphold den2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den2 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,den2_delay);

   // setuphold den2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den2 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,den2_delay);

   // setuphold den3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den3 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,den3_delay);

   // setuphold den3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den3 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,den3_delay);

   // setuphold den4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den4 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,den4_delay);

   // setuphold den4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den4 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,den4_delay);

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfuz440ad1q01x2( clk, d1, d2, d3, d4, den1, den2, den3, den4, o1, o2, o3, o4, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit Den-MBFF with internally stitched scanout and synch reset
// 
// 
// 
// assign  int1 =  den1 ? d1 : IQ1;
// assign  int1a =  den2 ? d2 : IQ2;
// assign  int1b =  den3 ? d3 : IQ3;
// assign  int1c =  den4 ? d4 : IQ4;
// assign  int2 =  ssb ? int1 : si;
// assign  int2a =  ssb ? int1a : IQ1;
// assign  int2b =  ssb ? int1b : IQ2;
// assign  int2c =  ssb ? int1c : IQ3;
// 
// always @ (posedge clk)
// begin
// IQ1 <= int2 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= int2a ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= int2b ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= int2c ;
// end
// 
// assign  o1 =  IQ1;
// assign  o2 =  IQ2;
// assign  o3 =  IQ3;
// assign  o4 =  IQ4;
// assign  so =  o4;
// 

   input clk, d1, d2, d3, d4, den1, den2, den3, den4, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire so_random_init;
wire o1_random_init;
wire o2_random_init;
wire o3_random_init;
wire o4_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
   if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
   assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
   assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
   assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
   assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
`else
   assign so = so_random_init;
   assign o1 = o1_random_init;
   assign o2 = o2_random_init;
   assign o3 = o3_random_init;
   assign o4 = o4_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.den1(den1),.den2(den2),.den3(den3),.den4(den4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz440ad_delay so_random_init = so_tmp ;
      assign `fuz440ad_delay o1_random_init = o1_tmp ;
      assign `fuz440ad_delay o2_random_init = o2_tmp ;
      assign `fuz440ad_delay o3_random_init = o3_tmp ;
      assign `fuz440ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.den1(den1),.den2(den2),.den3(den3),.den4(den4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fuz440ad_delay so_random_init = so_tmp ;
      assign `fuz440ad_delay o1_random_init = o1_tmp ;
      assign `fuz440ad_delay o2_random_init = o2_tmp ;
      assign `fuz440ad_delay o3_random_init = o3_tmp ;
      assign `fuz440ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire den1_delay ;
   wire den2_delay ;
   wire den3_delay ;
   wire den4_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.den1(den1_delay),.den2(den2_delay),.den3(den3_delay),.den4(den4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.den1(den1_delay),.den2(den2_delay),.den3(den3_delay),.den4(den4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d1_delay);
   not MGM_G1(MGM_W1,d2_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,d3_delay);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,d4_delay);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G7(MGM_W7,den1_delay,MGM_W6);
   and MGM_G8(MGM_W8,den2_delay,MGM_W7);
   and MGM_G9(MGM_W9,den3_delay,MGM_W8);
   and MGM_G10(MGM_W10,den4_delay,MGM_W9);
   and MGM_G11(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb,ssb_delay,MGM_W10);
   not MGM_G12(MGM_W11,si_delay);
   not MGM_G13(MGM_W12,ssb_delay);
   and MGM_G14(ENABLE_NOT_si_AND_NOT_ssb,MGM_W12,MGM_W11);
   and MGM_G15(MGM_W13,d2_delay,d1_delay);
   and MGM_G16(MGM_W14,d3_delay,MGM_W13);
   and MGM_G17(MGM_W15,d4_delay,MGM_W14);
   and MGM_G18(MGM_W16,den1_delay,MGM_W15);
   and MGM_G19(MGM_W17,den2_delay,MGM_W16);
   and MGM_G20(MGM_W18,den3_delay,MGM_W17);
   and MGM_G21(MGM_W19,den4_delay,MGM_W18);
   and MGM_G22(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G23(MGM_W20,ssb_delay);
   and MGM_G24(ENABLE_si_AND_NOT_ssb,MGM_W20,si_delay);
   not MGM_G25(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G26(MGM_W21,d1_delay);
   not MGM_G27(MGM_W22,d2_delay);
   and MGM_G28(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G29(MGM_W24,d3_delay);
   and MGM_G30(MGM_W25,MGM_W24,MGM_W23);
   not MGM_G31(MGM_W26,d4_delay);
   and MGM_G32(MGM_W27,MGM_W26,MGM_W25);
   not MGM_G33(MGM_W28,den1_delay);
   and MGM_G34(MGM_W29,MGM_W28,MGM_W27);
   not MGM_G35(MGM_W30,den2_delay);
   and MGM_G36(MGM_W31,MGM_W30,MGM_W29);
   not MGM_G37(MGM_W32,den3_delay);
   and MGM_G38(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G39(MGM_W34,den4_delay);
   and MGM_G40(MGM_W35,MGM_W34,MGM_W33);
   and MGM_G41(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si,si_delay,MGM_W35);
   not MGM_G42(MGM_W36,d1_delay);
   not MGM_G43(MGM_W37,d2_delay);
   and MGM_G44(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G45(MGM_W39,d3_delay);
   and MGM_G46(MGM_W40,MGM_W39,MGM_W38);
   not MGM_G47(MGM_W41,d4_delay);
   and MGM_G48(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G49(MGM_W43,den1_delay,MGM_W42);
   and MGM_G50(MGM_W44,den2_delay,MGM_W43);
   and MGM_G51(MGM_W45,den3_delay,MGM_W44);
   and MGM_G52(MGM_W46,den4_delay,MGM_W45);
   and MGM_G53(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si,si_delay,MGM_W46);
   and MGM_G54(MGM_W47,d2_delay,d1_delay);
   and MGM_G55(MGM_W48,d3_delay,MGM_W47);
   and MGM_G56(MGM_W49,d4_delay,MGM_W48);
   not MGM_G57(MGM_W50,den1_delay);
   and MGM_G58(MGM_W51,MGM_W50,MGM_W49);
   not MGM_G59(MGM_W52,den2_delay);
   and MGM_G60(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G61(MGM_W54,den3_delay);
   and MGM_G62(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G63(MGM_W56,den4_delay);
   and MGM_G64(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G65(MGM_W58,si_delay);
   and MGM_G66(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si,MGM_W58,MGM_W57);
   and MGM_G67(MGM_W59,d2_delay,d1_delay);
   and MGM_G68(MGM_W60,d3_delay,MGM_W59);
   and MGM_G69(MGM_W61,d4_delay,MGM_W60);
   and MGM_G70(MGM_W62,den1_delay,MGM_W61);
   and MGM_G71(MGM_W63,den2_delay,MGM_W62);
   and MGM_G72(MGM_W64,den3_delay,MGM_W63);
   and MGM_G73(MGM_W65,den4_delay,MGM_W64);
   not MGM_G74(MGM_W66,si_delay);
   and MGM_G75(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si,MGM_W66,MGM_W65);
   and MGM_G76(ENABLE_ssb_AND_den1,den1_delay,ssb_delay);
   and MGM_G77(ENABLE_ssb_AND_den2,den2_delay,ssb_delay);
   and MGM_G78(ENABLE_ssb_AND_den3,den3_delay,ssb_delay);
   and MGM_G79(ENABLE_ssb_AND_den4,den4_delay,ssb_delay);
   buf MGM_G80(ENABLE_ssb,ssb_delay);
   // spec_gates_end
  specify
   if(o3==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d1))  = (0.0,0.0);

   if(o3==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so +: 1'b1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b0 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b0 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b1 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b0 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b0 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b0 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b0 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b1 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b0 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b0 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b1 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b0 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b0 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b0 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b0 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b1 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b0 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b0 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b1 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b0 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b0 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b0 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b0 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b1 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,si_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

   // setuphold d1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den1 == 1'b1),
		negedge d1 &&& (ENABLE_ssb_AND_den1 == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,d1_delay);

   // setuphold d1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den1 == 1'b1),
		posedge d1 &&& (ENABLE_ssb_AND_den1 == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,d1_delay);

   // setuphold d2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den2 == 1'b1),
		negedge d2 &&& (ENABLE_ssb_AND_den2 == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,d2_delay);

   // setuphold d2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den2 == 1'b1),
		posedge d2 &&& (ENABLE_ssb_AND_den2 == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,d2_delay);

   // setuphold d3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den3 == 1'b1),
		negedge d3 &&& (ENABLE_ssb_AND_den3 == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,d3_delay);

   // setuphold d3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den3 == 1'b1),
		posedge d3 &&& (ENABLE_ssb_AND_den3 == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,d3_delay);

   // setuphold d4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den4 == 1'b1),
		negedge d4 &&& (ENABLE_ssb_AND_den4 == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,d4_delay);

   // setuphold d4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den4 == 1'b1),
		posedge d4 &&& (ENABLE_ssb_AND_den4 == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,d4_delay);

   // setuphold den1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den1 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,den1_delay);

   // setuphold den1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den1 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,den1_delay);

   // setuphold den2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den2 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,den2_delay);

   // setuphold den2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den2 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,den2_delay);

   // setuphold den3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den3 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,den3_delay);

   // setuphold den3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den3 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,den3_delay);

   // setuphold den4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den4 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,den4_delay);

   // setuphold den4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den4 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,den4_delay);

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfuz440ad1q02x2( clk, d1, d2, d3, d4, den1, den2, den3, den4, o1, o2, o3, o4, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit Den-MBFF with internally stitched scanout and synch reset
// 
// 
// 
// assign  int1 =  den1 ? d1 : IQ1;
// assign  int1a =  den2 ? d2 : IQ2;
// assign  int1b =  den3 ? d3 : IQ3;
// assign  int1c =  den4 ? d4 : IQ4;
// assign  int2 =  ssb ? int1 : si;
// assign  int2a =  ssb ? int1a : IQ1;
// assign  int2b =  ssb ? int1b : IQ2;
// assign  int2c =  ssb ? int1c : IQ3;
// 
// always @ (posedge clk)
// begin
// IQ1 <= int2 ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= int2a ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= int2b ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= int2c ;
// end
// 
// assign  o1 =  IQ1;
// assign  o2 =  IQ2;
// assign  o3 =  IQ3;
// assign  o4 =  IQ4;
// assign  so =  o4;
// 

   input clk, d1, d2, d3, d4, den1, den2, den3, den4, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire so_random_init;
wire o1_random_init;
wire o2_random_init;
wire o3_random_init;
wire o4_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
   if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
   assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
   assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
   assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
   assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
`else
   assign so = so_random_init;
   assign o1 = o1_random_init;
   assign o2 = o2_random_init;
   assign o3 = o3_random_init;
   assign o4 = o4_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.den1(den1),.den2(den2),.den3(den3),.den4(den4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz440ad_delay so_random_init = so_tmp ;
      assign `fuz440ad_delay o1_random_init = o1_tmp ;
      assign `fuz440ad_delay o2_random_init = o2_tmp ;
      assign `fuz440ad_delay o3_random_init = o3_tmp ;
      assign `fuz440ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.den1(den1),.den2(den2),.den3(den3),.den4(den4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fuz440ad_delay so_random_init = so_tmp ;
      assign `fuz440ad_delay o1_random_init = o1_tmp ;
      assign `fuz440ad_delay o2_random_init = o2_tmp ;
      assign `fuz440ad_delay o3_random_init = o3_tmp ;
      assign `fuz440ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire den1_delay ;
   wire den2_delay ;
   wire den3_delay ;
   wire den4_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.den1(den1_delay),.den2(den2_delay),.den3(den3_delay),.den4(den4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz440ad_func i0sfuz440ad1q02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.den1(den1_delay),.den2(den2_delay),.den3(den3_delay),.den4(den4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d1_delay);
   not MGM_G1(MGM_W1,d2_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   not MGM_G3(MGM_W3,d3_delay);
   and MGM_G4(MGM_W4,MGM_W3,MGM_W2);
   not MGM_G5(MGM_W5,d4_delay);
   and MGM_G6(MGM_W6,MGM_W5,MGM_W4);
   and MGM_G7(MGM_W7,den1_delay,MGM_W6);
   and MGM_G8(MGM_W8,den2_delay,MGM_W7);
   and MGM_G9(MGM_W9,den3_delay,MGM_W8);
   and MGM_G10(MGM_W10,den4_delay,MGM_W9);
   and MGM_G11(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb,ssb_delay,MGM_W10);
   not MGM_G12(MGM_W11,si_delay);
   not MGM_G13(MGM_W12,ssb_delay);
   and MGM_G14(ENABLE_NOT_si_AND_NOT_ssb,MGM_W12,MGM_W11);
   and MGM_G15(MGM_W13,d2_delay,d1_delay);
   and MGM_G16(MGM_W14,d3_delay,MGM_W13);
   and MGM_G17(MGM_W15,d4_delay,MGM_W14);
   and MGM_G18(MGM_W16,den1_delay,MGM_W15);
   and MGM_G19(MGM_W17,den2_delay,MGM_W16);
   and MGM_G20(MGM_W18,den3_delay,MGM_W17);
   and MGM_G21(MGM_W19,den4_delay,MGM_W18);
   and MGM_G22(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G23(MGM_W20,ssb_delay);
   and MGM_G24(ENABLE_si_AND_NOT_ssb,MGM_W20,si_delay);
   not MGM_G25(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G26(MGM_W21,d1_delay);
   not MGM_G27(MGM_W22,d2_delay);
   and MGM_G28(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G29(MGM_W24,d3_delay);
   and MGM_G30(MGM_W25,MGM_W24,MGM_W23);
   not MGM_G31(MGM_W26,d4_delay);
   and MGM_G32(MGM_W27,MGM_W26,MGM_W25);
   not MGM_G33(MGM_W28,den1_delay);
   and MGM_G34(MGM_W29,MGM_W28,MGM_W27);
   not MGM_G35(MGM_W30,den2_delay);
   and MGM_G36(MGM_W31,MGM_W30,MGM_W29);
   not MGM_G37(MGM_W32,den3_delay);
   and MGM_G38(MGM_W33,MGM_W32,MGM_W31);
   not MGM_G39(MGM_W34,den4_delay);
   and MGM_G40(MGM_W35,MGM_W34,MGM_W33);
   and MGM_G41(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si,si_delay,MGM_W35);
   not MGM_G42(MGM_W36,d1_delay);
   not MGM_G43(MGM_W37,d2_delay);
   and MGM_G44(MGM_W38,MGM_W37,MGM_W36);
   not MGM_G45(MGM_W39,d3_delay);
   and MGM_G46(MGM_W40,MGM_W39,MGM_W38);
   not MGM_G47(MGM_W41,d4_delay);
   and MGM_G48(MGM_W42,MGM_W41,MGM_W40);
   and MGM_G49(MGM_W43,den1_delay,MGM_W42);
   and MGM_G50(MGM_W44,den2_delay,MGM_W43);
   and MGM_G51(MGM_W45,den3_delay,MGM_W44);
   and MGM_G52(MGM_W46,den4_delay,MGM_W45);
   and MGM_G53(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si,si_delay,MGM_W46);
   and MGM_G54(MGM_W47,d2_delay,d1_delay);
   and MGM_G55(MGM_W48,d3_delay,MGM_W47);
   and MGM_G56(MGM_W49,d4_delay,MGM_W48);
   not MGM_G57(MGM_W50,den1_delay);
   and MGM_G58(MGM_W51,MGM_W50,MGM_W49);
   not MGM_G59(MGM_W52,den2_delay);
   and MGM_G60(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G61(MGM_W54,den3_delay);
   and MGM_G62(MGM_W55,MGM_W54,MGM_W53);
   not MGM_G63(MGM_W56,den4_delay);
   and MGM_G64(MGM_W57,MGM_W56,MGM_W55);
   not MGM_G65(MGM_W58,si_delay);
   and MGM_G66(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si,MGM_W58,MGM_W57);
   and MGM_G67(MGM_W59,d2_delay,d1_delay);
   and MGM_G68(MGM_W60,d3_delay,MGM_W59);
   and MGM_G69(MGM_W61,d4_delay,MGM_W60);
   and MGM_G70(MGM_W62,den1_delay,MGM_W61);
   and MGM_G71(MGM_W63,den2_delay,MGM_W62);
   and MGM_G72(MGM_W64,den3_delay,MGM_W63);
   and MGM_G73(MGM_W65,den4_delay,MGM_W64);
   not MGM_G74(MGM_W66,si_delay);
   and MGM_G75(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si,MGM_W66,MGM_W65);
   and MGM_G76(ENABLE_ssb_AND_den1,den1_delay,ssb_delay);
   and MGM_G77(ENABLE_ssb_AND_den2,den2_delay,ssb_delay);
   and MGM_G78(ENABLE_ssb_AND_den3,den3_delay,ssb_delay);
   and MGM_G79(ENABLE_ssb_AND_den4,den4_delay,ssb_delay);
   buf MGM_G80(ENABLE_ssb,ssb_delay);
   // spec_gates_end
  specify
   if(o3==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d1))  = (0.0,0.0);

   if(o3==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so +: 1'b1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b0 && den1==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d1==1'b1 && den1==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o1
   (posedge clk => (o1 : d1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b0 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b0 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b1 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b0 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b0 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b0 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b0 && den2==1'b1 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b0 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b0 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b1 && ssb==1'b0)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d2==1'b1 && den2==1'b1 && o1==1'b1 && ssb==1'b1)
   // seq arc clk --> o2
   (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b0 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b0 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b1 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b0 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b0 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b0 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b0 && den3==1'b1 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b0 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b0 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b1 && ssb==1'b0)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d3==1'b1 && den3==1'b1 && o2==1'b1 && ssb==1'b1)
   // seq arc clk --> o3
   (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b0 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b0 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b1 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b0 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b0 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b0 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b0 && den4==1'b1 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b0 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b0 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b1 && ssb==1'b0)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   if(d4==1'b1 && den4==1'b1 && o3==1'b1 && ssb==1'b1)
   // seq arc clk --> o4
   (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,si_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_den1_AND_NOT_den2_AND_NOT_den3_AND_NOT_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_den1_AND_den2_AND_den3_AND_den4_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

   // setuphold d1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den1 == 1'b1),
		negedge d1 &&& (ENABLE_ssb_AND_den1 == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,d1_delay);

   // setuphold d1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den1 == 1'b1),
		posedge d1 &&& (ENABLE_ssb_AND_den1 == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,d1_delay);

   // setuphold d2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den2 == 1'b1),
		negedge d2 &&& (ENABLE_ssb_AND_den2 == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,d2_delay);

   // setuphold d2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den2 == 1'b1),
		posedge d2 &&& (ENABLE_ssb_AND_den2 == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,d2_delay);

   // setuphold d3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den3 == 1'b1),
		negedge d3 &&& (ENABLE_ssb_AND_den3 == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,d3_delay);

   // setuphold d3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den3 == 1'b1),
		posedge d3 &&& (ENABLE_ssb_AND_den3 == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,d3_delay);

   // setuphold d4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den4 == 1'b1),
		negedge d4 &&& (ENABLE_ssb_AND_den4 == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,d4_delay);

   // setuphold d4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb_AND_den4 == 1'b1),
		posedge d4 &&& (ENABLE_ssb_AND_den4 == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,d4_delay);

   // setuphold den1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den1 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,den1_delay);

   // setuphold den1- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den1 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier0,,,clk_delay,den1_delay);

   // setuphold den2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den2 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,den2_delay);

   // setuphold den2- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den2 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier1,,,clk_delay,den2_delay);

   // setuphold den3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den3 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,den3_delay);

   // setuphold den3- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den3 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier2,,,clk_delay,den3_delay);

   // setuphold den4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		negedge den4 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,den4_delay);

   // setuphold den4- clk-LH
   $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
		posedge den4 &&& (ENABLE_ssb == 1'b1),
		0.0,0.0,notifier3,,,clk_delay,den4_delay);

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfuz800ad1q01x1( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 8bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} o3 = {(o2*!ssb+d3*ssb) on rising clk} o4 = {(o3*!ssb+d4*ssb) on rising clk} o5 = {(o4*!ssb+d5*ssb) on rising clk} o6 = {(o5*!ssb+d6*ssb) on rising clk} o7 = {(o6*!ssb+d7*ssb) on rising clk} o8 = {(o7*!ssb+d8*ssb) on rising clk} so = {(o7*!ssb+d8*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// always @ (posedge clk)
// begin
// IQ5 <= ssb ? d5 : IQ4 ;
// end
// always @ (posedge clk)
// begin
// IQ6 <= ssb ? d6 : IQ5 ;
// end
// always @ (posedge clk)
// begin
// IQ7 <= ssb ? d7 : IQ6 ;
// end
// always @ (posedge clk)
// begin
// IQ8 <= ssb ? d8 : IQ7 ;
// end
// 
// assign `fuz800ad_delay o1 =  IQ1;
// assign `fuz800ad_delay o2 =  IQ2;
// assign `fuz800ad_delay o3 =  IQ3;
// assign `fuz800ad_delay o4 =  IQ4;
// assign `fuz800ad_delay o5 =  IQ5;
// assign `fuz800ad_delay o6 =  IQ6;
// assign `fuz800ad_delay o7 =  IQ7;
// assign `fuz800ad_delay o8 =  IQ8;
// assign `fuz800ad_delay so =  o8;
// 

   input clk, d1, d2, d3, d4, d5, d6, d7, d8, si, ssb;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      wire o5_random_init;
      wire o6_random_init;
      wire o7_random_init;
      wire o8_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init or o5_random_init or o6_random_init or o7_random_init or o8_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx) && (o5_random_init !== 1'bx) && (o6_random_init !== 1'bx) && (o7_random_init !== 1'bx) && (o8_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
         assign o5 = ((random_init_ctrl_gls === 1'b1) && (o5_random_init === 1'bx)) ? init_val : o5_random_init;
         assign o6 = ((random_init_ctrl_gls === 1'b1) && (o6_random_init === 1'bx)) ? init_val : o6_random_init;
         assign o7 = ((random_init_ctrl_gls === 1'b1) && (o7_random_init === 1'bx)) ? init_val : o7_random_init;
         assign o8 = ((random_init_ctrl_gls === 1'b1) && (o8_random_init === 1'bx)) ? init_val : o8_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
         assign o5 = o5_random_init;
         assign o6 = o6_random_init;
         assign o7 = o7_random_init;
         assign o8 = o8_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz800ad_delay so_random_init = so_tmp ;
      assign `fuz800ad_delay o1_random_init = o1_tmp ;
      assign `fuz800ad_delay o2_random_init = o2_tmp ;
      assign `fuz800ad_delay o3_random_init = o3_tmp ;
      assign `fuz800ad_delay o4_random_init = o4_tmp ;
      assign `fuz800ad_delay o5_random_init = o5_tmp ;
      assign `fuz800ad_delay o6_random_init = o6_tmp ;
      assign `fuz800ad_delay o7_random_init = o7_tmp ;
      assign `fuz800ad_delay o8_random_init = o8_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x1_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0));
      assign `fuz800ad_delay so_random_init = so_tmp ;
      assign `fuz800ad_delay o1_random_init = o1_tmp ;
      assign `fuz800ad_delay o2_random_init = o2_tmp ;
      assign `fuz800ad_delay o3_random_init = o3_tmp ;
      assign `fuz800ad_delay o4_random_init = o4_tmp ;
      assign `fuz800ad_delay o5_random_init = o5_tmp ;
      assign `fuz800ad_delay o6_random_init = o6_tmp ;
      assign `fuz800ad_delay o7_random_init = o7_tmp ;
      assign `fuz800ad_delay o8_random_init = o8_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire d5_delay ;
   wire d6_delay ;
   wire d7_delay ;
   wire d8_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   reg notifier4;
   reg notifier5;
   reg notifier6;
   reg notifier7;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
     notifier4 = (notifier4 !== notifier) ? notifier : ~notifier4;
     notifier5 = (notifier5 !== notifier) ? notifier : ~notifier5;
     notifier6 = (notifier6 !== notifier) ? notifier : ~notifier6;
     notifier7 = (notifier7 !== notifier) ? notifier : ~notifier7;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x1_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7));
   `endif
   
   // spec_gates_begin
   not MGM_G56(MGM_W48,d1_delay);
   not MGM_G57(MGM_W49,d2_delay);
   and MGM_G58(MGM_W50,MGM_W49,MGM_W48);
   not MGM_G59(MGM_W51,d3_delay);
   and MGM_G60(MGM_W52,MGM_W51,MGM_W50);
   not MGM_G61(MGM_W53,d4_delay);
   and MGM_G62(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G63(MGM_W55,d5_delay);
   and MGM_G64(MGM_W56,MGM_W55,MGM_W54);
   not MGM_G65(MGM_W57,d6_delay);
   and MGM_G66(MGM_W58,MGM_W57,MGM_W56);
   not MGM_G67(MGM_W59,d7_delay);
   and MGM_G68(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G69(MGM_W61,d8_delay);
   and MGM_G70(MGM_W62,MGM_W61,MGM_W60);
   and MGM_G71(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb,ssb_delay,MGM_W62);
   not MGM_G72(MGM_W63,si_delay);
   not MGM_G73(MGM_W64,ssb_delay);
   and MGM_G74(ENABLE_NOT_si_AND_NOT_ssb,MGM_W64,MGM_W63);
   and MGM_G75(MGM_W65,d2_delay,d1_delay);
   and MGM_G76(MGM_W66,d3_delay,MGM_W65);
   and MGM_G77(MGM_W67,d4_delay,MGM_W66);
   and MGM_G78(MGM_W68,d5_delay,MGM_W67);
   and MGM_G79(MGM_W69,d6_delay,MGM_W68);
   and MGM_G80(MGM_W70,d7_delay,MGM_W69);
   and MGM_G81(MGM_W71,d8_delay,MGM_W70);
   and MGM_G82(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb,ssb_delay,MGM_W71);
   not MGM_G83(MGM_W72,ssb_delay);
   and MGM_G84(ENABLE_si_AND_NOT_ssb,MGM_W72,si_delay);
   not MGM_G85(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G86(MGM_W73,d1_delay);
   not MGM_G87(MGM_W74,d2_delay);
   and MGM_G88(MGM_W75,MGM_W74,MGM_W73);
   not MGM_G89(MGM_W76,d3_delay);
   and MGM_G90(MGM_W77,MGM_W76,MGM_W75);
   not MGM_G91(MGM_W78,d4_delay);
   and MGM_G92(MGM_W79,MGM_W78,MGM_W77);
   not MGM_G93(MGM_W80,d5_delay);
   and MGM_G94(MGM_W81,MGM_W80,MGM_W79);
   not MGM_G95(MGM_W82,d6_delay);
   and MGM_G96(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G97(MGM_W84,d7_delay);
   and MGM_G98(MGM_W85,MGM_W84,MGM_W83);
   not MGM_G99(MGM_W86,d8_delay);
   and MGM_G100(MGM_W87,MGM_W86,MGM_W85);
   and MGM_G101(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si,si_delay,MGM_W87);
   and MGM_G102(MGM_W88,d2_delay,d1_delay);
   and MGM_G103(MGM_W89,d3_delay,MGM_W88);
   and MGM_G104(MGM_W90,d4_delay,MGM_W89);
   and MGM_G105(MGM_W91,d5_delay,MGM_W90);
   and MGM_G106(MGM_W92,d6_delay,MGM_W91);
   and MGM_G107(MGM_W93,d7_delay,MGM_W92);
   and MGM_G108(MGM_W94,d8_delay,MGM_W93);
   not MGM_G109(MGM_W95,si_delay);
   and MGM_G110(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si,MGM_W95,MGM_W94);
   buf MGM_G111(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o7==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o7==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d5 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d5 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d6 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d6 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d7 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d7 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d8 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d8 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz800ad1q01x2( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 8bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} o3 = {(o2*!ssb+d3*ssb) on rising clk} o4 = {(o3*!ssb+d4*ssb) on rising clk} o5 = {(o4*!ssb+d5*ssb) on rising clk} o6 = {(o5*!ssb+d6*ssb) on rising clk} o7 = {(o6*!ssb+d7*ssb) on rising clk} o8 = {(o7*!ssb+d8*ssb) on rising clk} so = {(o7*!ssb+d8*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// always @ (posedge clk)
// begin
// IQ5 <= ssb ? d5 : IQ4 ;
// end
// always @ (posedge clk)
// begin
// IQ6 <= ssb ? d6 : IQ5 ;
// end
// always @ (posedge clk)
// begin
// IQ7 <= ssb ? d7 : IQ6 ;
// end
// always @ (posedge clk)
// begin
// IQ8 <= ssb ? d8 : IQ7 ;
// end
// 
// assign `fuz800ad_delay o1 =  IQ1;
// assign `fuz800ad_delay o2 =  IQ2;
// assign `fuz800ad_delay o3 =  IQ3;
// assign `fuz800ad_delay o4 =  IQ4;
// assign `fuz800ad_delay o5 =  IQ5;
// assign `fuz800ad_delay o6 =  IQ6;
// assign `fuz800ad_delay o7 =  IQ7;
// assign `fuz800ad_delay o8 =  IQ8;
// assign `fuz800ad_delay so =  o8;
// 

   input clk, d1, d2, d3, d4, d5, d6, d7, d8, si, ssb;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      wire o5_random_init;
      wire o6_random_init;
      wire o7_random_init;
      wire o8_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init or o5_random_init or o6_random_init or o7_random_init or o8_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx) && (o5_random_init !== 1'bx) && (o6_random_init !== 1'bx) && (o7_random_init !== 1'bx) && (o8_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
         assign o5 = ((random_init_ctrl_gls === 1'b1) && (o5_random_init === 1'bx)) ? init_val : o5_random_init;
         assign o6 = ((random_init_ctrl_gls === 1'b1) && (o6_random_init === 1'bx)) ? init_val : o6_random_init;
         assign o7 = ((random_init_ctrl_gls === 1'b1) && (o7_random_init === 1'bx)) ? init_val : o7_random_init;
         assign o8 = ((random_init_ctrl_gls === 1'b1) && (o8_random_init === 1'bx)) ? init_val : o8_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
         assign o5 = o5_random_init;
         assign o6 = o6_random_init;
         assign o7 = o7_random_init;
         assign o8 = o8_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz800ad_delay so_random_init = so_tmp ;
      assign `fuz800ad_delay o1_random_init = o1_tmp ;
      assign `fuz800ad_delay o2_random_init = o2_tmp ;
      assign `fuz800ad_delay o3_random_init = o3_tmp ;
      assign `fuz800ad_delay o4_random_init = o4_tmp ;
      assign `fuz800ad_delay o5_random_init = o5_tmp ;
      assign `fuz800ad_delay o6_random_init = o6_tmp ;
      assign `fuz800ad_delay o7_random_init = o7_tmp ;
      assign `fuz800ad_delay o8_random_init = o8_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0));
      assign `fuz800ad_delay so_random_init = so_tmp ;
      assign `fuz800ad_delay o1_random_init = o1_tmp ;
      assign `fuz800ad_delay o2_random_init = o2_tmp ;
      assign `fuz800ad_delay o3_random_init = o3_tmp ;
      assign `fuz800ad_delay o4_random_init = o4_tmp ;
      assign `fuz800ad_delay o5_random_init = o5_tmp ;
      assign `fuz800ad_delay o6_random_init = o6_tmp ;
      assign `fuz800ad_delay o7_random_init = o7_tmp ;
      assign `fuz800ad_delay o8_random_init = o8_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire d5_delay ;
   wire d6_delay ;
   wire d7_delay ;
   wire d8_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   reg notifier4;
   reg notifier5;
   reg notifier6;
   reg notifier7;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
     notifier4 = (notifier4 !== notifier) ? notifier : ~notifier4;
     notifier5 = (notifier5 !== notifier) ? notifier : ~notifier5;
     notifier6 = (notifier6 !== notifier) ? notifier : ~notifier6;
     notifier7 = (notifier7 !== notifier) ? notifier : ~notifier7;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q01x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7));
   `endif
   
   // spec_gates_begin
   not MGM_G56(MGM_W48,d1_delay);
   not MGM_G57(MGM_W49,d2_delay);
   and MGM_G58(MGM_W50,MGM_W49,MGM_W48);
   not MGM_G59(MGM_W51,d3_delay);
   and MGM_G60(MGM_W52,MGM_W51,MGM_W50);
   not MGM_G61(MGM_W53,d4_delay);
   and MGM_G62(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G63(MGM_W55,d5_delay);
   and MGM_G64(MGM_W56,MGM_W55,MGM_W54);
   not MGM_G65(MGM_W57,d6_delay);
   and MGM_G66(MGM_W58,MGM_W57,MGM_W56);
   not MGM_G67(MGM_W59,d7_delay);
   and MGM_G68(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G69(MGM_W61,d8_delay);
   and MGM_G70(MGM_W62,MGM_W61,MGM_W60);
   and MGM_G71(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb,ssb_delay,MGM_W62);
   not MGM_G72(MGM_W63,si_delay);
   not MGM_G73(MGM_W64,ssb_delay);
   and MGM_G74(ENABLE_NOT_si_AND_NOT_ssb,MGM_W64,MGM_W63);
   and MGM_G75(MGM_W65,d2_delay,d1_delay);
   and MGM_G76(MGM_W66,d3_delay,MGM_W65);
   and MGM_G77(MGM_W67,d4_delay,MGM_W66);
   and MGM_G78(MGM_W68,d5_delay,MGM_W67);
   and MGM_G79(MGM_W69,d6_delay,MGM_W68);
   and MGM_G80(MGM_W70,d7_delay,MGM_W69);
   and MGM_G81(MGM_W71,d8_delay,MGM_W70);
   and MGM_G82(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb,ssb_delay,MGM_W71);
   not MGM_G83(MGM_W72,ssb_delay);
   and MGM_G84(ENABLE_si_AND_NOT_ssb,MGM_W72,si_delay);
   not MGM_G85(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G86(MGM_W73,d1_delay);
   not MGM_G87(MGM_W74,d2_delay);
   and MGM_G88(MGM_W75,MGM_W74,MGM_W73);
   not MGM_G89(MGM_W76,d3_delay);
   and MGM_G90(MGM_W77,MGM_W76,MGM_W75);
   not MGM_G91(MGM_W78,d4_delay);
   and MGM_G92(MGM_W79,MGM_W78,MGM_W77);
   not MGM_G93(MGM_W80,d5_delay);
   and MGM_G94(MGM_W81,MGM_W80,MGM_W79);
   not MGM_G95(MGM_W82,d6_delay);
   and MGM_G96(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G97(MGM_W84,d7_delay);
   and MGM_G98(MGM_W85,MGM_W84,MGM_W83);
   not MGM_G99(MGM_W86,d8_delay);
   and MGM_G100(MGM_W87,MGM_W86,MGM_W85);
   and MGM_G101(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si,si_delay,MGM_W87);
   and MGM_G102(MGM_W88,d2_delay,d1_delay);
   and MGM_G103(MGM_W89,d3_delay,MGM_W88);
   and MGM_G104(MGM_W90,d4_delay,MGM_W89);
   and MGM_G105(MGM_W91,d5_delay,MGM_W90);
   and MGM_G106(MGM_W92,d6_delay,MGM_W91);
   and MGM_G107(MGM_W93,d7_delay,MGM_W92);
   and MGM_G108(MGM_W94,d8_delay,MGM_W93);
   not MGM_G109(MGM_W95,si_delay);
   and MGM_G110(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si,MGM_W95,MGM_W94);
   buf MGM_G111(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o7==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o7==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d5 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d5 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d6 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d6 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d7 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d7 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d8 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d8 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuz800ad1q02x2( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 8bit MDFF with internally stitched scanout o1 = {(si*!ssb+d1*ssb) on rising clk} o2 = {(o1*!ssb+d2*ssb) on rising clk} o3 = {(o2*!ssb+d3*ssb) on rising clk} o4 = {(o3*!ssb+d4*ssb) on rising clk} o5 = {(o4*!ssb+d5*ssb) on rising clk} o6 = {(o5*!ssb+d6*ssb) on rising clk} o7 = {(o6*!ssb+d7*ssb) on rising clk} o8 = {(o7*!ssb+d8*ssb) on rising clk} so = {(o7*!ssb+d8*ssb) on rising clk}
// 
// 
// always @ (posedge clk)
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// always @ (posedge clk)
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// always @ (posedge clk)
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// always @ (posedge clk)
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// always @ (posedge clk)
// begin
// IQ5 <= ssb ? d5 : IQ4 ;
// end
// always @ (posedge clk)
// begin
// IQ6 <= ssb ? d6 : IQ5 ;
// end
// always @ (posedge clk)
// begin
// IQ7 <= ssb ? d7 : IQ6 ;
// end
// always @ (posedge clk)
// begin
// IQ8 <= ssb ? d8 : IQ7 ;
// end
// 
// assign `fuz800ad_delay o1 =  IQ1;
// assign `fuz800ad_delay o2 =  IQ2;
// assign `fuz800ad_delay o3 =  IQ3;
// assign `fuz800ad_delay o4 =  IQ4;
// assign `fuz800ad_delay o5 =  IQ5;
// assign `fuz800ad_delay o6 =  IQ6;
// assign `fuz800ad_delay o7 =  IQ7;
// assign `fuz800ad_delay o8 =  IQ8;
// assign `fuz800ad_delay so =  o8;
// 

   input clk, d1, d2, d3, d4, d5, d6, d7, d8, si, ssb;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      wire o5_random_init;
      wire o6_random_init;
      wire o7_random_init;
      wire o8_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init or o5_random_init or o6_random_init or o7_random_init or o8_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx) && (o5_random_init !== 1'bx) && (o6_random_init !== 1'bx) && (o7_random_init !== 1'bx) && (o8_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
         assign o5 = ((random_init_ctrl_gls === 1'b1) && (o5_random_init === 1'bx)) ? init_val : o5_random_init;
         assign o6 = ((random_init_ctrl_gls === 1'b1) && (o6_random_init === 1'bx)) ? init_val : o6_random_init;
         assign o7 = ((random_init_ctrl_gls === 1'b1) && (o7_random_init === 1'bx)) ? init_val : o7_random_init;
         assign o8 = ((random_init_ctrl_gls === 1'b1) && (o8_random_init === 1'bx)) ? init_val : o8_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
         assign o5 = o5_random_init;
         assign o6 = o6_random_init;
         assign o7 = o7_random_init;
         assign o8 = o8_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fuz800ad_delay so_random_init = so_tmp ;
      assign `fuz800ad_delay o1_random_init = o1_tmp ;
      assign `fuz800ad_delay o2_random_init = o2_tmp ;
      assign `fuz800ad_delay o3_random_init = o3_tmp ;
      assign `fuz800ad_delay o4_random_init = o4_tmp ;
      assign `fuz800ad_delay o5_random_init = o5_tmp ;
      assign `fuz800ad_delay o6_random_init = o6_tmp ;
      assign `fuz800ad_delay o7_random_init = o7_tmp ;
      assign `fuz800ad_delay o8_random_init = o8_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q02x2_behav_inst(.clk(clk),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0));
      assign `fuz800ad_delay so_random_init = so_tmp ;
      assign `fuz800ad_delay o1_random_init = o1_tmp ;
      assign `fuz800ad_delay o2_random_init = o2_tmp ;
      assign `fuz800ad_delay o3_random_init = o3_tmp ;
      assign `fuz800ad_delay o4_random_init = o4_tmp ;
      assign `fuz800ad_delay o5_random_init = o5_tmp ;
      assign `fuz800ad_delay o6_random_init = o6_tmp ;
      assign `fuz800ad_delay o7_random_init = o7_tmp ;
      assign `fuz800ad_delay o8_random_init = o8_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire d5_delay ;
   wire d6_delay ;
   wire d7_delay ;
   wire d8_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   reg notifier4;
   reg notifier5;
   reg notifier6;
   reg notifier7;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
     notifier4 = (notifier4 !== notifier) ? notifier : ~notifier4;
     notifier5 = (notifier5 !== notifier) ? notifier : ~notifier5;
     notifier6 = (notifier6 !== notifier) ? notifier : ~notifier6;
     notifier7 = (notifier7 !== notifier) ? notifier : ~notifier7;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fuz800ad_func i0sfuz800ad1q02x2_inst(.clk(clk_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7));
   `endif
   
   // spec_gates_begin
   not MGM_G56(MGM_W48,d1_delay);
   not MGM_G57(MGM_W49,d2_delay);
   and MGM_G58(MGM_W50,MGM_W49,MGM_W48);
   not MGM_G59(MGM_W51,d3_delay);
   and MGM_G60(MGM_W52,MGM_W51,MGM_W50);
   not MGM_G61(MGM_W53,d4_delay);
   and MGM_G62(MGM_W54,MGM_W53,MGM_W52);
   not MGM_G63(MGM_W55,d5_delay);
   and MGM_G64(MGM_W56,MGM_W55,MGM_W54);
   not MGM_G65(MGM_W57,d6_delay);
   and MGM_G66(MGM_W58,MGM_W57,MGM_W56);
   not MGM_G67(MGM_W59,d7_delay);
   and MGM_G68(MGM_W60,MGM_W59,MGM_W58);
   not MGM_G69(MGM_W61,d8_delay);
   and MGM_G70(MGM_W62,MGM_W61,MGM_W60);
   and MGM_G71(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb,ssb_delay,MGM_W62);
   not MGM_G72(MGM_W63,si_delay);
   not MGM_G73(MGM_W64,ssb_delay);
   and MGM_G74(ENABLE_NOT_si_AND_NOT_ssb,MGM_W64,MGM_W63);
   and MGM_G75(MGM_W65,d2_delay,d1_delay);
   and MGM_G76(MGM_W66,d3_delay,MGM_W65);
   and MGM_G77(MGM_W67,d4_delay,MGM_W66);
   and MGM_G78(MGM_W68,d5_delay,MGM_W67);
   and MGM_G79(MGM_W69,d6_delay,MGM_W68);
   and MGM_G80(MGM_W70,d7_delay,MGM_W69);
   and MGM_G81(MGM_W71,d8_delay,MGM_W70);
   and MGM_G82(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb,ssb_delay,MGM_W71);
   not MGM_G83(MGM_W72,ssb_delay);
   and MGM_G84(ENABLE_si_AND_NOT_ssb,MGM_W72,si_delay);
   not MGM_G85(ENABLE_NOT_ssb,ssb_delay);
   not MGM_G86(MGM_W73,d1_delay);
   not MGM_G87(MGM_W74,d2_delay);
   and MGM_G88(MGM_W75,MGM_W74,MGM_W73);
   not MGM_G89(MGM_W76,d3_delay);
   and MGM_G90(MGM_W77,MGM_W76,MGM_W75);
   not MGM_G91(MGM_W78,d4_delay);
   and MGM_G92(MGM_W79,MGM_W78,MGM_W77);
   not MGM_G93(MGM_W80,d5_delay);
   and MGM_G94(MGM_W81,MGM_W80,MGM_W79);
   not MGM_G95(MGM_W82,d6_delay);
   and MGM_G96(MGM_W83,MGM_W82,MGM_W81);
   not MGM_G97(MGM_W84,d7_delay);
   and MGM_G98(MGM_W85,MGM_W84,MGM_W83);
   not MGM_G99(MGM_W86,d8_delay);
   and MGM_G100(MGM_W87,MGM_W86,MGM_W85);
   and MGM_G101(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si,si_delay,MGM_W87);
   and MGM_G102(MGM_W88,d2_delay,d1_delay);
   and MGM_G103(MGM_W89,d3_delay,MGM_W88);
   and MGM_G104(MGM_W90,d4_delay,MGM_W89);
   and MGM_G105(MGM_W91,d5_delay,MGM_W90);
   and MGM_G106(MGM_W92,d6_delay,MGM_W91);
   and MGM_G107(MGM_W93,d7_delay,MGM_W92);
   and MGM_G108(MGM_W94,d8_delay,MGM_W93);
   not MGM_G109(MGM_W95,si_delay);
   and MGM_G110(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si,MGM_W95,MGM_W94);
   buf MGM_G111(ENABLE_ssb,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o7==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o7==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d1 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d2 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d3 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d4 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d5 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d5 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d6 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d6 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d7 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d7 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      negedge d8 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb == 1'b1),
      posedge d8 &&& (ENABLE_ssb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn003ad1d01x1( clk, d, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with asynchronous reset o = (rb*d) on rising clk
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn003ad_delay o =  IQ;
// 

   input clk, d, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `fvn003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W5,d_delay);
   and MGM_G13(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W5);
   and MGM_G14(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G15(ENABLE_rb,rb_delay);
   not MGM_G16(MGM_W6,clk_delay);
   not MGM_G17(MGM_W7,d_delay);
   and MGM_G18(ENABLE_NOT_clk_AND_NOT_d,MGM_W7,MGM_W6);
   not MGM_G19(MGM_W8,clk_delay);
   and MGM_G20(ENABLE_NOT_clk_AND_d,d_delay,MGM_W8);
   not MGM_G21(MGM_W9,d_delay);
   and MGM_G22(ENABLE_clk_AND_NOT_d,MGM_W9,clk_delay);
   and MGM_G23(ENABLE_clk_AND_d,d_delay,clk_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb == 1'b1),
      negedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb == 1'b1),
      posedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn003ad1d01x2( clk, d, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with asynchronous reset o = (rb*d) on rising clk
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn003ad_delay o =  IQ;
// 

   input clk, d, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `fvn003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W5,d_delay);
   and MGM_G13(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W5);
   and MGM_G14(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G15(ENABLE_rb,rb_delay);
   not MGM_G16(MGM_W6,clk_delay);
   not MGM_G17(MGM_W7,d_delay);
   and MGM_G18(ENABLE_NOT_clk_AND_NOT_d,MGM_W7,MGM_W6);
   not MGM_G19(MGM_W8,clk_delay);
   and MGM_G20(ENABLE_NOT_clk_AND_d,d_delay,MGM_W8);
   not MGM_G21(MGM_W9,d_delay);
   and MGM_G22(ENABLE_clk_AND_NOT_d,MGM_W9,clk_delay);
   and MGM_G23(ENABLE_clk_AND_d,d_delay,clk_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb == 1'b1),
      negedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb == 1'b1),
      posedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn003ad1d02x2( clk, d, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with asynchronous reset o = (rb*d) on rising clk
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn003ad_delay o =  IQ;
// 

   input clk, d, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `fvn003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn003ad_func i0sfvn003ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W5,d_delay);
   and MGM_G13(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W5);
   and MGM_G14(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G15(ENABLE_rb,rb_delay);
   not MGM_G16(MGM_W6,clk_delay);
   not MGM_G17(MGM_W7,d_delay);
   and MGM_G18(ENABLE_NOT_clk_AND_NOT_d,MGM_W7,MGM_W6);
   not MGM_G19(MGM_W8,clk_delay);
   and MGM_G20(ENABLE_NOT_clk_AND_d,d_delay,MGM_W8);
   not MGM_G21(MGM_W9,d_delay);
   and MGM_G22(ENABLE_clk_AND_NOT_d,MGM_W9,clk_delay);
   and MGM_G23(ENABLE_clk_AND_d,d_delay,clk_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb == 1'b1),
      negedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb == 1'b1),
      posedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn00bad1d01x1( clk, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with asynchronous reset & set o = {((d+s)*rb) on rising clk}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (posedge clk or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn00bad_delay o =  IQ;
// 

   input clk, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn00bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `fvn00bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      posedge clk &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      posedge clk &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn00bad1d01x2( clk, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with asynchronous reset & set o = {((d+s)*rb) on rising clk}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (posedge clk or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn00bad_delay o =  IQ;
// 

   input clk, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn00bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `fvn00bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      posedge clk &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      posedge clk &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn00bad1d02x2( clk, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with asynchronous reset & set o = {((d+s)*rb) on rising clk}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (posedge clk or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn00bad_delay o =  IQ;
// 

   input clk, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn00bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `fvn00bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn00bad_func i0sfvn00bad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      posedge clk &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      posedge clk &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn043ad1d01x1( clk, d, den, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and Re-circulating data-enable and asynch reset o = {((si*!ssb)+(ssb*(rb*((den*d)+(!den*o))))) on rising clk} so = {((si*!ssb)+(ssb*(rb*((den*d)+(!den*o))))) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= den ? d : IQ ;
// end
// end
// 
// assign `fvn043ad_delay o =  IQ;
// 

   input clk, d, den, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn043ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `fvn043ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G38(MGM_W24,d_delay);
   and MGM_G39(MGM_W25,den_delay,MGM_W24);
   and MGM_G40(ENABLE_NOT_d_AND_den_AND_rb,rb_delay,MGM_W25);
   and MGM_G41(MGM_W26,den_delay,d_delay);
   and MGM_G42(ENABLE_d_AND_den_AND_rb,rb_delay,MGM_W26);
   and MGM_G43(ENABLE_den_AND_rb,rb_delay,den_delay);
   not MGM_G44(MGM_W27,d_delay);
   and MGM_G45(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W27);
   and MGM_G46(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G47(ENABLE_den,den_delay);
   not MGM_G48(MGM_W28,clk_delay);
   not MGM_G49(MGM_W29,d_delay);
   and MGM_G50(MGM_W30,MGM_W29,MGM_W28);
   not MGM_G51(MGM_W31,den_delay);
   and MGM_G52(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den,MGM_W31,MGM_W30);
   not MGM_G53(MGM_W32,clk_delay);
   not MGM_G54(MGM_W33,d_delay);
   and MGM_G55(MGM_W34,MGM_W33,MGM_W32);
   and MGM_G56(ENABLE_NOT_clk_AND_NOT_d_AND_den,den_delay,MGM_W34);
   not MGM_G57(MGM_W35,clk_delay);
   and MGM_G58(MGM_W36,d_delay,MGM_W35);
   not MGM_G59(MGM_W37,den_delay);
   and MGM_G60(ENABLE_NOT_clk_AND_d_AND_NOT_den,MGM_W37,MGM_W36);
   not MGM_G61(MGM_W38,clk_delay);
   and MGM_G62(MGM_W39,d_delay,MGM_W38);
   and MGM_G63(ENABLE_NOT_clk_AND_d_AND_den,den_delay,MGM_W39);
   not MGM_G64(MGM_W40,d_delay);
   and MGM_G65(MGM_W41,MGM_W40,clk_delay);
   not MGM_G66(MGM_W42,den_delay);
   and MGM_G67(ENABLE_clk_AND_NOT_d_AND_NOT_den,MGM_W42,MGM_W41);
   not MGM_G68(MGM_W43,d_delay);
   and MGM_G69(MGM_W44,MGM_W43,clk_delay);
   and MGM_G70(ENABLE_clk_AND_NOT_d_AND_den,den_delay,MGM_W44);
   and MGM_G71(MGM_W45,d_delay,clk_delay);
   not MGM_G72(MGM_W46,den_delay);
   and MGM_G73(ENABLE_clk_AND_d_AND_NOT_den,MGM_W46,MGM_W45);
   and MGM_G74(MGM_W47,d_delay,clk_delay);
   and MGM_G75(ENABLE_clk_AND_d_AND_den,den_delay,MGM_W47);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_den == 1'b1),
      posedge clk &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn043ad1d01x2( clk, d, den, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and Re-circulating data-enable and asynch reset o = {((si*!ssb)+(ssb*(rb*((den*d)+(!den*o))))) on rising clk} so = {((si*!ssb)+(ssb*(rb*((den*d)+(!den*o))))) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= den ? d : IQ ;
// end
// end
// 
// assign `fvn043ad_delay o =  IQ;
// 

   input clk, d, den, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn043ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `fvn043ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G38(MGM_W24,d_delay);
   and MGM_G39(MGM_W25,den_delay,MGM_W24);
   and MGM_G40(ENABLE_NOT_d_AND_den_AND_rb,rb_delay,MGM_W25);
   and MGM_G41(MGM_W26,den_delay,d_delay);
   and MGM_G42(ENABLE_d_AND_den_AND_rb,rb_delay,MGM_W26);
   and MGM_G43(ENABLE_den_AND_rb,rb_delay,den_delay);
   not MGM_G44(MGM_W27,d_delay);
   and MGM_G45(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W27);
   and MGM_G46(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G47(ENABLE_den,den_delay);
   not MGM_G48(MGM_W28,clk_delay);
   not MGM_G49(MGM_W29,d_delay);
   and MGM_G50(MGM_W30,MGM_W29,MGM_W28);
   not MGM_G51(MGM_W31,den_delay);
   and MGM_G52(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den,MGM_W31,MGM_W30);
   not MGM_G53(MGM_W32,clk_delay);
   not MGM_G54(MGM_W33,d_delay);
   and MGM_G55(MGM_W34,MGM_W33,MGM_W32);
   and MGM_G56(ENABLE_NOT_clk_AND_NOT_d_AND_den,den_delay,MGM_W34);
   not MGM_G57(MGM_W35,clk_delay);
   and MGM_G58(MGM_W36,d_delay,MGM_W35);
   not MGM_G59(MGM_W37,den_delay);
   and MGM_G60(ENABLE_NOT_clk_AND_d_AND_NOT_den,MGM_W37,MGM_W36);
   not MGM_G61(MGM_W38,clk_delay);
   and MGM_G62(MGM_W39,d_delay,MGM_W38);
   and MGM_G63(ENABLE_NOT_clk_AND_d_AND_den,den_delay,MGM_W39);
   not MGM_G64(MGM_W40,d_delay);
   and MGM_G65(MGM_W41,MGM_W40,clk_delay);
   not MGM_G66(MGM_W42,den_delay);
   and MGM_G67(ENABLE_clk_AND_NOT_d_AND_NOT_den,MGM_W42,MGM_W41);
   not MGM_G68(MGM_W43,d_delay);
   and MGM_G69(MGM_W44,MGM_W43,clk_delay);
   and MGM_G70(ENABLE_clk_AND_NOT_d_AND_den,den_delay,MGM_W44);
   and MGM_G71(MGM_W45,d_delay,clk_delay);
   not MGM_G72(MGM_W46,den_delay);
   and MGM_G73(ENABLE_clk_AND_d_AND_NOT_den,MGM_W46,MGM_W45);
   and MGM_G74(MGM_W47,d_delay,clk_delay);
   and MGM_G75(ENABLE_clk_AND_d_AND_den,den_delay,MGM_W47);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_den == 1'b1),
      posedge clk &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn043ad1d02x2( clk, d, den, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and Re-circulating data-enable and asynch reset o = {((si*!ssb)+(ssb*(rb*((den*d)+(!den*o))))) on rising clk} so = {((si*!ssb)+(ssb*(rb*((den*d)+(!den*o))))) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= den ? d : IQ ;
// end
// end
// 
// assign `fvn043ad_delay o =  IQ;
// 

   input clk, d, den, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn043ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `fvn043ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn043ad_func i0sfvn043ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G38(MGM_W24,d_delay);
   and MGM_G39(MGM_W25,den_delay,MGM_W24);
   and MGM_G40(ENABLE_NOT_d_AND_den_AND_rb,rb_delay,MGM_W25);
   and MGM_G41(MGM_W26,den_delay,d_delay);
   and MGM_G42(ENABLE_d_AND_den_AND_rb,rb_delay,MGM_W26);
   and MGM_G43(ENABLE_den_AND_rb,rb_delay,den_delay);
   not MGM_G44(MGM_W27,d_delay);
   and MGM_G45(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W27);
   and MGM_G46(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G47(ENABLE_den,den_delay);
   not MGM_G48(MGM_W28,clk_delay);
   not MGM_G49(MGM_W29,d_delay);
   and MGM_G50(MGM_W30,MGM_W29,MGM_W28);
   not MGM_G51(MGM_W31,den_delay);
   and MGM_G52(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den,MGM_W31,MGM_W30);
   not MGM_G53(MGM_W32,clk_delay);
   not MGM_G54(MGM_W33,d_delay);
   and MGM_G55(MGM_W34,MGM_W33,MGM_W32);
   and MGM_G56(ENABLE_NOT_clk_AND_NOT_d_AND_den,den_delay,MGM_W34);
   not MGM_G57(MGM_W35,clk_delay);
   and MGM_G58(MGM_W36,d_delay,MGM_W35);
   not MGM_G59(MGM_W37,den_delay);
   and MGM_G60(ENABLE_NOT_clk_AND_d_AND_NOT_den,MGM_W37,MGM_W36);
   not MGM_G61(MGM_W38,clk_delay);
   and MGM_G62(MGM_W39,d_delay,MGM_W38);
   and MGM_G63(ENABLE_NOT_clk_AND_d_AND_den,den_delay,MGM_W39);
   not MGM_G64(MGM_W40,d_delay);
   and MGM_G65(MGM_W41,MGM_W40,clk_delay);
   not MGM_G66(MGM_W42,den_delay);
   and MGM_G67(ENABLE_clk_AND_NOT_d_AND_NOT_den,MGM_W42,MGM_W41);
   not MGM_G68(MGM_W43,d_delay);
   and MGM_G69(MGM_W44,MGM_W43,clk_delay);
   and MGM_G70(ENABLE_clk_AND_NOT_d_AND_den,den_delay,MGM_W44);
   and MGM_G71(MGM_W45,d_delay,clk_delay);
   not MGM_G72(MGM_W46,den_delay);
   and MGM_G73(ENABLE_clk_AND_d_AND_NOT_den,MGM_W46,MGM_W45);
   and MGM_G74(MGM_W47,d_delay,clk_delay);
   and MGM_G75(ENABLE_clk_AND_d_AND_den,den_delay,MGM_W47);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_den == 1'b1),
      posedge clk &&& (ENABLE_den == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn08bad1d01x1( clkb, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with clkb and asynchronous reset & set o = {((d+s)*rb) on falling clkb}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (negedge clkb or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn08bad_delay o =  IQ;
// 

   input clkb, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn08bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `fvn08bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      negedge clkb &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb,negedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      negedge clkb &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s,negedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn08bad1d01x2( clkb, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with clkb and asynchronous reset & set o = {((d+s)*rb) on falling clkb}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (negedge clkb or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn08bad_delay o =  IQ;
// 

   input clkb, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn08bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `fvn08bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      negedge clkb &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb,negedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      negedge clkb &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s,negedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvn08bad1d02x2( clkb, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap non-scan DFF with clkb and asynchronous reset & set o = {((d+s)*rb) on falling clkb}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (negedge clkb or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= d ;
// end
// end
// 
// assign `fvn08bad_delay o =  IQ;
// 

   input clkb, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvn08bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `fvn08bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvn08bad_func i0sfvn08bad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      negedge clkb &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb,negedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      negedge clkb &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s,negedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvy003ad1d01x1( clk, d, o, rb, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with asynch reset o = {((si*!ssb)+(rb*d*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvy003ad_delay o =  IQ;
// 

   input clk, d, rb, si, ssb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvy003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.ssb(ssb),.notifier(1'b0));
      assign `fvy003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G146(MGM_W112,d_delay);
   and MGM_G147(MGM_W113,rb_delay,MGM_W112);
   not MGM_G148(MGM_W114,si_delay);
   and MGM_G149(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G150(MGM_W116,ssb_delay);
   and MGM_G151(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G152(MGM_W117,d_delay);
   and MGM_G153(MGM_W118,rb_delay,MGM_W117);
   not MGM_G154(MGM_W119,si_delay);
   and MGM_G155(MGM_W120,MGM_W119,MGM_W118);
   and MGM_G156(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W120);
   not MGM_G157(MGM_W121,d_delay);
   and MGM_G158(MGM_W122,rb_delay,MGM_W121);
   and MGM_G159(MGM_W123,si_delay,MGM_W122);
   not MGM_G160(MGM_W124,ssb_delay);
   and MGM_G161(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G162(MGM_W125,d_delay);
   and MGM_G163(MGM_W126,rb_delay,MGM_W125);
   and MGM_G164(MGM_W127,si_delay,MGM_W126);
   and MGM_G165(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W127);
   and MGM_G166(MGM_W128,rb_delay,d_delay);
   not MGM_G167(MGM_W129,si_delay);
   and MGM_G168(MGM_W130,MGM_W129,MGM_W128);
   not MGM_G169(MGM_W131,ssb_delay);
   and MGM_G170(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W131,MGM_W130);
   and MGM_G171(MGM_W132,rb_delay,d_delay);
   not MGM_G172(MGM_W133,si_delay);
   and MGM_G173(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G174(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G175(MGM_W135,rb_delay,d_delay);
   and MGM_G176(MGM_W136,si_delay,MGM_W135);
   not MGM_G177(MGM_W137,ssb_delay);
   and MGM_G178(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W137,MGM_W136);
   and MGM_G179(MGM_W138,rb_delay,d_delay);
   and MGM_G180(MGM_W139,si_delay,MGM_W138);
   and MGM_G181(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W139);
   not MGM_G182(MGM_W140,si_delay);
   and MGM_G183(MGM_W141,MGM_W140,rb_delay);
   and MGM_G184(ENABLE_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W141);
   and MGM_G185(MGM_W142,si_delay,rb_delay);
   and MGM_G186(ENABLE_rb_AND_si_AND_ssb,ssb_delay,MGM_W142);
   not MGM_G187(MGM_W143,d_delay);
   and MGM_G188(MGM_W144,si_delay,MGM_W143);
   not MGM_G189(MGM_W145,ssb_delay);
   and MGM_G190(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W146,si_delay);
   and MGM_G192(MGM_W147,MGM_W146,d_delay);
   and MGM_G193(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   and MGM_G194(MGM_W148,si_delay,d_delay);
   not MGM_G195(MGM_W149,ssb_delay);
   and MGM_G196(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W149,MGM_W148);
   and MGM_G197(MGM_W150,si_delay,d_delay);
   and MGM_G198(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G199(MGM_W151,clk_delay);
   not MGM_G200(MGM_W152,d_delay);
   and MGM_G201(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G202(MGM_W154,si_delay);
   and MGM_G203(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G204(MGM_W156,ssb_delay);
   and MGM_G205(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G206(MGM_W157,clk_delay);
   not MGM_G207(MGM_W158,d_delay);
   and MGM_G208(MGM_W159,MGM_W158,MGM_W157);
   not MGM_G209(MGM_W160,si_delay);
   and MGM_G210(MGM_W161,MGM_W160,MGM_W159);
   and MGM_G211(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G212(MGM_W162,clk_delay);
   not MGM_G213(MGM_W163,d_delay);
   and MGM_G214(MGM_W164,MGM_W163,MGM_W162);
   and MGM_G215(MGM_W165,si_delay,MGM_W164);
   not MGM_G216(MGM_W166,ssb_delay);
   and MGM_G217(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G218(MGM_W167,clk_delay);
   not MGM_G219(MGM_W168,d_delay);
   and MGM_G220(MGM_W169,MGM_W168,MGM_W167);
   and MGM_G221(MGM_W170,si_delay,MGM_W169);
   and MGM_G222(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G223(MGM_W171,clk_delay);
   and MGM_G224(MGM_W172,d_delay,MGM_W171);
   not MGM_G225(MGM_W173,si_delay);
   and MGM_G226(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G227(MGM_W175,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W175,MGM_W174);
   not MGM_G229(MGM_W176,clk_delay);
   and MGM_G230(MGM_W177,d_delay,MGM_W176);
   not MGM_G231(MGM_W178,si_delay);
   and MGM_G232(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W179);
   not MGM_G234(MGM_W180,clk_delay);
   and MGM_G235(MGM_W181,d_delay,MGM_W180);
   and MGM_G236(MGM_W182,si_delay,MGM_W181);
   not MGM_G237(MGM_W183,ssb_delay);
   and MGM_G238(ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W183,MGM_W182);
   not MGM_G239(MGM_W184,clk_delay);
   and MGM_G240(MGM_W185,d_delay,MGM_W184);
   and MGM_G241(MGM_W186,si_delay,MGM_W185);
   and MGM_G242(ENABLE_NOT_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G243(MGM_W187,d_delay);
   and MGM_G244(MGM_W188,MGM_W187,clk_delay);
   not MGM_G245(MGM_W189,si_delay);
   and MGM_G246(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G247(MGM_W191,ssb_delay);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G249(MGM_W192,d_delay);
   and MGM_G250(MGM_W193,MGM_W192,clk_delay);
   not MGM_G251(MGM_W194,si_delay);
   and MGM_G252(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G253(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W195);
   not MGM_G254(MGM_W196,d_delay);
   and MGM_G255(MGM_W197,MGM_W196,clk_delay);
   and MGM_G256(MGM_W198,si_delay,MGM_W197);
   not MGM_G257(MGM_W199,ssb_delay);
   and MGM_G258(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W199,MGM_W198);
   not MGM_G259(MGM_W200,d_delay);
   and MGM_G260(MGM_W201,MGM_W200,clk_delay);
   and MGM_G261(MGM_W202,si_delay,MGM_W201);
   and MGM_G262(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W202);
   and MGM_G263(MGM_W203,d_delay,clk_delay);
   not MGM_G264(MGM_W204,si_delay);
   and MGM_G265(MGM_W205,MGM_W204,MGM_W203);
   not MGM_G266(MGM_W206,ssb_delay);
   and MGM_G267(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W206,MGM_W205);
   and MGM_G268(MGM_W207,d_delay,clk_delay);
   not MGM_G269(MGM_W208,si_delay);
   and MGM_G270(MGM_W209,MGM_W208,MGM_W207);
   and MGM_G271(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W209);
   and MGM_G272(MGM_W210,d_delay,clk_delay);
   and MGM_G273(MGM_W211,si_delay,MGM_W210);
   not MGM_G274(MGM_W212,ssb_delay);
   and MGM_G275(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   and MGM_G276(MGM_W213,d_delay,clk_delay);
   and MGM_G277(MGM_W214,si_delay,MGM_W213);
   and MGM_G278(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W214);
   not MGM_G279(MGM_W215,d_delay);
   and MGM_G280(MGM_W216,rb_delay,MGM_W215);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_rb_AND_NOT_ssb,MGM_W217,MGM_W216);
   and MGM_G283(MGM_W218,rb_delay,d_delay);
   not MGM_G284(MGM_W219,ssb_delay);
   and MGM_G285(ENABLE_d_AND_rb_AND_NOT_ssb,MGM_W219,MGM_W218);
   not MGM_G286(MGM_W220,d_delay);
   and MGM_G287(MGM_W221,rb_delay,MGM_W220);
   and MGM_G288(ENABLE_NOT_d_AND_rb_AND_si,si_delay,MGM_W221);
   and MGM_G289(MGM_W222,rb_delay,d_delay);
   not MGM_G290(MGM_W223,si_delay);
   and MGM_G291(ENABLE_d_AND_rb_AND_NOT_si,MGM_W223,MGM_W222);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvy003ad1d01x2( clk, d, o, rb, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with asynch reset o = {((si*!ssb)+(rb*d*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvy003ad_delay o =  IQ;
// 

   input clk, d, rb, si, ssb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvy003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.ssb(ssb),.notifier(1'b0));
      assign `fvy003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G146(MGM_W112,d_delay);
   and MGM_G147(MGM_W113,rb_delay,MGM_W112);
   not MGM_G148(MGM_W114,si_delay);
   and MGM_G149(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G150(MGM_W116,ssb_delay);
   and MGM_G151(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G152(MGM_W117,d_delay);
   and MGM_G153(MGM_W118,rb_delay,MGM_W117);
   not MGM_G154(MGM_W119,si_delay);
   and MGM_G155(MGM_W120,MGM_W119,MGM_W118);
   and MGM_G156(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W120);
   not MGM_G157(MGM_W121,d_delay);
   and MGM_G158(MGM_W122,rb_delay,MGM_W121);
   and MGM_G159(MGM_W123,si_delay,MGM_W122);
   not MGM_G160(MGM_W124,ssb_delay);
   and MGM_G161(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G162(MGM_W125,d_delay);
   and MGM_G163(MGM_W126,rb_delay,MGM_W125);
   and MGM_G164(MGM_W127,si_delay,MGM_W126);
   and MGM_G165(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W127);
   and MGM_G166(MGM_W128,rb_delay,d_delay);
   not MGM_G167(MGM_W129,si_delay);
   and MGM_G168(MGM_W130,MGM_W129,MGM_W128);
   not MGM_G169(MGM_W131,ssb_delay);
   and MGM_G170(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W131,MGM_W130);
   and MGM_G171(MGM_W132,rb_delay,d_delay);
   not MGM_G172(MGM_W133,si_delay);
   and MGM_G173(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G174(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G175(MGM_W135,rb_delay,d_delay);
   and MGM_G176(MGM_W136,si_delay,MGM_W135);
   not MGM_G177(MGM_W137,ssb_delay);
   and MGM_G178(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W137,MGM_W136);
   and MGM_G179(MGM_W138,rb_delay,d_delay);
   and MGM_G180(MGM_W139,si_delay,MGM_W138);
   and MGM_G181(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W139);
   not MGM_G182(MGM_W140,si_delay);
   and MGM_G183(MGM_W141,MGM_W140,rb_delay);
   and MGM_G184(ENABLE_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W141);
   and MGM_G185(MGM_W142,si_delay,rb_delay);
   and MGM_G186(ENABLE_rb_AND_si_AND_ssb,ssb_delay,MGM_W142);
   not MGM_G187(MGM_W143,d_delay);
   and MGM_G188(MGM_W144,si_delay,MGM_W143);
   not MGM_G189(MGM_W145,ssb_delay);
   and MGM_G190(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W146,si_delay);
   and MGM_G192(MGM_W147,MGM_W146,d_delay);
   and MGM_G193(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   and MGM_G194(MGM_W148,si_delay,d_delay);
   not MGM_G195(MGM_W149,ssb_delay);
   and MGM_G196(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W149,MGM_W148);
   and MGM_G197(MGM_W150,si_delay,d_delay);
   and MGM_G198(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G199(MGM_W151,clk_delay);
   not MGM_G200(MGM_W152,d_delay);
   and MGM_G201(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G202(MGM_W154,si_delay);
   and MGM_G203(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G204(MGM_W156,ssb_delay);
   and MGM_G205(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G206(MGM_W157,clk_delay);
   not MGM_G207(MGM_W158,d_delay);
   and MGM_G208(MGM_W159,MGM_W158,MGM_W157);
   not MGM_G209(MGM_W160,si_delay);
   and MGM_G210(MGM_W161,MGM_W160,MGM_W159);
   and MGM_G211(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G212(MGM_W162,clk_delay);
   not MGM_G213(MGM_W163,d_delay);
   and MGM_G214(MGM_W164,MGM_W163,MGM_W162);
   and MGM_G215(MGM_W165,si_delay,MGM_W164);
   not MGM_G216(MGM_W166,ssb_delay);
   and MGM_G217(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G218(MGM_W167,clk_delay);
   not MGM_G219(MGM_W168,d_delay);
   and MGM_G220(MGM_W169,MGM_W168,MGM_W167);
   and MGM_G221(MGM_W170,si_delay,MGM_W169);
   and MGM_G222(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G223(MGM_W171,clk_delay);
   and MGM_G224(MGM_W172,d_delay,MGM_W171);
   not MGM_G225(MGM_W173,si_delay);
   and MGM_G226(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G227(MGM_W175,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W175,MGM_W174);
   not MGM_G229(MGM_W176,clk_delay);
   and MGM_G230(MGM_W177,d_delay,MGM_W176);
   not MGM_G231(MGM_W178,si_delay);
   and MGM_G232(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W179);
   not MGM_G234(MGM_W180,clk_delay);
   and MGM_G235(MGM_W181,d_delay,MGM_W180);
   and MGM_G236(MGM_W182,si_delay,MGM_W181);
   not MGM_G237(MGM_W183,ssb_delay);
   and MGM_G238(ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W183,MGM_W182);
   not MGM_G239(MGM_W184,clk_delay);
   and MGM_G240(MGM_W185,d_delay,MGM_W184);
   and MGM_G241(MGM_W186,si_delay,MGM_W185);
   and MGM_G242(ENABLE_NOT_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G243(MGM_W187,d_delay);
   and MGM_G244(MGM_W188,MGM_W187,clk_delay);
   not MGM_G245(MGM_W189,si_delay);
   and MGM_G246(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G247(MGM_W191,ssb_delay);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G249(MGM_W192,d_delay);
   and MGM_G250(MGM_W193,MGM_W192,clk_delay);
   not MGM_G251(MGM_W194,si_delay);
   and MGM_G252(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G253(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W195);
   not MGM_G254(MGM_W196,d_delay);
   and MGM_G255(MGM_W197,MGM_W196,clk_delay);
   and MGM_G256(MGM_W198,si_delay,MGM_W197);
   not MGM_G257(MGM_W199,ssb_delay);
   and MGM_G258(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W199,MGM_W198);
   not MGM_G259(MGM_W200,d_delay);
   and MGM_G260(MGM_W201,MGM_W200,clk_delay);
   and MGM_G261(MGM_W202,si_delay,MGM_W201);
   and MGM_G262(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W202);
   and MGM_G263(MGM_W203,d_delay,clk_delay);
   not MGM_G264(MGM_W204,si_delay);
   and MGM_G265(MGM_W205,MGM_W204,MGM_W203);
   not MGM_G266(MGM_W206,ssb_delay);
   and MGM_G267(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W206,MGM_W205);
   and MGM_G268(MGM_W207,d_delay,clk_delay);
   not MGM_G269(MGM_W208,si_delay);
   and MGM_G270(MGM_W209,MGM_W208,MGM_W207);
   and MGM_G271(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W209);
   and MGM_G272(MGM_W210,d_delay,clk_delay);
   and MGM_G273(MGM_W211,si_delay,MGM_W210);
   not MGM_G274(MGM_W212,ssb_delay);
   and MGM_G275(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   and MGM_G276(MGM_W213,d_delay,clk_delay);
   and MGM_G277(MGM_W214,si_delay,MGM_W213);
   and MGM_G278(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W214);
   not MGM_G279(MGM_W215,d_delay);
   and MGM_G280(MGM_W216,rb_delay,MGM_W215);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_rb_AND_NOT_ssb,MGM_W217,MGM_W216);
   and MGM_G283(MGM_W218,rb_delay,d_delay);
   not MGM_G284(MGM_W219,ssb_delay);
   and MGM_G285(ENABLE_d_AND_rb_AND_NOT_ssb,MGM_W219,MGM_W218);
   not MGM_G286(MGM_W220,d_delay);
   and MGM_G287(MGM_W221,rb_delay,MGM_W220);
   and MGM_G288(ENABLE_NOT_d_AND_rb_AND_si,si_delay,MGM_W221);
   and MGM_G289(MGM_W222,rb_delay,d_delay);
   not MGM_G290(MGM_W223,si_delay);
   and MGM_G291(ENABLE_d_AND_rb_AND_NOT_si,MGM_W223,MGM_W222);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvy003ad1d02x2( clk, d, o, rb, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with asynch reset o = {((si*!ssb)+(rb*d*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvy003ad_delay o =  IQ;
// 

   input clk, d, rb, si, ssb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvy003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.ssb(ssb),.notifier(1'b0));
      assign `fvy003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvy003ad_func i0sfvy003ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G146(MGM_W112,d_delay);
   and MGM_G147(MGM_W113,rb_delay,MGM_W112);
   not MGM_G148(MGM_W114,si_delay);
   and MGM_G149(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G150(MGM_W116,ssb_delay);
   and MGM_G151(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G152(MGM_W117,d_delay);
   and MGM_G153(MGM_W118,rb_delay,MGM_W117);
   not MGM_G154(MGM_W119,si_delay);
   and MGM_G155(MGM_W120,MGM_W119,MGM_W118);
   and MGM_G156(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W120);
   not MGM_G157(MGM_W121,d_delay);
   and MGM_G158(MGM_W122,rb_delay,MGM_W121);
   and MGM_G159(MGM_W123,si_delay,MGM_W122);
   not MGM_G160(MGM_W124,ssb_delay);
   and MGM_G161(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G162(MGM_W125,d_delay);
   and MGM_G163(MGM_W126,rb_delay,MGM_W125);
   and MGM_G164(MGM_W127,si_delay,MGM_W126);
   and MGM_G165(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W127);
   and MGM_G166(MGM_W128,rb_delay,d_delay);
   not MGM_G167(MGM_W129,si_delay);
   and MGM_G168(MGM_W130,MGM_W129,MGM_W128);
   not MGM_G169(MGM_W131,ssb_delay);
   and MGM_G170(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W131,MGM_W130);
   and MGM_G171(MGM_W132,rb_delay,d_delay);
   not MGM_G172(MGM_W133,si_delay);
   and MGM_G173(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G174(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G175(MGM_W135,rb_delay,d_delay);
   and MGM_G176(MGM_W136,si_delay,MGM_W135);
   not MGM_G177(MGM_W137,ssb_delay);
   and MGM_G178(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W137,MGM_W136);
   and MGM_G179(MGM_W138,rb_delay,d_delay);
   and MGM_G180(MGM_W139,si_delay,MGM_W138);
   and MGM_G181(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W139);
   not MGM_G182(MGM_W140,si_delay);
   and MGM_G183(MGM_W141,MGM_W140,rb_delay);
   and MGM_G184(ENABLE_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W141);
   and MGM_G185(MGM_W142,si_delay,rb_delay);
   and MGM_G186(ENABLE_rb_AND_si_AND_ssb,ssb_delay,MGM_W142);
   not MGM_G187(MGM_W143,d_delay);
   and MGM_G188(MGM_W144,si_delay,MGM_W143);
   not MGM_G189(MGM_W145,ssb_delay);
   and MGM_G190(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W146,si_delay);
   and MGM_G192(MGM_W147,MGM_W146,d_delay);
   and MGM_G193(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   and MGM_G194(MGM_W148,si_delay,d_delay);
   not MGM_G195(MGM_W149,ssb_delay);
   and MGM_G196(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W149,MGM_W148);
   and MGM_G197(MGM_W150,si_delay,d_delay);
   and MGM_G198(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G199(MGM_W151,clk_delay);
   not MGM_G200(MGM_W152,d_delay);
   and MGM_G201(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G202(MGM_W154,si_delay);
   and MGM_G203(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G204(MGM_W156,ssb_delay);
   and MGM_G205(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G206(MGM_W157,clk_delay);
   not MGM_G207(MGM_W158,d_delay);
   and MGM_G208(MGM_W159,MGM_W158,MGM_W157);
   not MGM_G209(MGM_W160,si_delay);
   and MGM_G210(MGM_W161,MGM_W160,MGM_W159);
   and MGM_G211(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G212(MGM_W162,clk_delay);
   not MGM_G213(MGM_W163,d_delay);
   and MGM_G214(MGM_W164,MGM_W163,MGM_W162);
   and MGM_G215(MGM_W165,si_delay,MGM_W164);
   not MGM_G216(MGM_W166,ssb_delay);
   and MGM_G217(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G218(MGM_W167,clk_delay);
   not MGM_G219(MGM_W168,d_delay);
   and MGM_G220(MGM_W169,MGM_W168,MGM_W167);
   and MGM_G221(MGM_W170,si_delay,MGM_W169);
   and MGM_G222(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G223(MGM_W171,clk_delay);
   and MGM_G224(MGM_W172,d_delay,MGM_W171);
   not MGM_G225(MGM_W173,si_delay);
   and MGM_G226(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G227(MGM_W175,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W175,MGM_W174);
   not MGM_G229(MGM_W176,clk_delay);
   and MGM_G230(MGM_W177,d_delay,MGM_W176);
   not MGM_G231(MGM_W178,si_delay);
   and MGM_G232(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W179);
   not MGM_G234(MGM_W180,clk_delay);
   and MGM_G235(MGM_W181,d_delay,MGM_W180);
   and MGM_G236(MGM_W182,si_delay,MGM_W181);
   not MGM_G237(MGM_W183,ssb_delay);
   and MGM_G238(ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W183,MGM_W182);
   not MGM_G239(MGM_W184,clk_delay);
   and MGM_G240(MGM_W185,d_delay,MGM_W184);
   and MGM_G241(MGM_W186,si_delay,MGM_W185);
   and MGM_G242(ENABLE_NOT_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G243(MGM_W187,d_delay);
   and MGM_G244(MGM_W188,MGM_W187,clk_delay);
   not MGM_G245(MGM_W189,si_delay);
   and MGM_G246(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G247(MGM_W191,ssb_delay);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G249(MGM_W192,d_delay);
   and MGM_G250(MGM_W193,MGM_W192,clk_delay);
   not MGM_G251(MGM_W194,si_delay);
   and MGM_G252(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G253(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W195);
   not MGM_G254(MGM_W196,d_delay);
   and MGM_G255(MGM_W197,MGM_W196,clk_delay);
   and MGM_G256(MGM_W198,si_delay,MGM_W197);
   not MGM_G257(MGM_W199,ssb_delay);
   and MGM_G258(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W199,MGM_W198);
   not MGM_G259(MGM_W200,d_delay);
   and MGM_G260(MGM_W201,MGM_W200,clk_delay);
   and MGM_G261(MGM_W202,si_delay,MGM_W201);
   and MGM_G262(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W202);
   and MGM_G263(MGM_W203,d_delay,clk_delay);
   not MGM_G264(MGM_W204,si_delay);
   and MGM_G265(MGM_W205,MGM_W204,MGM_W203);
   not MGM_G266(MGM_W206,ssb_delay);
   and MGM_G267(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W206,MGM_W205);
   and MGM_G268(MGM_W207,d_delay,clk_delay);
   not MGM_G269(MGM_W208,si_delay);
   and MGM_G270(MGM_W209,MGM_W208,MGM_W207);
   and MGM_G271(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W209);
   and MGM_G272(MGM_W210,d_delay,clk_delay);
   and MGM_G273(MGM_W211,si_delay,MGM_W210);
   not MGM_G274(MGM_W212,ssb_delay);
   and MGM_G275(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   and MGM_G276(MGM_W213,d_delay,clk_delay);
   and MGM_G277(MGM_W214,si_delay,MGM_W213);
   and MGM_G278(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W214);
   not MGM_G279(MGM_W215,d_delay);
   and MGM_G280(MGM_W216,rb_delay,MGM_W215);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_rb_AND_NOT_ssb,MGM_W217,MGM_W216);
   and MGM_G283(MGM_W218,rb_delay,d_delay);
   not MGM_G284(MGM_W219,ssb_delay);
   and MGM_G285(ENABLE_d_AND_rb_AND_NOT_ssb,MGM_W219,MGM_W218);
   not MGM_G286(MGM_W220,d_delay);
   and MGM_G287(MGM_W221,rb_delay,MGM_W220);
   and MGM_G288(ENABLE_NOT_d_AND_rb_AND_si,si_delay,MGM_W221);
   and MGM_G289(MGM_W222,rb_delay,d_delay);
   not MGM_G290(MGM_W223,si_delay);
   and MGM_G291(ENABLE_d_AND_rb_AND_NOT_si,MGM_W223,MGM_W222);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz003ad1d01x1( clk, d, o, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and asynch reset o = {((si*!ssb)+(rb*d*ssb)) on rising clk} so = {((si*!ssb)+(rb*d*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz003ad_delay o =  IQ;
// assign `fvz003ad_delay so =  IQ;
// 

   input clk, d, rb, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz003ad_delay o_random_init = o_tmp ;
      assign `fvz003ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz003ad_delay o_random_init = o_tmp ;
      assign `fvz003ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G146(MGM_W112,d_delay);
   and MGM_G147(MGM_W113,rb_delay,MGM_W112);
   not MGM_G148(MGM_W114,si_delay);
   and MGM_G149(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G150(MGM_W116,ssb_delay);
   and MGM_G151(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G152(MGM_W117,d_delay);
   and MGM_G153(MGM_W118,rb_delay,MGM_W117);
   not MGM_G154(MGM_W119,si_delay);
   and MGM_G155(MGM_W120,MGM_W119,MGM_W118);
   and MGM_G156(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W120);
   not MGM_G157(MGM_W121,d_delay);
   and MGM_G158(MGM_W122,rb_delay,MGM_W121);
   and MGM_G159(MGM_W123,si_delay,MGM_W122);
   not MGM_G160(MGM_W124,ssb_delay);
   and MGM_G161(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G162(MGM_W125,d_delay);
   and MGM_G163(MGM_W126,rb_delay,MGM_W125);
   and MGM_G164(MGM_W127,si_delay,MGM_W126);
   and MGM_G165(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W127);
   and MGM_G166(MGM_W128,rb_delay,d_delay);
   not MGM_G167(MGM_W129,si_delay);
   and MGM_G168(MGM_W130,MGM_W129,MGM_W128);
   not MGM_G169(MGM_W131,ssb_delay);
   and MGM_G170(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W131,MGM_W130);
   and MGM_G171(MGM_W132,rb_delay,d_delay);
   not MGM_G172(MGM_W133,si_delay);
   and MGM_G173(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G174(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G175(MGM_W135,rb_delay,d_delay);
   and MGM_G176(MGM_W136,si_delay,MGM_W135);
   not MGM_G177(MGM_W137,ssb_delay);
   and MGM_G178(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W137,MGM_W136);
   and MGM_G179(MGM_W138,rb_delay,d_delay);
   and MGM_G180(MGM_W139,si_delay,MGM_W138);
   and MGM_G181(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W139);
   not MGM_G182(MGM_W140,si_delay);
   and MGM_G183(MGM_W141,MGM_W140,rb_delay);
   and MGM_G184(ENABLE_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W141);
   and MGM_G185(MGM_W142,si_delay,rb_delay);
   and MGM_G186(ENABLE_rb_AND_si_AND_ssb,ssb_delay,MGM_W142);
   not MGM_G187(MGM_W143,d_delay);
   and MGM_G188(MGM_W144,si_delay,MGM_W143);
   not MGM_G189(MGM_W145,ssb_delay);
   and MGM_G190(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W146,si_delay);
   and MGM_G192(MGM_W147,MGM_W146,d_delay);
   and MGM_G193(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   and MGM_G194(MGM_W148,si_delay,d_delay);
   not MGM_G195(MGM_W149,ssb_delay);
   and MGM_G196(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W149,MGM_W148);
   and MGM_G197(MGM_W150,si_delay,d_delay);
   and MGM_G198(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G199(MGM_W151,clk_delay);
   not MGM_G200(MGM_W152,d_delay);
   and MGM_G201(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G202(MGM_W154,si_delay);
   and MGM_G203(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G204(MGM_W156,ssb_delay);
   and MGM_G205(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G206(MGM_W157,clk_delay);
   not MGM_G207(MGM_W158,d_delay);
   and MGM_G208(MGM_W159,MGM_W158,MGM_W157);
   not MGM_G209(MGM_W160,si_delay);
   and MGM_G210(MGM_W161,MGM_W160,MGM_W159);
   and MGM_G211(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G212(MGM_W162,clk_delay);
   not MGM_G213(MGM_W163,d_delay);
   and MGM_G214(MGM_W164,MGM_W163,MGM_W162);
   and MGM_G215(MGM_W165,si_delay,MGM_W164);
   not MGM_G216(MGM_W166,ssb_delay);
   and MGM_G217(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G218(MGM_W167,clk_delay);
   not MGM_G219(MGM_W168,d_delay);
   and MGM_G220(MGM_W169,MGM_W168,MGM_W167);
   and MGM_G221(MGM_W170,si_delay,MGM_W169);
   and MGM_G222(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G223(MGM_W171,clk_delay);
   and MGM_G224(MGM_W172,d_delay,MGM_W171);
   not MGM_G225(MGM_W173,si_delay);
   and MGM_G226(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G227(MGM_W175,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W175,MGM_W174);
   not MGM_G229(MGM_W176,clk_delay);
   and MGM_G230(MGM_W177,d_delay,MGM_W176);
   not MGM_G231(MGM_W178,si_delay);
   and MGM_G232(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W179);
   not MGM_G234(MGM_W180,clk_delay);
   and MGM_G235(MGM_W181,d_delay,MGM_W180);
   and MGM_G236(MGM_W182,si_delay,MGM_W181);
   not MGM_G237(MGM_W183,ssb_delay);
   and MGM_G238(ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W183,MGM_W182);
   not MGM_G239(MGM_W184,clk_delay);
   and MGM_G240(MGM_W185,d_delay,MGM_W184);
   and MGM_G241(MGM_W186,si_delay,MGM_W185);
   and MGM_G242(ENABLE_NOT_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G243(MGM_W187,d_delay);
   and MGM_G244(MGM_W188,MGM_W187,clk_delay);
   not MGM_G245(MGM_W189,si_delay);
   and MGM_G246(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G247(MGM_W191,ssb_delay);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G249(MGM_W192,d_delay);
   and MGM_G250(MGM_W193,MGM_W192,clk_delay);
   not MGM_G251(MGM_W194,si_delay);
   and MGM_G252(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G253(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W195);
   not MGM_G254(MGM_W196,d_delay);
   and MGM_G255(MGM_W197,MGM_W196,clk_delay);
   and MGM_G256(MGM_W198,si_delay,MGM_W197);
   not MGM_G257(MGM_W199,ssb_delay);
   and MGM_G258(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W199,MGM_W198);
   not MGM_G259(MGM_W200,d_delay);
   and MGM_G260(MGM_W201,MGM_W200,clk_delay);
   and MGM_G261(MGM_W202,si_delay,MGM_W201);
   and MGM_G262(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W202);
   and MGM_G263(MGM_W203,d_delay,clk_delay);
   not MGM_G264(MGM_W204,si_delay);
   and MGM_G265(MGM_W205,MGM_W204,MGM_W203);
   not MGM_G266(MGM_W206,ssb_delay);
   and MGM_G267(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W206,MGM_W205);
   and MGM_G268(MGM_W207,d_delay,clk_delay);
   not MGM_G269(MGM_W208,si_delay);
   and MGM_G270(MGM_W209,MGM_W208,MGM_W207);
   and MGM_G271(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W209);
   and MGM_G272(MGM_W210,d_delay,clk_delay);
   and MGM_G273(MGM_W211,si_delay,MGM_W210);
   not MGM_G274(MGM_W212,ssb_delay);
   and MGM_G275(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   and MGM_G276(MGM_W213,d_delay,clk_delay);
   and MGM_G277(MGM_W214,si_delay,MGM_W213);
   and MGM_G278(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W214);
   not MGM_G279(MGM_W215,d_delay);
   and MGM_G280(MGM_W216,rb_delay,MGM_W215);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_rb_AND_NOT_ssb,MGM_W217,MGM_W216);
   and MGM_G283(MGM_W218,rb_delay,d_delay);
   not MGM_G284(MGM_W219,ssb_delay);
   and MGM_G285(ENABLE_d_AND_rb_AND_NOT_ssb,MGM_W219,MGM_W218);
   not MGM_G286(MGM_W220,d_delay);
   and MGM_G287(MGM_W221,rb_delay,MGM_W220);
   and MGM_G288(ENABLE_NOT_d_AND_rb_AND_si,si_delay,MGM_W221);
   and MGM_G289(MGM_W222,rb_delay,d_delay);
   not MGM_G290(MGM_W223,si_delay);
   and MGM_G291(ENABLE_d_AND_rb_AND_NOT_si,MGM_W223,MGM_W222);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz003ad1d01x2( clk, d, o, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and asynch reset o = {((si*!ssb)+(rb*d*ssb)) on rising clk} so = {((si*!ssb)+(rb*d*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz003ad_delay o =  IQ;
// assign `fvz003ad_delay so =  IQ;
// 

   input clk, d, rb, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz003ad_delay o_random_init = o_tmp ;
      assign `fvz003ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz003ad_delay o_random_init = o_tmp ;
      assign `fvz003ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G146(MGM_W112,d_delay);
   and MGM_G147(MGM_W113,rb_delay,MGM_W112);
   not MGM_G148(MGM_W114,si_delay);
   and MGM_G149(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G150(MGM_W116,ssb_delay);
   and MGM_G151(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G152(MGM_W117,d_delay);
   and MGM_G153(MGM_W118,rb_delay,MGM_W117);
   not MGM_G154(MGM_W119,si_delay);
   and MGM_G155(MGM_W120,MGM_W119,MGM_W118);
   and MGM_G156(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W120);
   not MGM_G157(MGM_W121,d_delay);
   and MGM_G158(MGM_W122,rb_delay,MGM_W121);
   and MGM_G159(MGM_W123,si_delay,MGM_W122);
   not MGM_G160(MGM_W124,ssb_delay);
   and MGM_G161(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G162(MGM_W125,d_delay);
   and MGM_G163(MGM_W126,rb_delay,MGM_W125);
   and MGM_G164(MGM_W127,si_delay,MGM_W126);
   and MGM_G165(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W127);
   and MGM_G166(MGM_W128,rb_delay,d_delay);
   not MGM_G167(MGM_W129,si_delay);
   and MGM_G168(MGM_W130,MGM_W129,MGM_W128);
   not MGM_G169(MGM_W131,ssb_delay);
   and MGM_G170(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W131,MGM_W130);
   and MGM_G171(MGM_W132,rb_delay,d_delay);
   not MGM_G172(MGM_W133,si_delay);
   and MGM_G173(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G174(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G175(MGM_W135,rb_delay,d_delay);
   and MGM_G176(MGM_W136,si_delay,MGM_W135);
   not MGM_G177(MGM_W137,ssb_delay);
   and MGM_G178(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W137,MGM_W136);
   and MGM_G179(MGM_W138,rb_delay,d_delay);
   and MGM_G180(MGM_W139,si_delay,MGM_W138);
   and MGM_G181(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W139);
   not MGM_G182(MGM_W140,si_delay);
   and MGM_G183(MGM_W141,MGM_W140,rb_delay);
   and MGM_G184(ENABLE_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W141);
   and MGM_G185(MGM_W142,si_delay,rb_delay);
   and MGM_G186(ENABLE_rb_AND_si_AND_ssb,ssb_delay,MGM_W142);
   not MGM_G187(MGM_W143,d_delay);
   and MGM_G188(MGM_W144,si_delay,MGM_W143);
   not MGM_G189(MGM_W145,ssb_delay);
   and MGM_G190(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W146,si_delay);
   and MGM_G192(MGM_W147,MGM_W146,d_delay);
   and MGM_G193(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   and MGM_G194(MGM_W148,si_delay,d_delay);
   not MGM_G195(MGM_W149,ssb_delay);
   and MGM_G196(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W149,MGM_W148);
   and MGM_G197(MGM_W150,si_delay,d_delay);
   and MGM_G198(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G199(MGM_W151,clk_delay);
   not MGM_G200(MGM_W152,d_delay);
   and MGM_G201(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G202(MGM_W154,si_delay);
   and MGM_G203(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G204(MGM_W156,ssb_delay);
   and MGM_G205(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G206(MGM_W157,clk_delay);
   not MGM_G207(MGM_W158,d_delay);
   and MGM_G208(MGM_W159,MGM_W158,MGM_W157);
   not MGM_G209(MGM_W160,si_delay);
   and MGM_G210(MGM_W161,MGM_W160,MGM_W159);
   and MGM_G211(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G212(MGM_W162,clk_delay);
   not MGM_G213(MGM_W163,d_delay);
   and MGM_G214(MGM_W164,MGM_W163,MGM_W162);
   and MGM_G215(MGM_W165,si_delay,MGM_W164);
   not MGM_G216(MGM_W166,ssb_delay);
   and MGM_G217(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G218(MGM_W167,clk_delay);
   not MGM_G219(MGM_W168,d_delay);
   and MGM_G220(MGM_W169,MGM_W168,MGM_W167);
   and MGM_G221(MGM_W170,si_delay,MGM_W169);
   and MGM_G222(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G223(MGM_W171,clk_delay);
   and MGM_G224(MGM_W172,d_delay,MGM_W171);
   not MGM_G225(MGM_W173,si_delay);
   and MGM_G226(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G227(MGM_W175,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W175,MGM_W174);
   not MGM_G229(MGM_W176,clk_delay);
   and MGM_G230(MGM_W177,d_delay,MGM_W176);
   not MGM_G231(MGM_W178,si_delay);
   and MGM_G232(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W179);
   not MGM_G234(MGM_W180,clk_delay);
   and MGM_G235(MGM_W181,d_delay,MGM_W180);
   and MGM_G236(MGM_W182,si_delay,MGM_W181);
   not MGM_G237(MGM_W183,ssb_delay);
   and MGM_G238(ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W183,MGM_W182);
   not MGM_G239(MGM_W184,clk_delay);
   and MGM_G240(MGM_W185,d_delay,MGM_W184);
   and MGM_G241(MGM_W186,si_delay,MGM_W185);
   and MGM_G242(ENABLE_NOT_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G243(MGM_W187,d_delay);
   and MGM_G244(MGM_W188,MGM_W187,clk_delay);
   not MGM_G245(MGM_W189,si_delay);
   and MGM_G246(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G247(MGM_W191,ssb_delay);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G249(MGM_W192,d_delay);
   and MGM_G250(MGM_W193,MGM_W192,clk_delay);
   not MGM_G251(MGM_W194,si_delay);
   and MGM_G252(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G253(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W195);
   not MGM_G254(MGM_W196,d_delay);
   and MGM_G255(MGM_W197,MGM_W196,clk_delay);
   and MGM_G256(MGM_W198,si_delay,MGM_W197);
   not MGM_G257(MGM_W199,ssb_delay);
   and MGM_G258(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W199,MGM_W198);
   not MGM_G259(MGM_W200,d_delay);
   and MGM_G260(MGM_W201,MGM_W200,clk_delay);
   and MGM_G261(MGM_W202,si_delay,MGM_W201);
   and MGM_G262(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W202);
   and MGM_G263(MGM_W203,d_delay,clk_delay);
   not MGM_G264(MGM_W204,si_delay);
   and MGM_G265(MGM_W205,MGM_W204,MGM_W203);
   not MGM_G266(MGM_W206,ssb_delay);
   and MGM_G267(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W206,MGM_W205);
   and MGM_G268(MGM_W207,d_delay,clk_delay);
   not MGM_G269(MGM_W208,si_delay);
   and MGM_G270(MGM_W209,MGM_W208,MGM_W207);
   and MGM_G271(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W209);
   and MGM_G272(MGM_W210,d_delay,clk_delay);
   and MGM_G273(MGM_W211,si_delay,MGM_W210);
   not MGM_G274(MGM_W212,ssb_delay);
   and MGM_G275(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   and MGM_G276(MGM_W213,d_delay,clk_delay);
   and MGM_G277(MGM_W214,si_delay,MGM_W213);
   and MGM_G278(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W214);
   not MGM_G279(MGM_W215,d_delay);
   and MGM_G280(MGM_W216,rb_delay,MGM_W215);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_rb_AND_NOT_ssb,MGM_W217,MGM_W216);
   and MGM_G283(MGM_W218,rb_delay,d_delay);
   not MGM_G284(MGM_W219,ssb_delay);
   and MGM_G285(ENABLE_d_AND_rb_AND_NOT_ssb,MGM_W219,MGM_W218);
   not MGM_G286(MGM_W220,d_delay);
   and MGM_G287(MGM_W221,rb_delay,MGM_W220);
   and MGM_G288(ENABLE_NOT_d_AND_rb_AND_si,si_delay,MGM_W221);
   and MGM_G289(MGM_W222,rb_delay,d_delay);
   not MGM_G290(MGM_W223,si_delay);
   and MGM_G291(ENABLE_d_AND_rb_AND_NOT_si,MGM_W223,MGM_W222);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz003ad1d02x2( clk, d, o, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and asynch reset o = {((si*!ssb)+(rb*d*ssb)) on rising clk} so = {((si*!ssb)+(rb*d*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz003ad_delay o =  IQ;
// assign `fvz003ad_delay so =  IQ;
// 

   input clk, d, rb, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz003ad_delay o_random_init = o_tmp ;
      assign `fvz003ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz003ad_delay o_random_init = o_tmp ;
      assign `fvz003ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz003ad_func i0sfvz003ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G146(MGM_W112,d_delay);
   and MGM_G147(MGM_W113,rb_delay,MGM_W112);
   not MGM_G148(MGM_W114,si_delay);
   and MGM_G149(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G150(MGM_W116,ssb_delay);
   and MGM_G151(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W116,MGM_W115);
   not MGM_G152(MGM_W117,d_delay);
   and MGM_G153(MGM_W118,rb_delay,MGM_W117);
   not MGM_G154(MGM_W119,si_delay);
   and MGM_G155(MGM_W120,MGM_W119,MGM_W118);
   and MGM_G156(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W120);
   not MGM_G157(MGM_W121,d_delay);
   and MGM_G158(MGM_W122,rb_delay,MGM_W121);
   and MGM_G159(MGM_W123,si_delay,MGM_W122);
   not MGM_G160(MGM_W124,ssb_delay);
   and MGM_G161(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W124,MGM_W123);
   not MGM_G162(MGM_W125,d_delay);
   and MGM_G163(MGM_W126,rb_delay,MGM_W125);
   and MGM_G164(MGM_W127,si_delay,MGM_W126);
   and MGM_G165(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W127);
   and MGM_G166(MGM_W128,rb_delay,d_delay);
   not MGM_G167(MGM_W129,si_delay);
   and MGM_G168(MGM_W130,MGM_W129,MGM_W128);
   not MGM_G169(MGM_W131,ssb_delay);
   and MGM_G170(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W131,MGM_W130);
   and MGM_G171(MGM_W132,rb_delay,d_delay);
   not MGM_G172(MGM_W133,si_delay);
   and MGM_G173(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G174(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G175(MGM_W135,rb_delay,d_delay);
   and MGM_G176(MGM_W136,si_delay,MGM_W135);
   not MGM_G177(MGM_W137,ssb_delay);
   and MGM_G178(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W137,MGM_W136);
   and MGM_G179(MGM_W138,rb_delay,d_delay);
   and MGM_G180(MGM_W139,si_delay,MGM_W138);
   and MGM_G181(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W139);
   not MGM_G182(MGM_W140,si_delay);
   and MGM_G183(MGM_W141,MGM_W140,rb_delay);
   and MGM_G184(ENABLE_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W141);
   and MGM_G185(MGM_W142,si_delay,rb_delay);
   and MGM_G186(ENABLE_rb_AND_si_AND_ssb,ssb_delay,MGM_W142);
   not MGM_G187(MGM_W143,d_delay);
   and MGM_G188(MGM_W144,si_delay,MGM_W143);
   not MGM_G189(MGM_W145,ssb_delay);
   and MGM_G190(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W146,si_delay);
   and MGM_G192(MGM_W147,MGM_W146,d_delay);
   and MGM_G193(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   and MGM_G194(MGM_W148,si_delay,d_delay);
   not MGM_G195(MGM_W149,ssb_delay);
   and MGM_G196(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W149,MGM_W148);
   and MGM_G197(MGM_W150,si_delay,d_delay);
   and MGM_G198(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G199(MGM_W151,clk_delay);
   not MGM_G200(MGM_W152,d_delay);
   and MGM_G201(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G202(MGM_W154,si_delay);
   and MGM_G203(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G204(MGM_W156,ssb_delay);
   and MGM_G205(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G206(MGM_W157,clk_delay);
   not MGM_G207(MGM_W158,d_delay);
   and MGM_G208(MGM_W159,MGM_W158,MGM_W157);
   not MGM_G209(MGM_W160,si_delay);
   and MGM_G210(MGM_W161,MGM_W160,MGM_W159);
   and MGM_G211(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G212(MGM_W162,clk_delay);
   not MGM_G213(MGM_W163,d_delay);
   and MGM_G214(MGM_W164,MGM_W163,MGM_W162);
   and MGM_G215(MGM_W165,si_delay,MGM_W164);
   not MGM_G216(MGM_W166,ssb_delay);
   and MGM_G217(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G218(MGM_W167,clk_delay);
   not MGM_G219(MGM_W168,d_delay);
   and MGM_G220(MGM_W169,MGM_W168,MGM_W167);
   and MGM_G221(MGM_W170,si_delay,MGM_W169);
   and MGM_G222(ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G223(MGM_W171,clk_delay);
   and MGM_G224(MGM_W172,d_delay,MGM_W171);
   not MGM_G225(MGM_W173,si_delay);
   and MGM_G226(MGM_W174,MGM_W173,MGM_W172);
   not MGM_G227(MGM_W175,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W175,MGM_W174);
   not MGM_G229(MGM_W176,clk_delay);
   and MGM_G230(MGM_W177,d_delay,MGM_W176);
   not MGM_G231(MGM_W178,si_delay);
   and MGM_G232(MGM_W179,MGM_W178,MGM_W177);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W179);
   not MGM_G234(MGM_W180,clk_delay);
   and MGM_G235(MGM_W181,d_delay,MGM_W180);
   and MGM_G236(MGM_W182,si_delay,MGM_W181);
   not MGM_G237(MGM_W183,ssb_delay);
   and MGM_G238(ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W183,MGM_W182);
   not MGM_G239(MGM_W184,clk_delay);
   and MGM_G240(MGM_W185,d_delay,MGM_W184);
   and MGM_G241(MGM_W186,si_delay,MGM_W185);
   and MGM_G242(ENABLE_NOT_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G243(MGM_W187,d_delay);
   and MGM_G244(MGM_W188,MGM_W187,clk_delay);
   not MGM_G245(MGM_W189,si_delay);
   and MGM_G246(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G247(MGM_W191,ssb_delay);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G249(MGM_W192,d_delay);
   and MGM_G250(MGM_W193,MGM_W192,clk_delay);
   not MGM_G251(MGM_W194,si_delay);
   and MGM_G252(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G253(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W195);
   not MGM_G254(MGM_W196,d_delay);
   and MGM_G255(MGM_W197,MGM_W196,clk_delay);
   and MGM_G256(MGM_W198,si_delay,MGM_W197);
   not MGM_G257(MGM_W199,ssb_delay);
   and MGM_G258(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W199,MGM_W198);
   not MGM_G259(MGM_W200,d_delay);
   and MGM_G260(MGM_W201,MGM_W200,clk_delay);
   and MGM_G261(MGM_W202,si_delay,MGM_W201);
   and MGM_G262(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W202);
   and MGM_G263(MGM_W203,d_delay,clk_delay);
   not MGM_G264(MGM_W204,si_delay);
   and MGM_G265(MGM_W205,MGM_W204,MGM_W203);
   not MGM_G266(MGM_W206,ssb_delay);
   and MGM_G267(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W206,MGM_W205);
   and MGM_G268(MGM_W207,d_delay,clk_delay);
   not MGM_G269(MGM_W208,si_delay);
   and MGM_G270(MGM_W209,MGM_W208,MGM_W207);
   and MGM_G271(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W209);
   and MGM_G272(MGM_W210,d_delay,clk_delay);
   and MGM_G273(MGM_W211,si_delay,MGM_W210);
   not MGM_G274(MGM_W212,ssb_delay);
   and MGM_G275(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   and MGM_G276(MGM_W213,d_delay,clk_delay);
   and MGM_G277(MGM_W214,si_delay,MGM_W213);
   and MGM_G278(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W214);
   not MGM_G279(MGM_W215,d_delay);
   and MGM_G280(MGM_W216,rb_delay,MGM_W215);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_rb_AND_NOT_ssb,MGM_W217,MGM_W216);
   and MGM_G283(MGM_W218,rb_delay,d_delay);
   not MGM_G284(MGM_W219,ssb_delay);
   and MGM_G285(ENABLE_d_AND_rb_AND_NOT_ssb,MGM_W219,MGM_W218);
   not MGM_G286(MGM_W220,d_delay);
   and MGM_G287(MGM_W221,rb_delay,MGM_W220);
   and MGM_G288(ENABLE_NOT_d_AND_rb_AND_si,si_delay,MGM_W221);
   and MGM_G289(MGM_W222,rb_delay,d_delay);
   not MGM_G290(MGM_W223,si_delay);
   and MGM_G291(ENABLE_d_AND_rb_AND_NOT_si,MGM_W223,MGM_W222);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz00bad1d01x1( clk, d, o, rb, s, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and asynch set o = {((si*!ssb)+((d+s)*rb)*ssb)  on rising clk} so = {((si*!ssb)+((d+s)*rb)*ssb)  on rising clk}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (posedge clk or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz00bad_delay o =  IQ;
// assign `fvz00bad_delay so =  IQ;
// 

   input clk, d, rb, s, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz00bad_delay o_random_init = o_tmp ;
      assign `fvz00bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz00bad_delay o_random_init = o_tmp ;
      assign `fvz00bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G122(MGM_W100,d_delay);
   and MGM_G123(MGM_W101,rb_delay,MGM_W100);
   not MGM_G124(MGM_W102,s_delay);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,si_delay);
   and MGM_G127(MGM_W105,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W106,ssb_delay);
   and MGM_G129(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W106,MGM_W105);
   not MGM_G130(MGM_W107,d_delay);
   and MGM_G131(MGM_W108,rb_delay,MGM_W107);
   not MGM_G132(MGM_W109,s_delay);
   and MGM_G133(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G134(MGM_W111,si_delay);
   and MGM_G135(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G136(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G137(MGM_W113,d_delay);
   and MGM_G138(MGM_W114,rb_delay,MGM_W113);
   not MGM_G139(MGM_W115,s_delay);
   and MGM_G140(MGM_W116,MGM_W115,MGM_W114);
   and MGM_G141(MGM_W117,si_delay,MGM_W116);
   not MGM_G142(MGM_W118,ssb_delay);
   and MGM_G143(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W118,MGM_W117);
   not MGM_G144(MGM_W119,d_delay);
   and MGM_G145(MGM_W120,rb_delay,MGM_W119);
   not MGM_G146(MGM_W121,s_delay);
   and MGM_G147(MGM_W122,MGM_W121,MGM_W120);
   and MGM_G148(MGM_W123,si_delay,MGM_W122);
   and MGM_G149(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W123);
   and MGM_G150(MGM_W124,rb_delay,d_delay);
   not MGM_G151(MGM_W125,s_delay);
   and MGM_G152(MGM_W126,MGM_W125,MGM_W124);
   not MGM_G153(MGM_W127,si_delay);
   and MGM_G154(MGM_W128,MGM_W127,MGM_W126);
   not MGM_G155(MGM_W129,ssb_delay);
   and MGM_G156(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W129,MGM_W128);
   and MGM_G157(MGM_W130,rb_delay,d_delay);
   not MGM_G158(MGM_W131,s_delay);
   and MGM_G159(MGM_W132,MGM_W131,MGM_W130);
   not MGM_G160(MGM_W133,si_delay);
   and MGM_G161(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G162(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G163(MGM_W135,rb_delay,d_delay);
   not MGM_G164(MGM_W136,s_delay);
   and MGM_G165(MGM_W137,MGM_W136,MGM_W135);
   and MGM_G166(MGM_W138,si_delay,MGM_W137);
   not MGM_G167(MGM_W139,ssb_delay);
   and MGM_G168(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G169(MGM_W140,rb_delay,d_delay);
   not MGM_G170(MGM_W141,s_delay);
   and MGM_G171(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G172(MGM_W143,si_delay,MGM_W142);
   and MGM_G173(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W143);
   not MGM_G174(MGM_W144,s_delay);
   and MGM_G175(MGM_W145,MGM_W144,rb_delay);
   not MGM_G176(MGM_W146,si_delay);
   and MGM_G177(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G178(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G179(MGM_W148,s_delay);
   and MGM_G180(MGM_W149,MGM_W148,rb_delay);
   and MGM_G181(MGM_W150,si_delay,MGM_W149);
   and MGM_G182(ENABLE_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G183(MGM_W151,d_delay);
   not MGM_G184(MGM_W152,s_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G186(MGM_W154,si_delay,MGM_W153);
   not MGM_G187(MGM_W155,ssb_delay);
   and MGM_G188(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W155,MGM_W154);
   not MGM_G189(MGM_W156,s_delay);
   and MGM_G190(MGM_W157,MGM_W156,d_delay);
   not MGM_G191(MGM_W158,si_delay);
   and MGM_G192(MGM_W159,MGM_W158,MGM_W157);
   and MGM_G193(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W159);
   not MGM_G194(MGM_W160,s_delay);
   and MGM_G195(MGM_W161,MGM_W160,d_delay);
   and MGM_G196(MGM_W162,si_delay,MGM_W161);
   not MGM_G197(MGM_W163,ssb_delay);
   and MGM_G198(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W163,MGM_W162);
   not MGM_G199(MGM_W164,s_delay);
   and MGM_G200(MGM_W165,MGM_W164,d_delay);
   and MGM_G201(MGM_W166,si_delay,MGM_W165);
   and MGM_G202(ENABLE_d_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W166);
   not MGM_G203(MGM_W167,d_delay);
   and MGM_G204(MGM_W168,rb_delay,MGM_W167);
   not MGM_G205(MGM_W169,si_delay);
   and MGM_G206(MGM_W170,MGM_W169,MGM_W168);
   not MGM_G207(MGM_W171,ssb_delay);
   and MGM_G208(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W171,MGM_W170);
   not MGM_G209(MGM_W172,d_delay);
   and MGM_G210(MGM_W173,rb_delay,MGM_W172);
   not MGM_G211(MGM_W174,si_delay);
   and MGM_G212(MGM_W175,MGM_W174,MGM_W173);
   and MGM_G213(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W175);
   not MGM_G214(MGM_W176,d_delay);
   and MGM_G215(MGM_W177,rb_delay,MGM_W176);
   and MGM_G216(MGM_W178,si_delay,MGM_W177);
   and MGM_G217(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W178);
   and MGM_G218(MGM_W179,rb_delay,d_delay);
   not MGM_G219(MGM_W180,si_delay);
   and MGM_G220(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G221(MGM_W182,ssb_delay);
   and MGM_G222(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G223(MGM_W183,d_delay);
   and MGM_G224(MGM_W184,rb_delay,MGM_W183);
   not MGM_G225(MGM_W185,s_delay);
   and MGM_G226(MGM_W186,MGM_W185,MGM_W184);
   not MGM_G227(MGM_W187,ssb_delay);
   and MGM_G228(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W187,MGM_W186);
   and MGM_G229(MGM_W188,rb_delay,d_delay);
   not MGM_G230(MGM_W189,s_delay);
   and MGM_G231(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G232(MGM_W191,ssb_delay);
   and MGM_G233(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G234(MGM_W192,d_delay);
   and MGM_G235(MGM_W193,rb_delay,MGM_W192);
   not MGM_G236(MGM_W194,s_delay);
   and MGM_G237(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G238(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si,si_delay,MGM_W195);
   and MGM_G239(MGM_W196,rb_delay,d_delay);
   not MGM_G240(MGM_W197,s_delay);
   and MGM_G241(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G242(MGM_W199,si_delay);
   and MGM_G243(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si,MGM_W199,MGM_W198);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz00bad1d01x2( clk, d, o, rb, s, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and asynch set o = {((si*!ssb)+((d+s)*rb)*ssb)  on rising clk} so = {((si*!ssb)+((d+s)*rb)*ssb)  on rising clk}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (posedge clk or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz00bad_delay o =  IQ;
// assign `fvz00bad_delay so =  IQ;
// 

   input clk, d, rb, s, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz00bad_delay o_random_init = o_tmp ;
      assign `fvz00bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz00bad_delay o_random_init = o_tmp ;
      assign `fvz00bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d01x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G122(MGM_W100,d_delay);
   and MGM_G123(MGM_W101,rb_delay,MGM_W100);
   not MGM_G124(MGM_W102,s_delay);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,si_delay);
   and MGM_G127(MGM_W105,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W106,ssb_delay);
   and MGM_G129(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W106,MGM_W105);
   not MGM_G130(MGM_W107,d_delay);
   and MGM_G131(MGM_W108,rb_delay,MGM_W107);
   not MGM_G132(MGM_W109,s_delay);
   and MGM_G133(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G134(MGM_W111,si_delay);
   and MGM_G135(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G136(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G137(MGM_W113,d_delay);
   and MGM_G138(MGM_W114,rb_delay,MGM_W113);
   not MGM_G139(MGM_W115,s_delay);
   and MGM_G140(MGM_W116,MGM_W115,MGM_W114);
   and MGM_G141(MGM_W117,si_delay,MGM_W116);
   not MGM_G142(MGM_W118,ssb_delay);
   and MGM_G143(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W118,MGM_W117);
   not MGM_G144(MGM_W119,d_delay);
   and MGM_G145(MGM_W120,rb_delay,MGM_W119);
   not MGM_G146(MGM_W121,s_delay);
   and MGM_G147(MGM_W122,MGM_W121,MGM_W120);
   and MGM_G148(MGM_W123,si_delay,MGM_W122);
   and MGM_G149(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W123);
   and MGM_G150(MGM_W124,rb_delay,d_delay);
   not MGM_G151(MGM_W125,s_delay);
   and MGM_G152(MGM_W126,MGM_W125,MGM_W124);
   not MGM_G153(MGM_W127,si_delay);
   and MGM_G154(MGM_W128,MGM_W127,MGM_W126);
   not MGM_G155(MGM_W129,ssb_delay);
   and MGM_G156(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W129,MGM_W128);
   and MGM_G157(MGM_W130,rb_delay,d_delay);
   not MGM_G158(MGM_W131,s_delay);
   and MGM_G159(MGM_W132,MGM_W131,MGM_W130);
   not MGM_G160(MGM_W133,si_delay);
   and MGM_G161(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G162(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G163(MGM_W135,rb_delay,d_delay);
   not MGM_G164(MGM_W136,s_delay);
   and MGM_G165(MGM_W137,MGM_W136,MGM_W135);
   and MGM_G166(MGM_W138,si_delay,MGM_W137);
   not MGM_G167(MGM_W139,ssb_delay);
   and MGM_G168(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G169(MGM_W140,rb_delay,d_delay);
   not MGM_G170(MGM_W141,s_delay);
   and MGM_G171(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G172(MGM_W143,si_delay,MGM_W142);
   and MGM_G173(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W143);
   not MGM_G174(MGM_W144,s_delay);
   and MGM_G175(MGM_W145,MGM_W144,rb_delay);
   not MGM_G176(MGM_W146,si_delay);
   and MGM_G177(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G178(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G179(MGM_W148,s_delay);
   and MGM_G180(MGM_W149,MGM_W148,rb_delay);
   and MGM_G181(MGM_W150,si_delay,MGM_W149);
   and MGM_G182(ENABLE_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G183(MGM_W151,d_delay);
   not MGM_G184(MGM_W152,s_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G186(MGM_W154,si_delay,MGM_W153);
   not MGM_G187(MGM_W155,ssb_delay);
   and MGM_G188(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W155,MGM_W154);
   not MGM_G189(MGM_W156,s_delay);
   and MGM_G190(MGM_W157,MGM_W156,d_delay);
   not MGM_G191(MGM_W158,si_delay);
   and MGM_G192(MGM_W159,MGM_W158,MGM_W157);
   and MGM_G193(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W159);
   not MGM_G194(MGM_W160,s_delay);
   and MGM_G195(MGM_W161,MGM_W160,d_delay);
   and MGM_G196(MGM_W162,si_delay,MGM_W161);
   not MGM_G197(MGM_W163,ssb_delay);
   and MGM_G198(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W163,MGM_W162);
   not MGM_G199(MGM_W164,s_delay);
   and MGM_G200(MGM_W165,MGM_W164,d_delay);
   and MGM_G201(MGM_W166,si_delay,MGM_W165);
   and MGM_G202(ENABLE_d_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W166);
   not MGM_G203(MGM_W167,d_delay);
   and MGM_G204(MGM_W168,rb_delay,MGM_W167);
   not MGM_G205(MGM_W169,si_delay);
   and MGM_G206(MGM_W170,MGM_W169,MGM_W168);
   not MGM_G207(MGM_W171,ssb_delay);
   and MGM_G208(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W171,MGM_W170);
   not MGM_G209(MGM_W172,d_delay);
   and MGM_G210(MGM_W173,rb_delay,MGM_W172);
   not MGM_G211(MGM_W174,si_delay);
   and MGM_G212(MGM_W175,MGM_W174,MGM_W173);
   and MGM_G213(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W175);
   not MGM_G214(MGM_W176,d_delay);
   and MGM_G215(MGM_W177,rb_delay,MGM_W176);
   and MGM_G216(MGM_W178,si_delay,MGM_W177);
   and MGM_G217(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W178);
   and MGM_G218(MGM_W179,rb_delay,d_delay);
   not MGM_G219(MGM_W180,si_delay);
   and MGM_G220(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G221(MGM_W182,ssb_delay);
   and MGM_G222(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G223(MGM_W183,d_delay);
   and MGM_G224(MGM_W184,rb_delay,MGM_W183);
   not MGM_G225(MGM_W185,s_delay);
   and MGM_G226(MGM_W186,MGM_W185,MGM_W184);
   not MGM_G227(MGM_W187,ssb_delay);
   and MGM_G228(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W187,MGM_W186);
   and MGM_G229(MGM_W188,rb_delay,d_delay);
   not MGM_G230(MGM_W189,s_delay);
   and MGM_G231(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G232(MGM_W191,ssb_delay);
   and MGM_G233(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G234(MGM_W192,d_delay);
   and MGM_G235(MGM_W193,rb_delay,MGM_W192);
   not MGM_G236(MGM_W194,s_delay);
   and MGM_G237(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G238(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si,si_delay,MGM_W195);
   and MGM_G239(MGM_W196,rb_delay,d_delay);
   not MGM_G240(MGM_W197,s_delay);
   and MGM_G241(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G242(MGM_W199,si_delay);
   and MGM_G243(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si,MGM_W199,MGM_W198);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz00bad1d02x2( clk, d, o, rb, s, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan DFF with scanout and asynch set o = {((si*!ssb)+((d+s)*rb)*ssb)  on rising clk} so = {((si*!ssb)+((d+s)*rb)*ssb)  on rising clk}
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (posedge clk or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz00bad_delay o =  IQ;
// assign `fvz00bad_delay so =  IQ;
// 

   input clk, d, rb, s, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz00bad_delay o_random_init = o_tmp ;
      assign `fvz00bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d02x2_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz00bad_delay o_random_init = o_tmp ;
      assign `fvz00bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz00bad_func i0sfvz00bad1d02x2_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G122(MGM_W100,d_delay);
   and MGM_G123(MGM_W101,rb_delay,MGM_W100);
   not MGM_G124(MGM_W102,s_delay);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,si_delay);
   and MGM_G127(MGM_W105,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W106,ssb_delay);
   and MGM_G129(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W106,MGM_W105);
   not MGM_G130(MGM_W107,d_delay);
   and MGM_G131(MGM_W108,rb_delay,MGM_W107);
   not MGM_G132(MGM_W109,s_delay);
   and MGM_G133(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G134(MGM_W111,si_delay);
   and MGM_G135(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G136(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G137(MGM_W113,d_delay);
   and MGM_G138(MGM_W114,rb_delay,MGM_W113);
   not MGM_G139(MGM_W115,s_delay);
   and MGM_G140(MGM_W116,MGM_W115,MGM_W114);
   and MGM_G141(MGM_W117,si_delay,MGM_W116);
   not MGM_G142(MGM_W118,ssb_delay);
   and MGM_G143(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W118,MGM_W117);
   not MGM_G144(MGM_W119,d_delay);
   and MGM_G145(MGM_W120,rb_delay,MGM_W119);
   not MGM_G146(MGM_W121,s_delay);
   and MGM_G147(MGM_W122,MGM_W121,MGM_W120);
   and MGM_G148(MGM_W123,si_delay,MGM_W122);
   and MGM_G149(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W123);
   and MGM_G150(MGM_W124,rb_delay,d_delay);
   not MGM_G151(MGM_W125,s_delay);
   and MGM_G152(MGM_W126,MGM_W125,MGM_W124);
   not MGM_G153(MGM_W127,si_delay);
   and MGM_G154(MGM_W128,MGM_W127,MGM_W126);
   not MGM_G155(MGM_W129,ssb_delay);
   and MGM_G156(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W129,MGM_W128);
   and MGM_G157(MGM_W130,rb_delay,d_delay);
   not MGM_G158(MGM_W131,s_delay);
   and MGM_G159(MGM_W132,MGM_W131,MGM_W130);
   not MGM_G160(MGM_W133,si_delay);
   and MGM_G161(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G162(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G163(MGM_W135,rb_delay,d_delay);
   not MGM_G164(MGM_W136,s_delay);
   and MGM_G165(MGM_W137,MGM_W136,MGM_W135);
   and MGM_G166(MGM_W138,si_delay,MGM_W137);
   not MGM_G167(MGM_W139,ssb_delay);
   and MGM_G168(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G169(MGM_W140,rb_delay,d_delay);
   not MGM_G170(MGM_W141,s_delay);
   and MGM_G171(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G172(MGM_W143,si_delay,MGM_W142);
   and MGM_G173(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W143);
   not MGM_G174(MGM_W144,s_delay);
   and MGM_G175(MGM_W145,MGM_W144,rb_delay);
   not MGM_G176(MGM_W146,si_delay);
   and MGM_G177(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G178(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G179(MGM_W148,s_delay);
   and MGM_G180(MGM_W149,MGM_W148,rb_delay);
   and MGM_G181(MGM_W150,si_delay,MGM_W149);
   and MGM_G182(ENABLE_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G183(MGM_W151,d_delay);
   not MGM_G184(MGM_W152,s_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G186(MGM_W154,si_delay,MGM_W153);
   not MGM_G187(MGM_W155,ssb_delay);
   and MGM_G188(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W155,MGM_W154);
   not MGM_G189(MGM_W156,s_delay);
   and MGM_G190(MGM_W157,MGM_W156,d_delay);
   not MGM_G191(MGM_W158,si_delay);
   and MGM_G192(MGM_W159,MGM_W158,MGM_W157);
   and MGM_G193(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W159);
   not MGM_G194(MGM_W160,s_delay);
   and MGM_G195(MGM_W161,MGM_W160,d_delay);
   and MGM_G196(MGM_W162,si_delay,MGM_W161);
   not MGM_G197(MGM_W163,ssb_delay);
   and MGM_G198(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W163,MGM_W162);
   not MGM_G199(MGM_W164,s_delay);
   and MGM_G200(MGM_W165,MGM_W164,d_delay);
   and MGM_G201(MGM_W166,si_delay,MGM_W165);
   and MGM_G202(ENABLE_d_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W166);
   not MGM_G203(MGM_W167,d_delay);
   and MGM_G204(MGM_W168,rb_delay,MGM_W167);
   not MGM_G205(MGM_W169,si_delay);
   and MGM_G206(MGM_W170,MGM_W169,MGM_W168);
   not MGM_G207(MGM_W171,ssb_delay);
   and MGM_G208(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W171,MGM_W170);
   not MGM_G209(MGM_W172,d_delay);
   and MGM_G210(MGM_W173,rb_delay,MGM_W172);
   not MGM_G211(MGM_W174,si_delay);
   and MGM_G212(MGM_W175,MGM_W174,MGM_W173);
   and MGM_G213(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W175);
   not MGM_G214(MGM_W176,d_delay);
   and MGM_G215(MGM_W177,rb_delay,MGM_W176);
   and MGM_G216(MGM_W178,si_delay,MGM_W177);
   and MGM_G217(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W178);
   and MGM_G218(MGM_W179,rb_delay,d_delay);
   not MGM_G219(MGM_W180,si_delay);
   and MGM_G220(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G221(MGM_W182,ssb_delay);
   and MGM_G222(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G223(MGM_W183,d_delay);
   and MGM_G224(MGM_W184,rb_delay,MGM_W183);
   not MGM_G225(MGM_W185,s_delay);
   and MGM_G226(MGM_W186,MGM_W185,MGM_W184);
   not MGM_G227(MGM_W187,ssb_delay);
   and MGM_G228(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W187,MGM_W186);
   and MGM_G229(MGM_W188,rb_delay,d_delay);
   not MGM_G230(MGM_W189,s_delay);
   and MGM_G231(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G232(MGM_W191,ssb_delay);
   and MGM_G233(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G234(MGM_W192,d_delay);
   and MGM_G235(MGM_W193,rb_delay,MGM_W192);
   not MGM_G236(MGM_W194,s_delay);
   and MGM_G237(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G238(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si,si_delay,MGM_W195);
   and MGM_G239(MGM_W196,rb_delay,d_delay);
   not MGM_G240(MGM_W197,s_delay);
   and MGM_G241(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G242(MGM_W199,si_delay);
   and MGM_G243(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si,MGM_W199,MGM_W198);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz043ad1d01x1( clk, d, den, o, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Mux-D scan Reduced-Cap FF with asynch reset and data-enable with no buffering on scan pin
// 
// 
// 
// assign  int1 =  den ? d : IQ;
// assign  int2 =  ssb ? int1 : si;
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= int2 ;
// end
// end
// 
// assign `i0sfvz043ad1d01x1b_delay o =  IQ;
// assign `i0sfvz043ad1d01x1b_delay so =  o;
// 

   input clk, d, den, rb, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire o_random_init;
wire so_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(o_random_init or so_random_init)
   if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
`else
   assign o = o_random_init;
   assign so = so_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz043ad_delay o_random_init = o_tmp ;
      assign `fvz043ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x1_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz043ad_delay o_random_init = o_tmp ;
      assign `fvz043ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d_delay);
   not MGM_G1(MGM_W1,den_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   and MGM_G3(MGM_W3,rb_delay,MGM_W2);
   not MGM_G4(MGM_W4,si_delay);
   and MGM_G5(MGM_W5,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W6,ssb_delay);
   and MGM_G7(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W6,MGM_W5);
   not MGM_G8(MGM_W7,d_delay);
   not MGM_G9(MGM_W8,den_delay);
   and MGM_G10(MGM_W9,MGM_W8,MGM_W7);
   and MGM_G11(MGM_W10,rb_delay,MGM_W9);
   and MGM_G12(MGM_W11,si_delay,MGM_W10);
   not MGM_G13(MGM_W12,ssb_delay);
   and MGM_G14(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W12,MGM_W11);
   not MGM_G15(MGM_W13,d_delay);
   and MGM_G16(MGM_W14,den_delay,MGM_W13);
   and MGM_G17(MGM_W15,rb_delay,MGM_W14);
   not MGM_G18(MGM_W16,si_delay);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,ssb_delay);
   and MGM_G21(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W18,MGM_W17);
   not MGM_G22(MGM_W19,d_delay);
   and MGM_G23(MGM_W20,den_delay,MGM_W19);
   and MGM_G24(MGM_W21,rb_delay,MGM_W20);
   not MGM_G25(MGM_W22,si_delay);
   and MGM_G26(MGM_W23,MGM_W22,MGM_W21);
   and MGM_G27(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W23);
   not MGM_G28(MGM_W24,d_delay);
   and MGM_G29(MGM_W25,den_delay,MGM_W24);
   and MGM_G30(MGM_W26,rb_delay,MGM_W25);
   and MGM_G31(MGM_W27,si_delay,MGM_W26);
   not MGM_G32(MGM_W28,ssb_delay);
   and MGM_G33(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W28,MGM_W27);
   not MGM_G34(MGM_W29,d_delay);
   and MGM_G35(MGM_W30,den_delay,MGM_W29);
   and MGM_G36(MGM_W31,rb_delay,MGM_W30);
   and MGM_G37(MGM_W32,si_delay,MGM_W31);
   and MGM_G38(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G39(MGM_W33,den_delay);
   and MGM_G40(MGM_W34,MGM_W33,d_delay);
   and MGM_G41(MGM_W35,rb_delay,MGM_W34);
   not MGM_G42(MGM_W36,si_delay);
   and MGM_G43(MGM_W37,MGM_W36,MGM_W35);
   not MGM_G44(MGM_W38,ssb_delay);
   and MGM_G45(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W38,MGM_W37);
   not MGM_G46(MGM_W39,den_delay);
   and MGM_G47(MGM_W40,MGM_W39,d_delay);
   and MGM_G48(MGM_W41,rb_delay,MGM_W40);
   and MGM_G49(MGM_W42,si_delay,MGM_W41);
   not MGM_G50(MGM_W43,ssb_delay);
   and MGM_G51(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W43,MGM_W42);
   and MGM_G52(MGM_W44,den_delay,d_delay);
   and MGM_G53(MGM_W45,rb_delay,MGM_W44);
   not MGM_G54(MGM_W46,si_delay);
   and MGM_G55(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G56(MGM_W48,ssb_delay);
   and MGM_G57(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W48,MGM_W47);
   and MGM_G58(MGM_W49,den_delay,d_delay);
   and MGM_G59(MGM_W50,rb_delay,MGM_W49);
   not MGM_G60(MGM_W51,si_delay);
   and MGM_G61(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G62(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W52);
   and MGM_G63(MGM_W53,den_delay,d_delay);
   and MGM_G64(MGM_W54,rb_delay,MGM_W53);
   and MGM_G65(MGM_W55,si_delay,MGM_W54);
   not MGM_G66(MGM_W56,ssb_delay);
   and MGM_G67(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W56,MGM_W55);
   and MGM_G68(MGM_W57,den_delay,d_delay);
   and MGM_G69(MGM_W58,rb_delay,MGM_W57);
   and MGM_G70(MGM_W59,si_delay,MGM_W58);
   and MGM_G71(ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W59);
   and MGM_G72(MGM_W60,rb_delay,den_delay);
   not MGM_G73(MGM_W61,si_delay);
   and MGM_G74(MGM_W62,MGM_W61,MGM_W60);
   and MGM_G75(ENABLE_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W62);
   and MGM_G76(MGM_W63,rb_delay,den_delay);
   and MGM_G77(MGM_W64,si_delay,MGM_W63);
   and MGM_G78(ENABLE_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W64);
   not MGM_G79(MGM_W65,d_delay);
   and MGM_G80(MGM_W66,rb_delay,MGM_W65);
   not MGM_G81(MGM_W67,si_delay);
   and MGM_G82(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G83(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W68);
   not MGM_G84(MGM_W69,d_delay);
   and MGM_G85(MGM_W70,rb_delay,MGM_W69);
   and MGM_G86(MGM_W71,si_delay,MGM_W70);
   and MGM_G87(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W71);
   and MGM_G88(MGM_W72,rb_delay,d_delay);
   not MGM_G89(MGM_W73,si_delay);
   and MGM_G90(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G91(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W74);
   and MGM_G92(MGM_W75,rb_delay,d_delay);
   and MGM_G93(MGM_W76,si_delay,MGM_W75);
   and MGM_G94(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W76);
   not MGM_G95(MGM_W77,d_delay);
   not MGM_G96(MGM_W78,den_delay);
   and MGM_G97(MGM_W79,MGM_W78,MGM_W77);
   and MGM_G98(MGM_W80,si_delay,MGM_W79);
   not MGM_G99(MGM_W81,ssb_delay);
   and MGM_G100(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W81,MGM_W80);
   not MGM_G101(MGM_W82,d_delay);
   and MGM_G102(MGM_W83,den_delay,MGM_W82);
   and MGM_G103(MGM_W84,si_delay,MGM_W83);
   not MGM_G104(MGM_W85,ssb_delay);
   and MGM_G105(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W85,MGM_W84);
   not MGM_G106(MGM_W86,den_delay);
   and MGM_G107(MGM_W87,MGM_W86,d_delay);
   and MGM_G108(MGM_W88,si_delay,MGM_W87);
   not MGM_G109(MGM_W89,ssb_delay);
   and MGM_G110(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W89,MGM_W88);
   and MGM_G111(MGM_W90,den_delay,d_delay);
   not MGM_G112(MGM_W91,si_delay);
   and MGM_G113(MGM_W92,MGM_W91,MGM_W90);
   and MGM_G114(ENABLE_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W92);
   and MGM_G115(MGM_W93,den_delay,d_delay);
   and MGM_G116(MGM_W94,si_delay,MGM_W93);
   not MGM_G117(MGM_W95,ssb_delay);
   and MGM_G118(ENABLE_d_AND_den_AND_si_AND_NOT_ssb,MGM_W95,MGM_W94);
   and MGM_G119(MGM_W96,den_delay,d_delay);
   and MGM_G120(MGM_W97,si_delay,MGM_W96);
   and MGM_G121(ENABLE_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W97);
   not MGM_G122(MGM_W98,clk_delay);
   not MGM_G123(MGM_W99,d_delay);
   and MGM_G124(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G125(MGM_W101,den_delay);
   and MGM_G126(MGM_W102,MGM_W101,MGM_W100);
   not MGM_G127(MGM_W103,si_delay);
   and MGM_G128(MGM_W104,MGM_W103,MGM_W102);
   not MGM_G129(MGM_W105,ssb_delay);
   and MGM_G130(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W105,MGM_W104);
   not MGM_G131(MGM_W106,clk_delay);
   not MGM_G132(MGM_W107,d_delay);
   and MGM_G133(MGM_W108,MGM_W107,MGM_W106);
   not MGM_G134(MGM_W109,den_delay);
   and MGM_G135(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G136(MGM_W111,si_delay);
   and MGM_G137(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G138(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G139(MGM_W113,clk_delay);
   not MGM_G140(MGM_W114,d_delay);
   and MGM_G141(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G142(MGM_W116,den_delay);
   and MGM_G143(MGM_W117,MGM_W116,MGM_W115);
   and MGM_G144(MGM_W118,si_delay,MGM_W117);
   not MGM_G145(MGM_W119,ssb_delay);
   and MGM_G146(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W119,MGM_W118);
   not MGM_G147(MGM_W120,clk_delay);
   not MGM_G148(MGM_W121,d_delay);
   and MGM_G149(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G150(MGM_W123,den_delay);
   and MGM_G151(MGM_W124,MGM_W123,MGM_W122);
   and MGM_G152(MGM_W125,si_delay,MGM_W124);
   and MGM_G153(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W125);
   not MGM_G154(MGM_W126,clk_delay);
   not MGM_G155(MGM_W127,d_delay);
   and MGM_G156(MGM_W128,MGM_W127,MGM_W126);
   and MGM_G157(MGM_W129,den_delay,MGM_W128);
   not MGM_G158(MGM_W130,si_delay);
   and MGM_G159(MGM_W131,MGM_W130,MGM_W129);
   not MGM_G160(MGM_W132,ssb_delay);
   and MGM_G161(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W132,MGM_W131);
   not MGM_G162(MGM_W133,clk_delay);
   not MGM_G163(MGM_W134,d_delay);
   and MGM_G164(MGM_W135,MGM_W134,MGM_W133);
   and MGM_G165(MGM_W136,den_delay,MGM_W135);
   not MGM_G166(MGM_W137,si_delay);
   and MGM_G167(MGM_W138,MGM_W137,MGM_W136);
   and MGM_G168(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W138);
   not MGM_G169(MGM_W139,clk_delay);
   not MGM_G170(MGM_W140,d_delay);
   and MGM_G171(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G172(MGM_W142,den_delay,MGM_W141);
   and MGM_G173(MGM_W143,si_delay,MGM_W142);
   not MGM_G174(MGM_W144,ssb_delay);
   and MGM_G175(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W144,MGM_W143);
   not MGM_G176(MGM_W145,clk_delay);
   not MGM_G177(MGM_W146,d_delay);
   and MGM_G178(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G179(MGM_W148,den_delay,MGM_W147);
   and MGM_G180(MGM_W149,si_delay,MGM_W148);
   and MGM_G181(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W149);
   not MGM_G182(MGM_W150,clk_delay);
   and MGM_G183(MGM_W151,d_delay,MGM_W150);
   not MGM_G184(MGM_W152,den_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G186(MGM_W154,si_delay);
   and MGM_G187(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G188(MGM_W156,ssb_delay);
   and MGM_G189(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G190(MGM_W157,clk_delay);
   and MGM_G191(MGM_W158,d_delay,MGM_W157);
   not MGM_G192(MGM_W159,den_delay);
   and MGM_G193(MGM_W160,MGM_W159,MGM_W158);
   not MGM_G194(MGM_W161,si_delay);
   and MGM_G195(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G196(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W162);
   not MGM_G197(MGM_W163,clk_delay);
   and MGM_G198(MGM_W164,d_delay,MGM_W163);
   not MGM_G199(MGM_W165,den_delay);
   and MGM_G200(MGM_W166,MGM_W165,MGM_W164);
   and MGM_G201(MGM_W167,si_delay,MGM_W166);
   not MGM_G202(MGM_W168,ssb_delay);
   and MGM_G203(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W168,MGM_W167);
   not MGM_G204(MGM_W169,clk_delay);
   and MGM_G205(MGM_W170,d_delay,MGM_W169);
   not MGM_G206(MGM_W171,den_delay);
   and MGM_G207(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G208(MGM_W173,si_delay,MGM_W172);
   and MGM_G209(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W173);
   not MGM_G210(MGM_W174,clk_delay);
   and MGM_G211(MGM_W175,d_delay,MGM_W174);
   and MGM_G212(MGM_W176,den_delay,MGM_W175);
   not MGM_G213(MGM_W177,si_delay);
   and MGM_G214(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G215(MGM_W179,ssb_delay);
   and MGM_G216(ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W179,MGM_W178);
   not MGM_G217(MGM_W180,clk_delay);
   and MGM_G218(MGM_W181,d_delay,MGM_W180);
   and MGM_G219(MGM_W182,den_delay,MGM_W181);
   not MGM_G220(MGM_W183,si_delay);
   and MGM_G221(MGM_W184,MGM_W183,MGM_W182);
   and MGM_G222(ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W184);
   not MGM_G223(MGM_W185,clk_delay);
   and MGM_G224(MGM_W186,d_delay,MGM_W185);
   and MGM_G225(MGM_W187,den_delay,MGM_W186);
   and MGM_G226(MGM_W188,si_delay,MGM_W187);
   not MGM_G227(MGM_W189,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_NOT_ssb,MGM_W189,MGM_W188);
   not MGM_G229(MGM_W190,clk_delay);
   and MGM_G230(MGM_W191,d_delay,MGM_W190);
   and MGM_G231(MGM_W192,den_delay,MGM_W191);
   and MGM_G232(MGM_W193,si_delay,MGM_W192);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W193);
   not MGM_G234(MGM_W194,d_delay);
   and MGM_G235(MGM_W195,MGM_W194,clk_delay);
   not MGM_G236(MGM_W196,den_delay);
   and MGM_G237(MGM_W197,MGM_W196,MGM_W195);
   not MGM_G238(MGM_W198,si_delay);
   and MGM_G239(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G240(MGM_W200,ssb_delay);
   and MGM_G241(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W200,MGM_W199);
   not MGM_G242(MGM_W201,d_delay);
   and MGM_G243(MGM_W202,MGM_W201,clk_delay);
   not MGM_G244(MGM_W203,den_delay);
   and MGM_G245(MGM_W204,MGM_W203,MGM_W202);
   not MGM_G246(MGM_W205,si_delay);
   and MGM_G247(MGM_W206,MGM_W205,MGM_W204);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W206);
   not MGM_G249(MGM_W207,d_delay);
   and MGM_G250(MGM_W208,MGM_W207,clk_delay);
   not MGM_G251(MGM_W209,den_delay);
   and MGM_G252(MGM_W210,MGM_W209,MGM_W208);
   and MGM_G253(MGM_W211,si_delay,MGM_W210);
   not MGM_G254(MGM_W212,ssb_delay);
   and MGM_G255(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   not MGM_G256(MGM_W213,d_delay);
   and MGM_G257(MGM_W214,MGM_W213,clk_delay);
   not MGM_G258(MGM_W215,den_delay);
   and MGM_G259(MGM_W216,MGM_W215,MGM_W214);
   and MGM_G260(MGM_W217,si_delay,MGM_W216);
   and MGM_G261(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W217);
   not MGM_G262(MGM_W218,d_delay);
   and MGM_G263(MGM_W219,MGM_W218,clk_delay);
   and MGM_G264(MGM_W220,den_delay,MGM_W219);
   not MGM_G265(MGM_W221,si_delay);
   and MGM_G266(MGM_W222,MGM_W221,MGM_W220);
   not MGM_G267(MGM_W223,ssb_delay);
   and MGM_G268(ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W223,MGM_W222);
   not MGM_G269(MGM_W224,d_delay);
   and MGM_G270(MGM_W225,MGM_W224,clk_delay);
   and MGM_G271(MGM_W226,den_delay,MGM_W225);
   not MGM_G272(MGM_W227,si_delay);
   and MGM_G273(MGM_W228,MGM_W227,MGM_W226);
   and MGM_G274(ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W228);
   not MGM_G275(MGM_W229,d_delay);
   and MGM_G276(MGM_W230,MGM_W229,clk_delay);
   and MGM_G277(MGM_W231,den_delay,MGM_W230);
   and MGM_G278(MGM_W232,si_delay,MGM_W231);
   not MGM_G279(MGM_W233,ssb_delay);
   and MGM_G280(ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W233,MGM_W232);
   not MGM_G281(MGM_W234,d_delay);
   and MGM_G282(MGM_W235,MGM_W234,clk_delay);
   and MGM_G283(MGM_W236,den_delay,MGM_W235);
   and MGM_G284(MGM_W237,si_delay,MGM_W236);
   and MGM_G285(ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W237);
   and MGM_G286(MGM_W238,d_delay,clk_delay);
   not MGM_G287(MGM_W239,den_delay);
   and MGM_G288(MGM_W240,MGM_W239,MGM_W238);
   not MGM_G289(MGM_W241,si_delay);
   and MGM_G290(MGM_W242,MGM_W241,MGM_W240);
   not MGM_G291(MGM_W243,ssb_delay);
   and MGM_G292(ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W243,MGM_W242);
   and MGM_G293(MGM_W244,d_delay,clk_delay);
   not MGM_G294(MGM_W245,den_delay);
   and MGM_G295(MGM_W246,MGM_W245,MGM_W244);
   not MGM_G296(MGM_W247,si_delay);
   and MGM_G297(MGM_W248,MGM_W247,MGM_W246);
   and MGM_G298(ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W248);
   and MGM_G299(MGM_W249,d_delay,clk_delay);
   not MGM_G300(MGM_W250,den_delay);
   and MGM_G301(MGM_W251,MGM_W250,MGM_W249);
   and MGM_G302(MGM_W252,si_delay,MGM_W251);
   not MGM_G303(MGM_W253,ssb_delay);
   and MGM_G304(ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W253,MGM_W252);
   and MGM_G305(MGM_W254,d_delay,clk_delay);
   not MGM_G306(MGM_W255,den_delay);
   and MGM_G307(MGM_W256,MGM_W255,MGM_W254);
   and MGM_G308(MGM_W257,si_delay,MGM_W256);
   and MGM_G309(ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W257);
   and MGM_G310(MGM_W258,d_delay,clk_delay);
   and MGM_G311(MGM_W259,den_delay,MGM_W258);
   not MGM_G312(MGM_W260,si_delay);
   and MGM_G313(MGM_W261,MGM_W260,MGM_W259);
   not MGM_G314(MGM_W262,ssb_delay);
   and MGM_G315(ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W262,MGM_W261);
   and MGM_G316(MGM_W263,d_delay,clk_delay);
   and MGM_G317(MGM_W264,den_delay,MGM_W263);
   not MGM_G318(MGM_W265,si_delay);
   and MGM_G319(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G320(ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W266);
   and MGM_G321(MGM_W267,d_delay,clk_delay);
   and MGM_G322(MGM_W268,den_delay,MGM_W267);
   and MGM_G323(MGM_W269,si_delay,MGM_W268);
   not MGM_G324(MGM_W270,ssb_delay);
   and MGM_G325(ENABLE_clk_AND_d_AND_den_AND_si_AND_NOT_ssb,MGM_W270,MGM_W269);
   and MGM_G326(MGM_W271,d_delay,clk_delay);
   and MGM_G327(MGM_W272,den_delay,MGM_W271);
   and MGM_G328(MGM_W273,si_delay,MGM_W272);
   and MGM_G329(ENABLE_clk_AND_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W273);
   not MGM_G330(MGM_W274,d_delay);
   not MGM_G331(MGM_W275,den_delay);
   and MGM_G332(MGM_W276,MGM_W275,MGM_W274);
   and MGM_G333(MGM_W277,rb_delay,MGM_W276);
   not MGM_G334(MGM_W278,ssb_delay);
   and MGM_G335(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb,MGM_W278,MGM_W277);
   not MGM_G336(MGM_W279,d_delay);
   and MGM_G337(MGM_W280,den_delay,MGM_W279);
   and MGM_G338(MGM_W281,rb_delay,MGM_W280);
   not MGM_G339(MGM_W282,ssb_delay);
   and MGM_G340(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb,MGM_W282,MGM_W281);
   not MGM_G341(MGM_W283,den_delay);
   and MGM_G342(MGM_W284,MGM_W283,d_delay);
   and MGM_G343(MGM_W285,rb_delay,MGM_W284);
   not MGM_G344(MGM_W286,ssb_delay);
   and MGM_G345(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb,MGM_W286,MGM_W285);
   and MGM_G346(MGM_W287,den_delay,d_delay);
   and MGM_G347(MGM_W288,rb_delay,MGM_W287);
   not MGM_G348(MGM_W289,ssb_delay);
   and MGM_G349(ENABLE_d_AND_den_AND_rb_AND_NOT_ssb,MGM_W289,MGM_W288);
   not MGM_G350(MGM_W290,d_delay);
   not MGM_G351(MGM_W291,den_delay);
   and MGM_G352(MGM_W292,MGM_W291,MGM_W290);
   and MGM_G353(MGM_W293,rb_delay,MGM_W292);
   not MGM_G354(MGM_W294,si_delay);
   and MGM_G355(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si,MGM_W294,MGM_W293);
   not MGM_G356(MGM_W295,d_delay);
   not MGM_G357(MGM_W296,den_delay);
   and MGM_G358(MGM_W297,MGM_W296,MGM_W295);
   and MGM_G359(MGM_W298,rb_delay,MGM_W297);
   and MGM_G360(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si,si_delay,MGM_W298);
   not MGM_G361(MGM_W299,d_delay);
   and MGM_G362(MGM_W300,den_delay,MGM_W299);
   and MGM_G363(MGM_W301,rb_delay,MGM_W300);
   and MGM_G364(ENABLE_NOT_d_AND_den_AND_rb_AND_si,si_delay,MGM_W301);
   not MGM_G365(MGM_W302,den_delay);
   and MGM_G366(MGM_W303,MGM_W302,d_delay);
   and MGM_G367(MGM_W304,rb_delay,MGM_W303);
   not MGM_G368(MGM_W305,si_delay);
   and MGM_G369(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si,MGM_W305,MGM_W304);
   not MGM_G370(MGM_W306,den_delay);
   and MGM_G371(MGM_W307,MGM_W306,d_delay);
   and MGM_G372(MGM_W308,rb_delay,MGM_W307);
   and MGM_G373(ENABLE_d_AND_NOT_den_AND_rb_AND_si,si_delay,MGM_W308);
   and MGM_G374(MGM_W309,den_delay,d_delay);
   and MGM_G375(MGM_W310,rb_delay,MGM_W309);
   not MGM_G376(MGM_W311,si_delay);
   and MGM_G377(ENABLE_d_AND_den_AND_rb_AND_NOT_si,MGM_W311,MGM_W310);
   // spec_gates_end
  specify
   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH

   // setuphold d- clk-LH

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH

   // setuphold den- clk-LH

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb,0.0,0,notifier);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH

   // setuphold si- clk-LH

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfvz043ad1d01x2( clk, d, den, o, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Mux-D scan Reduced-Cap FF with asynch reset and data-enable with no buffering on scan pin
// 
// 
// 
// assign  int1 =  den ? d : IQ;
// assign  int2 =  ssb ? int1 : si;
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= int2 ;
// end
// end
// 
// assign `i0sfvz043ad1d01x1b_delay o =  IQ;
// assign `i0sfvz043ad1d01x1b_delay so =  o;
// 

   input clk, d, den, rb, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire o_random_init;
wire so_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(o_random_init or so_random_init)
   if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
`else
   assign o = o_random_init;
   assign so = so_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz043ad_delay o_random_init = o_tmp ;
      assign `fvz043ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz043ad_delay o_random_init = o_tmp ;
      assign `fvz043ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d01x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d_delay);
   not MGM_G1(MGM_W1,den_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   and MGM_G3(MGM_W3,rb_delay,MGM_W2);
   not MGM_G4(MGM_W4,si_delay);
   and MGM_G5(MGM_W5,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W6,ssb_delay);
   and MGM_G7(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W6,MGM_W5);
   not MGM_G8(MGM_W7,d_delay);
   not MGM_G9(MGM_W8,den_delay);
   and MGM_G10(MGM_W9,MGM_W8,MGM_W7);
   and MGM_G11(MGM_W10,rb_delay,MGM_W9);
   and MGM_G12(MGM_W11,si_delay,MGM_W10);
   not MGM_G13(MGM_W12,ssb_delay);
   and MGM_G14(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W12,MGM_W11);
   not MGM_G15(MGM_W13,d_delay);
   and MGM_G16(MGM_W14,den_delay,MGM_W13);
   and MGM_G17(MGM_W15,rb_delay,MGM_W14);
   not MGM_G18(MGM_W16,si_delay);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,ssb_delay);
   and MGM_G21(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W18,MGM_W17);
   not MGM_G22(MGM_W19,d_delay);
   and MGM_G23(MGM_W20,den_delay,MGM_W19);
   and MGM_G24(MGM_W21,rb_delay,MGM_W20);
   not MGM_G25(MGM_W22,si_delay);
   and MGM_G26(MGM_W23,MGM_W22,MGM_W21);
   and MGM_G27(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W23);
   not MGM_G28(MGM_W24,d_delay);
   and MGM_G29(MGM_W25,den_delay,MGM_W24);
   and MGM_G30(MGM_W26,rb_delay,MGM_W25);
   and MGM_G31(MGM_W27,si_delay,MGM_W26);
   not MGM_G32(MGM_W28,ssb_delay);
   and MGM_G33(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W28,MGM_W27);
   not MGM_G34(MGM_W29,d_delay);
   and MGM_G35(MGM_W30,den_delay,MGM_W29);
   and MGM_G36(MGM_W31,rb_delay,MGM_W30);
   and MGM_G37(MGM_W32,si_delay,MGM_W31);
   and MGM_G38(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G39(MGM_W33,den_delay);
   and MGM_G40(MGM_W34,MGM_W33,d_delay);
   and MGM_G41(MGM_W35,rb_delay,MGM_W34);
   not MGM_G42(MGM_W36,si_delay);
   and MGM_G43(MGM_W37,MGM_W36,MGM_W35);
   not MGM_G44(MGM_W38,ssb_delay);
   and MGM_G45(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W38,MGM_W37);
   not MGM_G46(MGM_W39,den_delay);
   and MGM_G47(MGM_W40,MGM_W39,d_delay);
   and MGM_G48(MGM_W41,rb_delay,MGM_W40);
   and MGM_G49(MGM_W42,si_delay,MGM_W41);
   not MGM_G50(MGM_W43,ssb_delay);
   and MGM_G51(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W43,MGM_W42);
   and MGM_G52(MGM_W44,den_delay,d_delay);
   and MGM_G53(MGM_W45,rb_delay,MGM_W44);
   not MGM_G54(MGM_W46,si_delay);
   and MGM_G55(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G56(MGM_W48,ssb_delay);
   and MGM_G57(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W48,MGM_W47);
   and MGM_G58(MGM_W49,den_delay,d_delay);
   and MGM_G59(MGM_W50,rb_delay,MGM_W49);
   not MGM_G60(MGM_W51,si_delay);
   and MGM_G61(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G62(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W52);
   and MGM_G63(MGM_W53,den_delay,d_delay);
   and MGM_G64(MGM_W54,rb_delay,MGM_W53);
   and MGM_G65(MGM_W55,si_delay,MGM_W54);
   not MGM_G66(MGM_W56,ssb_delay);
   and MGM_G67(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W56,MGM_W55);
   and MGM_G68(MGM_W57,den_delay,d_delay);
   and MGM_G69(MGM_W58,rb_delay,MGM_W57);
   and MGM_G70(MGM_W59,si_delay,MGM_W58);
   and MGM_G71(ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W59);
   and MGM_G72(MGM_W60,rb_delay,den_delay);
   not MGM_G73(MGM_W61,si_delay);
   and MGM_G74(MGM_W62,MGM_W61,MGM_W60);
   and MGM_G75(ENABLE_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W62);
   and MGM_G76(MGM_W63,rb_delay,den_delay);
   and MGM_G77(MGM_W64,si_delay,MGM_W63);
   and MGM_G78(ENABLE_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W64);
   not MGM_G79(MGM_W65,d_delay);
   and MGM_G80(MGM_W66,rb_delay,MGM_W65);
   not MGM_G81(MGM_W67,si_delay);
   and MGM_G82(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G83(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W68);
   not MGM_G84(MGM_W69,d_delay);
   and MGM_G85(MGM_W70,rb_delay,MGM_W69);
   and MGM_G86(MGM_W71,si_delay,MGM_W70);
   and MGM_G87(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W71);
   and MGM_G88(MGM_W72,rb_delay,d_delay);
   not MGM_G89(MGM_W73,si_delay);
   and MGM_G90(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G91(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W74);
   and MGM_G92(MGM_W75,rb_delay,d_delay);
   and MGM_G93(MGM_W76,si_delay,MGM_W75);
   and MGM_G94(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W76);
   not MGM_G95(MGM_W77,d_delay);
   not MGM_G96(MGM_W78,den_delay);
   and MGM_G97(MGM_W79,MGM_W78,MGM_W77);
   and MGM_G98(MGM_W80,si_delay,MGM_W79);
   not MGM_G99(MGM_W81,ssb_delay);
   and MGM_G100(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W81,MGM_W80);
   not MGM_G101(MGM_W82,d_delay);
   and MGM_G102(MGM_W83,den_delay,MGM_W82);
   and MGM_G103(MGM_W84,si_delay,MGM_W83);
   not MGM_G104(MGM_W85,ssb_delay);
   and MGM_G105(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W85,MGM_W84);
   not MGM_G106(MGM_W86,den_delay);
   and MGM_G107(MGM_W87,MGM_W86,d_delay);
   and MGM_G108(MGM_W88,si_delay,MGM_W87);
   not MGM_G109(MGM_W89,ssb_delay);
   and MGM_G110(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W89,MGM_W88);
   and MGM_G111(MGM_W90,den_delay,d_delay);
   not MGM_G112(MGM_W91,si_delay);
   and MGM_G113(MGM_W92,MGM_W91,MGM_W90);
   and MGM_G114(ENABLE_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W92);
   and MGM_G115(MGM_W93,den_delay,d_delay);
   and MGM_G116(MGM_W94,si_delay,MGM_W93);
   not MGM_G117(MGM_W95,ssb_delay);
   and MGM_G118(ENABLE_d_AND_den_AND_si_AND_NOT_ssb,MGM_W95,MGM_W94);
   and MGM_G119(MGM_W96,den_delay,d_delay);
   and MGM_G120(MGM_W97,si_delay,MGM_W96);
   and MGM_G121(ENABLE_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W97);
   not MGM_G122(MGM_W98,clk_delay);
   not MGM_G123(MGM_W99,d_delay);
   and MGM_G124(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G125(MGM_W101,den_delay);
   and MGM_G126(MGM_W102,MGM_W101,MGM_W100);
   not MGM_G127(MGM_W103,si_delay);
   and MGM_G128(MGM_W104,MGM_W103,MGM_W102);
   not MGM_G129(MGM_W105,ssb_delay);
   and MGM_G130(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W105,MGM_W104);
   not MGM_G131(MGM_W106,clk_delay);
   not MGM_G132(MGM_W107,d_delay);
   and MGM_G133(MGM_W108,MGM_W107,MGM_W106);
   not MGM_G134(MGM_W109,den_delay);
   and MGM_G135(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G136(MGM_W111,si_delay);
   and MGM_G137(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G138(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G139(MGM_W113,clk_delay);
   not MGM_G140(MGM_W114,d_delay);
   and MGM_G141(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G142(MGM_W116,den_delay);
   and MGM_G143(MGM_W117,MGM_W116,MGM_W115);
   and MGM_G144(MGM_W118,si_delay,MGM_W117);
   not MGM_G145(MGM_W119,ssb_delay);
   and MGM_G146(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W119,MGM_W118);
   not MGM_G147(MGM_W120,clk_delay);
   not MGM_G148(MGM_W121,d_delay);
   and MGM_G149(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G150(MGM_W123,den_delay);
   and MGM_G151(MGM_W124,MGM_W123,MGM_W122);
   and MGM_G152(MGM_W125,si_delay,MGM_W124);
   and MGM_G153(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W125);
   not MGM_G154(MGM_W126,clk_delay);
   not MGM_G155(MGM_W127,d_delay);
   and MGM_G156(MGM_W128,MGM_W127,MGM_W126);
   and MGM_G157(MGM_W129,den_delay,MGM_W128);
   not MGM_G158(MGM_W130,si_delay);
   and MGM_G159(MGM_W131,MGM_W130,MGM_W129);
   not MGM_G160(MGM_W132,ssb_delay);
   and MGM_G161(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W132,MGM_W131);
   not MGM_G162(MGM_W133,clk_delay);
   not MGM_G163(MGM_W134,d_delay);
   and MGM_G164(MGM_W135,MGM_W134,MGM_W133);
   and MGM_G165(MGM_W136,den_delay,MGM_W135);
   not MGM_G166(MGM_W137,si_delay);
   and MGM_G167(MGM_W138,MGM_W137,MGM_W136);
   and MGM_G168(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W138);
   not MGM_G169(MGM_W139,clk_delay);
   not MGM_G170(MGM_W140,d_delay);
   and MGM_G171(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G172(MGM_W142,den_delay,MGM_W141);
   and MGM_G173(MGM_W143,si_delay,MGM_W142);
   not MGM_G174(MGM_W144,ssb_delay);
   and MGM_G175(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W144,MGM_W143);
   not MGM_G176(MGM_W145,clk_delay);
   not MGM_G177(MGM_W146,d_delay);
   and MGM_G178(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G179(MGM_W148,den_delay,MGM_W147);
   and MGM_G180(MGM_W149,si_delay,MGM_W148);
   and MGM_G181(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W149);
   not MGM_G182(MGM_W150,clk_delay);
   and MGM_G183(MGM_W151,d_delay,MGM_W150);
   not MGM_G184(MGM_W152,den_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G186(MGM_W154,si_delay);
   and MGM_G187(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G188(MGM_W156,ssb_delay);
   and MGM_G189(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G190(MGM_W157,clk_delay);
   and MGM_G191(MGM_W158,d_delay,MGM_W157);
   not MGM_G192(MGM_W159,den_delay);
   and MGM_G193(MGM_W160,MGM_W159,MGM_W158);
   not MGM_G194(MGM_W161,si_delay);
   and MGM_G195(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G196(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W162);
   not MGM_G197(MGM_W163,clk_delay);
   and MGM_G198(MGM_W164,d_delay,MGM_W163);
   not MGM_G199(MGM_W165,den_delay);
   and MGM_G200(MGM_W166,MGM_W165,MGM_W164);
   and MGM_G201(MGM_W167,si_delay,MGM_W166);
   not MGM_G202(MGM_W168,ssb_delay);
   and MGM_G203(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W168,MGM_W167);
   not MGM_G204(MGM_W169,clk_delay);
   and MGM_G205(MGM_W170,d_delay,MGM_W169);
   not MGM_G206(MGM_W171,den_delay);
   and MGM_G207(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G208(MGM_W173,si_delay,MGM_W172);
   and MGM_G209(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W173);
   not MGM_G210(MGM_W174,clk_delay);
   and MGM_G211(MGM_W175,d_delay,MGM_W174);
   and MGM_G212(MGM_W176,den_delay,MGM_W175);
   not MGM_G213(MGM_W177,si_delay);
   and MGM_G214(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G215(MGM_W179,ssb_delay);
   and MGM_G216(ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W179,MGM_W178);
   not MGM_G217(MGM_W180,clk_delay);
   and MGM_G218(MGM_W181,d_delay,MGM_W180);
   and MGM_G219(MGM_W182,den_delay,MGM_W181);
   not MGM_G220(MGM_W183,si_delay);
   and MGM_G221(MGM_W184,MGM_W183,MGM_W182);
   and MGM_G222(ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W184);
   not MGM_G223(MGM_W185,clk_delay);
   and MGM_G224(MGM_W186,d_delay,MGM_W185);
   and MGM_G225(MGM_W187,den_delay,MGM_W186);
   and MGM_G226(MGM_W188,si_delay,MGM_W187);
   not MGM_G227(MGM_W189,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_NOT_ssb,MGM_W189,MGM_W188);
   not MGM_G229(MGM_W190,clk_delay);
   and MGM_G230(MGM_W191,d_delay,MGM_W190);
   and MGM_G231(MGM_W192,den_delay,MGM_W191);
   and MGM_G232(MGM_W193,si_delay,MGM_W192);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W193);
   not MGM_G234(MGM_W194,d_delay);
   and MGM_G235(MGM_W195,MGM_W194,clk_delay);
   not MGM_G236(MGM_W196,den_delay);
   and MGM_G237(MGM_W197,MGM_W196,MGM_W195);
   not MGM_G238(MGM_W198,si_delay);
   and MGM_G239(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G240(MGM_W200,ssb_delay);
   and MGM_G241(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W200,MGM_W199);
   not MGM_G242(MGM_W201,d_delay);
   and MGM_G243(MGM_W202,MGM_W201,clk_delay);
   not MGM_G244(MGM_W203,den_delay);
   and MGM_G245(MGM_W204,MGM_W203,MGM_W202);
   not MGM_G246(MGM_W205,si_delay);
   and MGM_G247(MGM_W206,MGM_W205,MGM_W204);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W206);
   not MGM_G249(MGM_W207,d_delay);
   and MGM_G250(MGM_W208,MGM_W207,clk_delay);
   not MGM_G251(MGM_W209,den_delay);
   and MGM_G252(MGM_W210,MGM_W209,MGM_W208);
   and MGM_G253(MGM_W211,si_delay,MGM_W210);
   not MGM_G254(MGM_W212,ssb_delay);
   and MGM_G255(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   not MGM_G256(MGM_W213,d_delay);
   and MGM_G257(MGM_W214,MGM_W213,clk_delay);
   not MGM_G258(MGM_W215,den_delay);
   and MGM_G259(MGM_W216,MGM_W215,MGM_W214);
   and MGM_G260(MGM_W217,si_delay,MGM_W216);
   and MGM_G261(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W217);
   not MGM_G262(MGM_W218,d_delay);
   and MGM_G263(MGM_W219,MGM_W218,clk_delay);
   and MGM_G264(MGM_W220,den_delay,MGM_W219);
   not MGM_G265(MGM_W221,si_delay);
   and MGM_G266(MGM_W222,MGM_W221,MGM_W220);
   not MGM_G267(MGM_W223,ssb_delay);
   and MGM_G268(ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W223,MGM_W222);
   not MGM_G269(MGM_W224,d_delay);
   and MGM_G270(MGM_W225,MGM_W224,clk_delay);
   and MGM_G271(MGM_W226,den_delay,MGM_W225);
   not MGM_G272(MGM_W227,si_delay);
   and MGM_G273(MGM_W228,MGM_W227,MGM_W226);
   and MGM_G274(ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W228);
   not MGM_G275(MGM_W229,d_delay);
   and MGM_G276(MGM_W230,MGM_W229,clk_delay);
   and MGM_G277(MGM_W231,den_delay,MGM_W230);
   and MGM_G278(MGM_W232,si_delay,MGM_W231);
   not MGM_G279(MGM_W233,ssb_delay);
   and MGM_G280(ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W233,MGM_W232);
   not MGM_G281(MGM_W234,d_delay);
   and MGM_G282(MGM_W235,MGM_W234,clk_delay);
   and MGM_G283(MGM_W236,den_delay,MGM_W235);
   and MGM_G284(MGM_W237,si_delay,MGM_W236);
   and MGM_G285(ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W237);
   and MGM_G286(MGM_W238,d_delay,clk_delay);
   not MGM_G287(MGM_W239,den_delay);
   and MGM_G288(MGM_W240,MGM_W239,MGM_W238);
   not MGM_G289(MGM_W241,si_delay);
   and MGM_G290(MGM_W242,MGM_W241,MGM_W240);
   not MGM_G291(MGM_W243,ssb_delay);
   and MGM_G292(ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W243,MGM_W242);
   and MGM_G293(MGM_W244,d_delay,clk_delay);
   not MGM_G294(MGM_W245,den_delay);
   and MGM_G295(MGM_W246,MGM_W245,MGM_W244);
   not MGM_G296(MGM_W247,si_delay);
   and MGM_G297(MGM_W248,MGM_W247,MGM_W246);
   and MGM_G298(ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W248);
   and MGM_G299(MGM_W249,d_delay,clk_delay);
   not MGM_G300(MGM_W250,den_delay);
   and MGM_G301(MGM_W251,MGM_W250,MGM_W249);
   and MGM_G302(MGM_W252,si_delay,MGM_W251);
   not MGM_G303(MGM_W253,ssb_delay);
   and MGM_G304(ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W253,MGM_W252);
   and MGM_G305(MGM_W254,d_delay,clk_delay);
   not MGM_G306(MGM_W255,den_delay);
   and MGM_G307(MGM_W256,MGM_W255,MGM_W254);
   and MGM_G308(MGM_W257,si_delay,MGM_W256);
   and MGM_G309(ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W257);
   and MGM_G310(MGM_W258,d_delay,clk_delay);
   and MGM_G311(MGM_W259,den_delay,MGM_W258);
   not MGM_G312(MGM_W260,si_delay);
   and MGM_G313(MGM_W261,MGM_W260,MGM_W259);
   not MGM_G314(MGM_W262,ssb_delay);
   and MGM_G315(ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W262,MGM_W261);
   and MGM_G316(MGM_W263,d_delay,clk_delay);
   and MGM_G317(MGM_W264,den_delay,MGM_W263);
   not MGM_G318(MGM_W265,si_delay);
   and MGM_G319(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G320(ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W266);
   and MGM_G321(MGM_W267,d_delay,clk_delay);
   and MGM_G322(MGM_W268,den_delay,MGM_W267);
   and MGM_G323(MGM_W269,si_delay,MGM_W268);
   not MGM_G324(MGM_W270,ssb_delay);
   and MGM_G325(ENABLE_clk_AND_d_AND_den_AND_si_AND_NOT_ssb,MGM_W270,MGM_W269);
   and MGM_G326(MGM_W271,d_delay,clk_delay);
   and MGM_G327(MGM_W272,den_delay,MGM_W271);
   and MGM_G328(MGM_W273,si_delay,MGM_W272);
   and MGM_G329(ENABLE_clk_AND_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W273);
   not MGM_G330(MGM_W274,d_delay);
   not MGM_G331(MGM_W275,den_delay);
   and MGM_G332(MGM_W276,MGM_W275,MGM_W274);
   and MGM_G333(MGM_W277,rb_delay,MGM_W276);
   not MGM_G334(MGM_W278,ssb_delay);
   and MGM_G335(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb,MGM_W278,MGM_W277);
   not MGM_G336(MGM_W279,d_delay);
   and MGM_G337(MGM_W280,den_delay,MGM_W279);
   and MGM_G338(MGM_W281,rb_delay,MGM_W280);
   not MGM_G339(MGM_W282,ssb_delay);
   and MGM_G340(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb,MGM_W282,MGM_W281);
   not MGM_G341(MGM_W283,den_delay);
   and MGM_G342(MGM_W284,MGM_W283,d_delay);
   and MGM_G343(MGM_W285,rb_delay,MGM_W284);
   not MGM_G344(MGM_W286,ssb_delay);
   and MGM_G345(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb,MGM_W286,MGM_W285);
   and MGM_G346(MGM_W287,den_delay,d_delay);
   and MGM_G347(MGM_W288,rb_delay,MGM_W287);
   not MGM_G348(MGM_W289,ssb_delay);
   and MGM_G349(ENABLE_d_AND_den_AND_rb_AND_NOT_ssb,MGM_W289,MGM_W288);
   not MGM_G350(MGM_W290,d_delay);
   not MGM_G351(MGM_W291,den_delay);
   and MGM_G352(MGM_W292,MGM_W291,MGM_W290);
   and MGM_G353(MGM_W293,rb_delay,MGM_W292);
   not MGM_G354(MGM_W294,si_delay);
   and MGM_G355(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si,MGM_W294,MGM_W293);
   not MGM_G356(MGM_W295,d_delay);
   not MGM_G357(MGM_W296,den_delay);
   and MGM_G358(MGM_W297,MGM_W296,MGM_W295);
   and MGM_G359(MGM_W298,rb_delay,MGM_W297);
   and MGM_G360(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si,si_delay,MGM_W298);
   not MGM_G361(MGM_W299,d_delay);
   and MGM_G362(MGM_W300,den_delay,MGM_W299);
   and MGM_G363(MGM_W301,rb_delay,MGM_W300);
   and MGM_G364(ENABLE_NOT_d_AND_den_AND_rb_AND_si,si_delay,MGM_W301);
   not MGM_G365(MGM_W302,den_delay);
   and MGM_G366(MGM_W303,MGM_W302,d_delay);
   and MGM_G367(MGM_W304,rb_delay,MGM_W303);
   not MGM_G368(MGM_W305,si_delay);
   and MGM_G369(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si,MGM_W305,MGM_W304);
   not MGM_G370(MGM_W306,den_delay);
   and MGM_G371(MGM_W307,MGM_W306,d_delay);
   and MGM_G372(MGM_W308,rb_delay,MGM_W307);
   and MGM_G373(ENABLE_d_AND_NOT_den_AND_rb_AND_si,si_delay,MGM_W308);
   and MGM_G374(MGM_W309,den_delay,d_delay);
   and MGM_G375(MGM_W310,rb_delay,MGM_W309);
   not MGM_G376(MGM_W311,si_delay);
   and MGM_G377(ENABLE_d_AND_den_AND_rb_AND_NOT_si,MGM_W311,MGM_W310);
   // spec_gates_end
  specify
   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH

   // setuphold d- clk-LH

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH

   // setuphold den- clk-LH

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb,0.0,0,notifier);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH

   // setuphold si- clk-LH

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfvz043ad1d02x2( clk, d, den, o, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Mux-D scan Reduced-Cap FF with asynch reset and data-enable with no buffering on scan pin
// 
// 
// 
// assign  int1 =  den ? d : IQ;
// assign  int2 =  ssb ? int1 : si;
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= int2 ;
// end
// end
// 
// assign `i0sfvz043ad1d01x1b_delay o =  IQ;
// assign `i0sfvz043ad1d01x1b_delay so =  o;
// 

   input clk, d, den, rb, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif


wire o_random_init;
wire so_random_init;
`ifdef random_init_enable
   reg random_init_ctrl_gls;
   reg init_val;
   initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
   always @(o_random_init or so_random_init)
   if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
   assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
   assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
`else
   assign o = o_random_init;
   assign so = so_random_init;
`endif

`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz043ad_delay o_random_init = o_tmp ;
      assign `fvz043ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d02x2_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz043ad_delay o_random_init = o_tmp ;
      assign `fvz043ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else

   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz043ad_func i0sfvz043ad1d02x2_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
  //this is needed for SiS to generate arcs

   // spec_gates_begin
   not MGM_G0(MGM_W0,d_delay);
   not MGM_G1(MGM_W1,den_delay);
   and MGM_G2(MGM_W2,MGM_W1,MGM_W0);
   and MGM_G3(MGM_W3,rb_delay,MGM_W2);
   not MGM_G4(MGM_W4,si_delay);
   and MGM_G5(MGM_W5,MGM_W4,MGM_W3);
   not MGM_G6(MGM_W6,ssb_delay);
   and MGM_G7(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W6,MGM_W5);
   not MGM_G8(MGM_W7,d_delay);
   not MGM_G9(MGM_W8,den_delay);
   and MGM_G10(MGM_W9,MGM_W8,MGM_W7);
   and MGM_G11(MGM_W10,rb_delay,MGM_W9);
   and MGM_G12(MGM_W11,si_delay,MGM_W10);
   not MGM_G13(MGM_W12,ssb_delay);
   and MGM_G14(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W12,MGM_W11);
   not MGM_G15(MGM_W13,d_delay);
   and MGM_G16(MGM_W14,den_delay,MGM_W13);
   and MGM_G17(MGM_W15,rb_delay,MGM_W14);
   not MGM_G18(MGM_W16,si_delay);
   and MGM_G19(MGM_W17,MGM_W16,MGM_W15);
   not MGM_G20(MGM_W18,ssb_delay);
   and MGM_G21(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W18,MGM_W17);
   not MGM_G22(MGM_W19,d_delay);
   and MGM_G23(MGM_W20,den_delay,MGM_W19);
   and MGM_G24(MGM_W21,rb_delay,MGM_W20);
   not MGM_G25(MGM_W22,si_delay);
   and MGM_G26(MGM_W23,MGM_W22,MGM_W21);
   and MGM_G27(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W23);
   not MGM_G28(MGM_W24,d_delay);
   and MGM_G29(MGM_W25,den_delay,MGM_W24);
   and MGM_G30(MGM_W26,rb_delay,MGM_W25);
   and MGM_G31(MGM_W27,si_delay,MGM_W26);
   not MGM_G32(MGM_W28,ssb_delay);
   and MGM_G33(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W28,MGM_W27);
   not MGM_G34(MGM_W29,d_delay);
   and MGM_G35(MGM_W30,den_delay,MGM_W29);
   and MGM_G36(MGM_W31,rb_delay,MGM_W30);
   and MGM_G37(MGM_W32,si_delay,MGM_W31);
   and MGM_G38(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W32);
   not MGM_G39(MGM_W33,den_delay);
   and MGM_G40(MGM_W34,MGM_W33,d_delay);
   and MGM_G41(MGM_W35,rb_delay,MGM_W34);
   not MGM_G42(MGM_W36,si_delay);
   and MGM_G43(MGM_W37,MGM_W36,MGM_W35);
   not MGM_G44(MGM_W38,ssb_delay);
   and MGM_G45(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W38,MGM_W37);
   not MGM_G46(MGM_W39,den_delay);
   and MGM_G47(MGM_W40,MGM_W39,d_delay);
   and MGM_G48(MGM_W41,rb_delay,MGM_W40);
   and MGM_G49(MGM_W42,si_delay,MGM_W41);
   not MGM_G50(MGM_W43,ssb_delay);
   and MGM_G51(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W43,MGM_W42);
   and MGM_G52(MGM_W44,den_delay,d_delay);
   and MGM_G53(MGM_W45,rb_delay,MGM_W44);
   not MGM_G54(MGM_W46,si_delay);
   and MGM_G55(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G56(MGM_W48,ssb_delay);
   and MGM_G57(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W48,MGM_W47);
   and MGM_G58(MGM_W49,den_delay,d_delay);
   and MGM_G59(MGM_W50,rb_delay,MGM_W49);
   not MGM_G60(MGM_W51,si_delay);
   and MGM_G61(MGM_W52,MGM_W51,MGM_W50);
   and MGM_G62(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W52);
   and MGM_G63(MGM_W53,den_delay,d_delay);
   and MGM_G64(MGM_W54,rb_delay,MGM_W53);
   and MGM_G65(MGM_W55,si_delay,MGM_W54);
   not MGM_G66(MGM_W56,ssb_delay);
   and MGM_G67(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W56,MGM_W55);
   and MGM_G68(MGM_W57,den_delay,d_delay);
   and MGM_G69(MGM_W58,rb_delay,MGM_W57);
   and MGM_G70(MGM_W59,si_delay,MGM_W58);
   and MGM_G71(ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W59);
   and MGM_G72(MGM_W60,rb_delay,den_delay);
   not MGM_G73(MGM_W61,si_delay);
   and MGM_G74(MGM_W62,MGM_W61,MGM_W60);
   and MGM_G75(ENABLE_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W62);
   and MGM_G76(MGM_W63,rb_delay,den_delay);
   and MGM_G77(MGM_W64,si_delay,MGM_W63);
   and MGM_G78(ENABLE_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W64);
   not MGM_G79(MGM_W65,d_delay);
   and MGM_G80(MGM_W66,rb_delay,MGM_W65);
   not MGM_G81(MGM_W67,si_delay);
   and MGM_G82(MGM_W68,MGM_W67,MGM_W66);
   and MGM_G83(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W68);
   not MGM_G84(MGM_W69,d_delay);
   and MGM_G85(MGM_W70,rb_delay,MGM_W69);
   and MGM_G86(MGM_W71,si_delay,MGM_W70);
   and MGM_G87(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W71);
   and MGM_G88(MGM_W72,rb_delay,d_delay);
   not MGM_G89(MGM_W73,si_delay);
   and MGM_G90(MGM_W74,MGM_W73,MGM_W72);
   and MGM_G91(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W74);
   and MGM_G92(MGM_W75,rb_delay,d_delay);
   and MGM_G93(MGM_W76,si_delay,MGM_W75);
   and MGM_G94(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W76);
   not MGM_G95(MGM_W77,d_delay);
   not MGM_G96(MGM_W78,den_delay);
   and MGM_G97(MGM_W79,MGM_W78,MGM_W77);
   and MGM_G98(MGM_W80,si_delay,MGM_W79);
   not MGM_G99(MGM_W81,ssb_delay);
   and MGM_G100(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W81,MGM_W80);
   not MGM_G101(MGM_W82,d_delay);
   and MGM_G102(MGM_W83,den_delay,MGM_W82);
   and MGM_G103(MGM_W84,si_delay,MGM_W83);
   not MGM_G104(MGM_W85,ssb_delay);
   and MGM_G105(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W85,MGM_W84);
   not MGM_G106(MGM_W86,den_delay);
   and MGM_G107(MGM_W87,MGM_W86,d_delay);
   and MGM_G108(MGM_W88,si_delay,MGM_W87);
   not MGM_G109(MGM_W89,ssb_delay);
   and MGM_G110(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W89,MGM_W88);
   and MGM_G111(MGM_W90,den_delay,d_delay);
   not MGM_G112(MGM_W91,si_delay);
   and MGM_G113(MGM_W92,MGM_W91,MGM_W90);
   and MGM_G114(ENABLE_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W92);
   and MGM_G115(MGM_W93,den_delay,d_delay);
   and MGM_G116(MGM_W94,si_delay,MGM_W93);
   not MGM_G117(MGM_W95,ssb_delay);
   and MGM_G118(ENABLE_d_AND_den_AND_si_AND_NOT_ssb,MGM_W95,MGM_W94);
   and MGM_G119(MGM_W96,den_delay,d_delay);
   and MGM_G120(MGM_W97,si_delay,MGM_W96);
   and MGM_G121(ENABLE_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W97);
   not MGM_G122(MGM_W98,clk_delay);
   not MGM_G123(MGM_W99,d_delay);
   and MGM_G124(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G125(MGM_W101,den_delay);
   and MGM_G126(MGM_W102,MGM_W101,MGM_W100);
   not MGM_G127(MGM_W103,si_delay);
   and MGM_G128(MGM_W104,MGM_W103,MGM_W102);
   not MGM_G129(MGM_W105,ssb_delay);
   and MGM_G130(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W105,MGM_W104);
   not MGM_G131(MGM_W106,clk_delay);
   not MGM_G132(MGM_W107,d_delay);
   and MGM_G133(MGM_W108,MGM_W107,MGM_W106);
   not MGM_G134(MGM_W109,den_delay);
   and MGM_G135(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G136(MGM_W111,si_delay);
   and MGM_G137(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G138(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G139(MGM_W113,clk_delay);
   not MGM_G140(MGM_W114,d_delay);
   and MGM_G141(MGM_W115,MGM_W114,MGM_W113);
   not MGM_G142(MGM_W116,den_delay);
   and MGM_G143(MGM_W117,MGM_W116,MGM_W115);
   and MGM_G144(MGM_W118,si_delay,MGM_W117);
   not MGM_G145(MGM_W119,ssb_delay);
   and MGM_G146(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W119,MGM_W118);
   not MGM_G147(MGM_W120,clk_delay);
   not MGM_G148(MGM_W121,d_delay);
   and MGM_G149(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G150(MGM_W123,den_delay);
   and MGM_G151(MGM_W124,MGM_W123,MGM_W122);
   and MGM_G152(MGM_W125,si_delay,MGM_W124);
   and MGM_G153(ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W125);
   not MGM_G154(MGM_W126,clk_delay);
   not MGM_G155(MGM_W127,d_delay);
   and MGM_G156(MGM_W128,MGM_W127,MGM_W126);
   and MGM_G157(MGM_W129,den_delay,MGM_W128);
   not MGM_G158(MGM_W130,si_delay);
   and MGM_G159(MGM_W131,MGM_W130,MGM_W129);
   not MGM_G160(MGM_W132,ssb_delay);
   and MGM_G161(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W132,MGM_W131);
   not MGM_G162(MGM_W133,clk_delay);
   not MGM_G163(MGM_W134,d_delay);
   and MGM_G164(MGM_W135,MGM_W134,MGM_W133);
   and MGM_G165(MGM_W136,den_delay,MGM_W135);
   not MGM_G166(MGM_W137,si_delay);
   and MGM_G167(MGM_W138,MGM_W137,MGM_W136);
   and MGM_G168(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W138);
   not MGM_G169(MGM_W139,clk_delay);
   not MGM_G170(MGM_W140,d_delay);
   and MGM_G171(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G172(MGM_W142,den_delay,MGM_W141);
   and MGM_G173(MGM_W143,si_delay,MGM_W142);
   not MGM_G174(MGM_W144,ssb_delay);
   and MGM_G175(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W144,MGM_W143);
   not MGM_G176(MGM_W145,clk_delay);
   not MGM_G177(MGM_W146,d_delay);
   and MGM_G178(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G179(MGM_W148,den_delay,MGM_W147);
   and MGM_G180(MGM_W149,si_delay,MGM_W148);
   and MGM_G181(ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W149);
   not MGM_G182(MGM_W150,clk_delay);
   and MGM_G183(MGM_W151,d_delay,MGM_W150);
   not MGM_G184(MGM_W152,den_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   not MGM_G186(MGM_W154,si_delay);
   and MGM_G187(MGM_W155,MGM_W154,MGM_W153);
   not MGM_G188(MGM_W156,ssb_delay);
   and MGM_G189(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W156,MGM_W155);
   not MGM_G190(MGM_W157,clk_delay);
   and MGM_G191(MGM_W158,d_delay,MGM_W157);
   not MGM_G192(MGM_W159,den_delay);
   and MGM_G193(MGM_W160,MGM_W159,MGM_W158);
   not MGM_G194(MGM_W161,si_delay);
   and MGM_G195(MGM_W162,MGM_W161,MGM_W160);
   and MGM_G196(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W162);
   not MGM_G197(MGM_W163,clk_delay);
   and MGM_G198(MGM_W164,d_delay,MGM_W163);
   not MGM_G199(MGM_W165,den_delay);
   and MGM_G200(MGM_W166,MGM_W165,MGM_W164);
   and MGM_G201(MGM_W167,si_delay,MGM_W166);
   not MGM_G202(MGM_W168,ssb_delay);
   and MGM_G203(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W168,MGM_W167);
   not MGM_G204(MGM_W169,clk_delay);
   and MGM_G205(MGM_W170,d_delay,MGM_W169);
   not MGM_G206(MGM_W171,den_delay);
   and MGM_G207(MGM_W172,MGM_W171,MGM_W170);
   and MGM_G208(MGM_W173,si_delay,MGM_W172);
   and MGM_G209(ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W173);
   not MGM_G210(MGM_W174,clk_delay);
   and MGM_G211(MGM_W175,d_delay,MGM_W174);
   and MGM_G212(MGM_W176,den_delay,MGM_W175);
   not MGM_G213(MGM_W177,si_delay);
   and MGM_G214(MGM_W178,MGM_W177,MGM_W176);
   not MGM_G215(MGM_W179,ssb_delay);
   and MGM_G216(ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W179,MGM_W178);
   not MGM_G217(MGM_W180,clk_delay);
   and MGM_G218(MGM_W181,d_delay,MGM_W180);
   and MGM_G219(MGM_W182,den_delay,MGM_W181);
   not MGM_G220(MGM_W183,si_delay);
   and MGM_G221(MGM_W184,MGM_W183,MGM_W182);
   and MGM_G222(ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W184);
   not MGM_G223(MGM_W185,clk_delay);
   and MGM_G224(MGM_W186,d_delay,MGM_W185);
   and MGM_G225(MGM_W187,den_delay,MGM_W186);
   and MGM_G226(MGM_W188,si_delay,MGM_W187);
   not MGM_G227(MGM_W189,ssb_delay);
   and MGM_G228(ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_NOT_ssb,MGM_W189,MGM_W188);
   not MGM_G229(MGM_W190,clk_delay);
   and MGM_G230(MGM_W191,d_delay,MGM_W190);
   and MGM_G231(MGM_W192,den_delay,MGM_W191);
   and MGM_G232(MGM_W193,si_delay,MGM_W192);
   and MGM_G233(ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W193);
   not MGM_G234(MGM_W194,d_delay);
   and MGM_G235(MGM_W195,MGM_W194,clk_delay);
   not MGM_G236(MGM_W196,den_delay);
   and MGM_G237(MGM_W197,MGM_W196,MGM_W195);
   not MGM_G238(MGM_W198,si_delay);
   and MGM_G239(MGM_W199,MGM_W198,MGM_W197);
   not MGM_G240(MGM_W200,ssb_delay);
   and MGM_G241(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W200,MGM_W199);
   not MGM_G242(MGM_W201,d_delay);
   and MGM_G243(MGM_W202,MGM_W201,clk_delay);
   not MGM_G244(MGM_W203,den_delay);
   and MGM_G245(MGM_W204,MGM_W203,MGM_W202);
   not MGM_G246(MGM_W205,si_delay);
   and MGM_G247(MGM_W206,MGM_W205,MGM_W204);
   and MGM_G248(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W206);
   not MGM_G249(MGM_W207,d_delay);
   and MGM_G250(MGM_W208,MGM_W207,clk_delay);
   not MGM_G251(MGM_W209,den_delay);
   and MGM_G252(MGM_W210,MGM_W209,MGM_W208);
   and MGM_G253(MGM_W211,si_delay,MGM_W210);
   not MGM_G254(MGM_W212,ssb_delay);
   and MGM_G255(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W212,MGM_W211);
   not MGM_G256(MGM_W213,d_delay);
   and MGM_G257(MGM_W214,MGM_W213,clk_delay);
   not MGM_G258(MGM_W215,den_delay);
   and MGM_G259(MGM_W216,MGM_W215,MGM_W214);
   and MGM_G260(MGM_W217,si_delay,MGM_W216);
   and MGM_G261(ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W217);
   not MGM_G262(MGM_W218,d_delay);
   and MGM_G263(MGM_W219,MGM_W218,clk_delay);
   and MGM_G264(MGM_W220,den_delay,MGM_W219);
   not MGM_G265(MGM_W221,si_delay);
   and MGM_G266(MGM_W222,MGM_W221,MGM_W220);
   not MGM_G267(MGM_W223,ssb_delay);
   and MGM_G268(ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W223,MGM_W222);
   not MGM_G269(MGM_W224,d_delay);
   and MGM_G270(MGM_W225,MGM_W224,clk_delay);
   and MGM_G271(MGM_W226,den_delay,MGM_W225);
   not MGM_G272(MGM_W227,si_delay);
   and MGM_G273(MGM_W228,MGM_W227,MGM_W226);
   and MGM_G274(ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W228);
   not MGM_G275(MGM_W229,d_delay);
   and MGM_G276(MGM_W230,MGM_W229,clk_delay);
   and MGM_G277(MGM_W231,den_delay,MGM_W230);
   and MGM_G278(MGM_W232,si_delay,MGM_W231);
   not MGM_G279(MGM_W233,ssb_delay);
   and MGM_G280(ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb,MGM_W233,MGM_W232);
   not MGM_G281(MGM_W234,d_delay);
   and MGM_G282(MGM_W235,MGM_W234,clk_delay);
   and MGM_G283(MGM_W236,den_delay,MGM_W235);
   and MGM_G284(MGM_W237,si_delay,MGM_W236);
   and MGM_G285(ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W237);
   and MGM_G286(MGM_W238,d_delay,clk_delay);
   not MGM_G287(MGM_W239,den_delay);
   and MGM_G288(MGM_W240,MGM_W239,MGM_W238);
   not MGM_G289(MGM_W241,si_delay);
   and MGM_G290(MGM_W242,MGM_W241,MGM_W240);
   not MGM_G291(MGM_W243,ssb_delay);
   and MGM_G292(ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb,MGM_W243,MGM_W242);
   and MGM_G293(MGM_W244,d_delay,clk_delay);
   not MGM_G294(MGM_W245,den_delay);
   and MGM_G295(MGM_W246,MGM_W245,MGM_W244);
   not MGM_G296(MGM_W247,si_delay);
   and MGM_G297(MGM_W248,MGM_W247,MGM_W246);
   and MGM_G298(ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W248);
   and MGM_G299(MGM_W249,d_delay,clk_delay);
   not MGM_G300(MGM_W250,den_delay);
   and MGM_G301(MGM_W251,MGM_W250,MGM_W249);
   and MGM_G302(MGM_W252,si_delay,MGM_W251);
   not MGM_G303(MGM_W253,ssb_delay);
   and MGM_G304(ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb,MGM_W253,MGM_W252);
   and MGM_G305(MGM_W254,d_delay,clk_delay);
   not MGM_G306(MGM_W255,den_delay);
   and MGM_G307(MGM_W256,MGM_W255,MGM_W254);
   and MGM_G308(MGM_W257,si_delay,MGM_W256);
   and MGM_G309(ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_ssb,ssb_delay,MGM_W257);
   and MGM_G310(MGM_W258,d_delay,clk_delay);
   and MGM_G311(MGM_W259,den_delay,MGM_W258);
   not MGM_G312(MGM_W260,si_delay);
   and MGM_G313(MGM_W261,MGM_W260,MGM_W259);
   not MGM_G314(MGM_W262,ssb_delay);
   and MGM_G315(ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb,MGM_W262,MGM_W261);
   and MGM_G316(MGM_W263,d_delay,clk_delay);
   and MGM_G317(MGM_W264,den_delay,MGM_W263);
   not MGM_G318(MGM_W265,si_delay);
   and MGM_G319(MGM_W266,MGM_W265,MGM_W264);
   and MGM_G320(ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_ssb,ssb_delay,MGM_W266);
   and MGM_G321(MGM_W267,d_delay,clk_delay);
   and MGM_G322(MGM_W268,den_delay,MGM_W267);
   and MGM_G323(MGM_W269,si_delay,MGM_W268);
   not MGM_G324(MGM_W270,ssb_delay);
   and MGM_G325(ENABLE_clk_AND_d_AND_den_AND_si_AND_NOT_ssb,MGM_W270,MGM_W269);
   and MGM_G326(MGM_W271,d_delay,clk_delay);
   and MGM_G327(MGM_W272,den_delay,MGM_W271);
   and MGM_G328(MGM_W273,si_delay,MGM_W272);
   and MGM_G329(ENABLE_clk_AND_d_AND_den_AND_si_AND_ssb,ssb_delay,MGM_W273);
   not MGM_G330(MGM_W274,d_delay);
   not MGM_G331(MGM_W275,den_delay);
   and MGM_G332(MGM_W276,MGM_W275,MGM_W274);
   and MGM_G333(MGM_W277,rb_delay,MGM_W276);
   not MGM_G334(MGM_W278,ssb_delay);
   and MGM_G335(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb,MGM_W278,MGM_W277);
   not MGM_G336(MGM_W279,d_delay);
   and MGM_G337(MGM_W280,den_delay,MGM_W279);
   and MGM_G338(MGM_W281,rb_delay,MGM_W280);
   not MGM_G339(MGM_W282,ssb_delay);
   and MGM_G340(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb,MGM_W282,MGM_W281);
   not MGM_G341(MGM_W283,den_delay);
   and MGM_G342(MGM_W284,MGM_W283,d_delay);
   and MGM_G343(MGM_W285,rb_delay,MGM_W284);
   not MGM_G344(MGM_W286,ssb_delay);
   and MGM_G345(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb,MGM_W286,MGM_W285);
   and MGM_G346(MGM_W287,den_delay,d_delay);
   and MGM_G347(MGM_W288,rb_delay,MGM_W287);
   not MGM_G348(MGM_W289,ssb_delay);
   and MGM_G349(ENABLE_d_AND_den_AND_rb_AND_NOT_ssb,MGM_W289,MGM_W288);
   not MGM_G350(MGM_W290,d_delay);
   not MGM_G351(MGM_W291,den_delay);
   and MGM_G352(MGM_W292,MGM_W291,MGM_W290);
   and MGM_G353(MGM_W293,rb_delay,MGM_W292);
   not MGM_G354(MGM_W294,si_delay);
   and MGM_G355(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si,MGM_W294,MGM_W293);
   not MGM_G356(MGM_W295,d_delay);
   not MGM_G357(MGM_W296,den_delay);
   and MGM_G358(MGM_W297,MGM_W296,MGM_W295);
   and MGM_G359(MGM_W298,rb_delay,MGM_W297);
   and MGM_G360(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si,si_delay,MGM_W298);
   not MGM_G361(MGM_W299,d_delay);
   and MGM_G362(MGM_W300,den_delay,MGM_W299);
   and MGM_G363(MGM_W301,rb_delay,MGM_W300);
   and MGM_G364(ENABLE_NOT_d_AND_den_AND_rb_AND_si,si_delay,MGM_W301);
   not MGM_G365(MGM_W302,den_delay);
   and MGM_G366(MGM_W303,MGM_W302,d_delay);
   and MGM_G367(MGM_W304,rb_delay,MGM_W303);
   not MGM_G368(MGM_W305,si_delay);
   and MGM_G369(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si,MGM_W305,MGM_W304);
   not MGM_G370(MGM_W306,den_delay);
   and MGM_G371(MGM_W307,MGM_W306,d_delay);
   and MGM_G372(MGM_W308,rb_delay,MGM_W307);
   and MGM_G373(ENABLE_d_AND_NOT_den_AND_rb_AND_si,si_delay,MGM_W308);
   and MGM_G374(MGM_W309,den_delay,d_delay);
   and MGM_G375(MGM_W310,rb_delay,MGM_W309);
   not MGM_G376(MGM_W311,si_delay);
   and MGM_G377(ENABLE_d_AND_den_AND_rb_AND_NOT_si,MGM_W311,MGM_W310);
   // spec_gates_end
  specify
   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> o
   (posedge clk => (o : d))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc rb --> o
   (negedge rb => (o +: 1'b0))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   ifnone
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc clk --> so
   (posedge clk => (so : d))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b0)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && ssb==1'b1)
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   ifnone
   // seq arc rb --> so
   (negedge rb => (so +: 1'b0))  = (0.0,0.0);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge clk,0.0,0,notifier);

   $width(posedge clk,0.0,0,notifier);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH
   $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,d_delay);

   // setuphold d- clk-LH

   // setuphold d- clk-LH

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,den_delay);

   // setuphold den- clk-LH

   // setuphold den- clk-LH

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1),
		posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_ssb == 1'b1),
		0.0,0.0,notifier,,,rb_delay,clk_delay);

   // recrem rb-clk-posedge
   $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_NOT_clk_AND_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_NOT_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_NOT_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_NOT_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_si_AND_NOT_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb &&& (ENABLE_clk_AND_d_AND_den_AND_si_AND_ssb == 1'b1)
		,0.0,0,notifier);

   $width(negedge rb,0.0,0,notifier);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_ssb == 1'b1),
		0.0,0.0,notifier,,,clk_delay,si_delay);

   // setuphold si- clk-LH

   // setuphold si- clk-LH

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH
   $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si == 1'b1),
		0.0,0.0,notifier,,,clk_delay,ssb_delay);

   // setuphold ssb- clk-LH

   // setuphold ssb- clk-LH

  endspecify
`endif
endmodule
`endcelldefine 




`celldefine 


module i0sfvz08bad1d01x1( clkb, d, o, rb, s, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Mux-D scan D-FF with asynchronous preset and reset + scan-in buffering o = if not(rb) then val0 else if not(s) then val1 else (si*!ssb+d*ssb) on falling clkb
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (negedge clkb or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz08bad_delay o =  IQ;
// assign `fvz08bad_delay so =  IQ;
// 

   input clkb, d, rb, s, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz08bad_delay o_random_init = o_tmp ;
      assign `fvz08bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz08bad_delay o_random_init = o_tmp ;
      assign `fvz08bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G122(MGM_W100,d_delay);
   and MGM_G123(MGM_W101,rb_delay,MGM_W100);
   not MGM_G124(MGM_W102,s_delay);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,si_delay);
   and MGM_G127(MGM_W105,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W106,ssb_delay);
   and MGM_G129(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W106,MGM_W105);
   not MGM_G130(MGM_W107,d_delay);
   and MGM_G131(MGM_W108,rb_delay,MGM_W107);
   not MGM_G132(MGM_W109,s_delay);
   and MGM_G133(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G134(MGM_W111,si_delay);
   and MGM_G135(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G136(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G137(MGM_W113,d_delay);
   and MGM_G138(MGM_W114,rb_delay,MGM_W113);
   not MGM_G139(MGM_W115,s_delay);
   and MGM_G140(MGM_W116,MGM_W115,MGM_W114);
   and MGM_G141(MGM_W117,si_delay,MGM_W116);
   not MGM_G142(MGM_W118,ssb_delay);
   and MGM_G143(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W118,MGM_W117);
   not MGM_G144(MGM_W119,d_delay);
   and MGM_G145(MGM_W120,rb_delay,MGM_W119);
   not MGM_G146(MGM_W121,s_delay);
   and MGM_G147(MGM_W122,MGM_W121,MGM_W120);
   and MGM_G148(MGM_W123,si_delay,MGM_W122);
   and MGM_G149(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W123);
   and MGM_G150(MGM_W124,rb_delay,d_delay);
   not MGM_G151(MGM_W125,s_delay);
   and MGM_G152(MGM_W126,MGM_W125,MGM_W124);
   not MGM_G153(MGM_W127,si_delay);
   and MGM_G154(MGM_W128,MGM_W127,MGM_W126);
   not MGM_G155(MGM_W129,ssb_delay);
   and MGM_G156(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W129,MGM_W128);
   and MGM_G157(MGM_W130,rb_delay,d_delay);
   not MGM_G158(MGM_W131,s_delay);
   and MGM_G159(MGM_W132,MGM_W131,MGM_W130);
   not MGM_G160(MGM_W133,si_delay);
   and MGM_G161(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G162(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G163(MGM_W135,rb_delay,d_delay);
   not MGM_G164(MGM_W136,s_delay);
   and MGM_G165(MGM_W137,MGM_W136,MGM_W135);
   and MGM_G166(MGM_W138,si_delay,MGM_W137);
   not MGM_G167(MGM_W139,ssb_delay);
   and MGM_G168(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G169(MGM_W140,rb_delay,d_delay);
   not MGM_G170(MGM_W141,s_delay);
   and MGM_G171(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G172(MGM_W143,si_delay,MGM_W142);
   and MGM_G173(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W143);
   not MGM_G174(MGM_W144,s_delay);
   and MGM_G175(MGM_W145,MGM_W144,rb_delay);
   not MGM_G176(MGM_W146,si_delay);
   and MGM_G177(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G178(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G179(MGM_W148,s_delay);
   and MGM_G180(MGM_W149,MGM_W148,rb_delay);
   and MGM_G181(MGM_W150,si_delay,MGM_W149);
   and MGM_G182(ENABLE_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G183(MGM_W151,d_delay);
   not MGM_G184(MGM_W152,s_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G186(MGM_W154,si_delay,MGM_W153);
   not MGM_G187(MGM_W155,ssb_delay);
   and MGM_G188(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W155,MGM_W154);
   not MGM_G189(MGM_W156,s_delay);
   and MGM_G190(MGM_W157,MGM_W156,d_delay);
   not MGM_G191(MGM_W158,si_delay);
   and MGM_G192(MGM_W159,MGM_W158,MGM_W157);
   and MGM_G193(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W159);
   not MGM_G194(MGM_W160,s_delay);
   and MGM_G195(MGM_W161,MGM_W160,d_delay);
   and MGM_G196(MGM_W162,si_delay,MGM_W161);
   not MGM_G197(MGM_W163,ssb_delay);
   and MGM_G198(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W163,MGM_W162);
   not MGM_G199(MGM_W164,s_delay);
   and MGM_G200(MGM_W165,MGM_W164,d_delay);
   and MGM_G201(MGM_W166,si_delay,MGM_W165);
   and MGM_G202(ENABLE_d_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W166);
   not MGM_G203(MGM_W167,d_delay);
   and MGM_G204(MGM_W168,rb_delay,MGM_W167);
   not MGM_G205(MGM_W169,si_delay);
   and MGM_G206(MGM_W170,MGM_W169,MGM_W168);
   not MGM_G207(MGM_W171,ssb_delay);
   and MGM_G208(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W171,MGM_W170);
   not MGM_G209(MGM_W172,d_delay);
   and MGM_G210(MGM_W173,rb_delay,MGM_W172);
   not MGM_G211(MGM_W174,si_delay);
   and MGM_G212(MGM_W175,MGM_W174,MGM_W173);
   and MGM_G213(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W175);
   not MGM_G214(MGM_W176,d_delay);
   and MGM_G215(MGM_W177,rb_delay,MGM_W176);
   and MGM_G216(MGM_W178,si_delay,MGM_W177);
   and MGM_G217(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W178);
   and MGM_G218(MGM_W179,rb_delay,d_delay);
   not MGM_G219(MGM_W180,si_delay);
   and MGM_G220(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G221(MGM_W182,ssb_delay);
   and MGM_G222(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G223(MGM_W183,d_delay);
   and MGM_G224(MGM_W184,rb_delay,MGM_W183);
   not MGM_G225(MGM_W185,s_delay);
   and MGM_G226(MGM_W186,MGM_W185,MGM_W184);
   not MGM_G227(MGM_W187,ssb_delay);
   and MGM_G228(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W187,MGM_W186);
   and MGM_G229(MGM_W188,rb_delay,d_delay);
   not MGM_G230(MGM_W189,s_delay);
   and MGM_G231(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G232(MGM_W191,ssb_delay);
   and MGM_G233(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G234(MGM_W192,d_delay);
   and MGM_G235(MGM_W193,rb_delay,MGM_W192);
   not MGM_G236(MGM_W194,s_delay);
   and MGM_G237(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G238(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si,si_delay,MGM_W195);
   and MGM_G239(MGM_W196,rb_delay,d_delay);
   not MGM_G240(MGM_W197,s_delay);
   and MGM_G241(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G242(MGM_W199,si_delay);
   and MGM_G243(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si,MGM_W199,MGM_W198);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb,negedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s,negedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      
      // setuphold si- clkb-HL
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      
      // setuphold ssb- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz08bad1d01x2( clkb, d, o, rb, s, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Mux-D scan D-FF with asynchronous preset and reset + scan-in buffering o = if not(rb) then val0 else if not(s) then val1 else (si*!ssb+d*ssb) on falling clkb
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (negedge clkb or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz08bad_delay o =  IQ;
// assign `fvz08bad_delay so =  IQ;
// 

   input clkb, d, rb, s, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz08bad_delay o_random_init = o_tmp ;
      assign `fvz08bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz08bad_delay o_random_init = o_tmp ;
      assign `fvz08bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d01x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G122(MGM_W100,d_delay);
   and MGM_G123(MGM_W101,rb_delay,MGM_W100);
   not MGM_G124(MGM_W102,s_delay);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,si_delay);
   and MGM_G127(MGM_W105,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W106,ssb_delay);
   and MGM_G129(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W106,MGM_W105);
   not MGM_G130(MGM_W107,d_delay);
   and MGM_G131(MGM_W108,rb_delay,MGM_W107);
   not MGM_G132(MGM_W109,s_delay);
   and MGM_G133(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G134(MGM_W111,si_delay);
   and MGM_G135(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G136(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G137(MGM_W113,d_delay);
   and MGM_G138(MGM_W114,rb_delay,MGM_W113);
   not MGM_G139(MGM_W115,s_delay);
   and MGM_G140(MGM_W116,MGM_W115,MGM_W114);
   and MGM_G141(MGM_W117,si_delay,MGM_W116);
   not MGM_G142(MGM_W118,ssb_delay);
   and MGM_G143(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W118,MGM_W117);
   not MGM_G144(MGM_W119,d_delay);
   and MGM_G145(MGM_W120,rb_delay,MGM_W119);
   not MGM_G146(MGM_W121,s_delay);
   and MGM_G147(MGM_W122,MGM_W121,MGM_W120);
   and MGM_G148(MGM_W123,si_delay,MGM_W122);
   and MGM_G149(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W123);
   and MGM_G150(MGM_W124,rb_delay,d_delay);
   not MGM_G151(MGM_W125,s_delay);
   and MGM_G152(MGM_W126,MGM_W125,MGM_W124);
   not MGM_G153(MGM_W127,si_delay);
   and MGM_G154(MGM_W128,MGM_W127,MGM_W126);
   not MGM_G155(MGM_W129,ssb_delay);
   and MGM_G156(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W129,MGM_W128);
   and MGM_G157(MGM_W130,rb_delay,d_delay);
   not MGM_G158(MGM_W131,s_delay);
   and MGM_G159(MGM_W132,MGM_W131,MGM_W130);
   not MGM_G160(MGM_W133,si_delay);
   and MGM_G161(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G162(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G163(MGM_W135,rb_delay,d_delay);
   not MGM_G164(MGM_W136,s_delay);
   and MGM_G165(MGM_W137,MGM_W136,MGM_W135);
   and MGM_G166(MGM_W138,si_delay,MGM_W137);
   not MGM_G167(MGM_W139,ssb_delay);
   and MGM_G168(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G169(MGM_W140,rb_delay,d_delay);
   not MGM_G170(MGM_W141,s_delay);
   and MGM_G171(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G172(MGM_W143,si_delay,MGM_W142);
   and MGM_G173(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W143);
   not MGM_G174(MGM_W144,s_delay);
   and MGM_G175(MGM_W145,MGM_W144,rb_delay);
   not MGM_G176(MGM_W146,si_delay);
   and MGM_G177(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G178(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G179(MGM_W148,s_delay);
   and MGM_G180(MGM_W149,MGM_W148,rb_delay);
   and MGM_G181(MGM_W150,si_delay,MGM_W149);
   and MGM_G182(ENABLE_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G183(MGM_W151,d_delay);
   not MGM_G184(MGM_W152,s_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G186(MGM_W154,si_delay,MGM_W153);
   not MGM_G187(MGM_W155,ssb_delay);
   and MGM_G188(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W155,MGM_W154);
   not MGM_G189(MGM_W156,s_delay);
   and MGM_G190(MGM_W157,MGM_W156,d_delay);
   not MGM_G191(MGM_W158,si_delay);
   and MGM_G192(MGM_W159,MGM_W158,MGM_W157);
   and MGM_G193(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W159);
   not MGM_G194(MGM_W160,s_delay);
   and MGM_G195(MGM_W161,MGM_W160,d_delay);
   and MGM_G196(MGM_W162,si_delay,MGM_W161);
   not MGM_G197(MGM_W163,ssb_delay);
   and MGM_G198(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W163,MGM_W162);
   not MGM_G199(MGM_W164,s_delay);
   and MGM_G200(MGM_W165,MGM_W164,d_delay);
   and MGM_G201(MGM_W166,si_delay,MGM_W165);
   and MGM_G202(ENABLE_d_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W166);
   not MGM_G203(MGM_W167,d_delay);
   and MGM_G204(MGM_W168,rb_delay,MGM_W167);
   not MGM_G205(MGM_W169,si_delay);
   and MGM_G206(MGM_W170,MGM_W169,MGM_W168);
   not MGM_G207(MGM_W171,ssb_delay);
   and MGM_G208(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W171,MGM_W170);
   not MGM_G209(MGM_W172,d_delay);
   and MGM_G210(MGM_W173,rb_delay,MGM_W172);
   not MGM_G211(MGM_W174,si_delay);
   and MGM_G212(MGM_W175,MGM_W174,MGM_W173);
   and MGM_G213(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W175);
   not MGM_G214(MGM_W176,d_delay);
   and MGM_G215(MGM_W177,rb_delay,MGM_W176);
   and MGM_G216(MGM_W178,si_delay,MGM_W177);
   and MGM_G217(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W178);
   and MGM_G218(MGM_W179,rb_delay,d_delay);
   not MGM_G219(MGM_W180,si_delay);
   and MGM_G220(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G221(MGM_W182,ssb_delay);
   and MGM_G222(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G223(MGM_W183,d_delay);
   and MGM_G224(MGM_W184,rb_delay,MGM_W183);
   not MGM_G225(MGM_W185,s_delay);
   and MGM_G226(MGM_W186,MGM_W185,MGM_W184);
   not MGM_G227(MGM_W187,ssb_delay);
   and MGM_G228(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W187,MGM_W186);
   and MGM_G229(MGM_W188,rb_delay,d_delay);
   not MGM_G230(MGM_W189,s_delay);
   and MGM_G231(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G232(MGM_W191,ssb_delay);
   and MGM_G233(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G234(MGM_W192,d_delay);
   and MGM_G235(MGM_W193,rb_delay,MGM_W192);
   not MGM_G236(MGM_W194,s_delay);
   and MGM_G237(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G238(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si,si_delay,MGM_W195);
   and MGM_G239(MGM_W196,rb_delay,d_delay);
   not MGM_G240(MGM_W197,s_delay);
   and MGM_G241(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G242(MGM_W199,si_delay);
   and MGM_G243(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si,MGM_W199,MGM_W198);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb,negedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s,negedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      
      // setuphold si- clkb-HL
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      
      // setuphold ssb- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz08bad1d02x2( clkb, d, o, rb, s, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Mux-D scan D-FF with asynchronous preset and reset + scan-in buffering o = if not(rb) then val0 else if not(s) then val1 else (si*!ssb+d*ssb) on falling clkb
// 
// 
// wire xor_rb_s = ~rb ^ s ;
// 
// always @ (negedge clkb or posedge s or negedge rb or posedge xor_rb_s)
// begin
// if (xor_rb_s)
// begin
// if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// end
// else if (s)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= 1'b1 ;
// end
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else
// begin
// IQ <= ssb ? d : si ;
// end
// end
// 
// assign `fvz08bad_delay o =  IQ;
// assign `fvz08bad_delay so =  IQ;
// 

   input clkb, d, rb, s, si, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz08bad_delay o_random_init = o_tmp ;
      assign `fvz08bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d02x2_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvz08bad_delay o_random_init = o_tmp ;
      assign `fvz08bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz08bad_func i0sfvz08bad1d02x2_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G122(MGM_W100,d_delay);
   and MGM_G123(MGM_W101,rb_delay,MGM_W100);
   not MGM_G124(MGM_W102,s_delay);
   and MGM_G125(MGM_W103,MGM_W102,MGM_W101);
   not MGM_G126(MGM_W104,si_delay);
   and MGM_G127(MGM_W105,MGM_W104,MGM_W103);
   not MGM_G128(MGM_W106,ssb_delay);
   and MGM_G129(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W106,MGM_W105);
   not MGM_G130(MGM_W107,d_delay);
   and MGM_G131(MGM_W108,rb_delay,MGM_W107);
   not MGM_G132(MGM_W109,s_delay);
   and MGM_G133(MGM_W110,MGM_W109,MGM_W108);
   not MGM_G134(MGM_W111,si_delay);
   and MGM_G135(MGM_W112,MGM_W111,MGM_W110);
   and MGM_G136(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W112);
   not MGM_G137(MGM_W113,d_delay);
   and MGM_G138(MGM_W114,rb_delay,MGM_W113);
   not MGM_G139(MGM_W115,s_delay);
   and MGM_G140(MGM_W116,MGM_W115,MGM_W114);
   and MGM_G141(MGM_W117,si_delay,MGM_W116);
   not MGM_G142(MGM_W118,ssb_delay);
   and MGM_G143(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W118,MGM_W117);
   not MGM_G144(MGM_W119,d_delay);
   and MGM_G145(MGM_W120,rb_delay,MGM_W119);
   not MGM_G146(MGM_W121,s_delay);
   and MGM_G147(MGM_W122,MGM_W121,MGM_W120);
   and MGM_G148(MGM_W123,si_delay,MGM_W122);
   and MGM_G149(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W123);
   and MGM_G150(MGM_W124,rb_delay,d_delay);
   not MGM_G151(MGM_W125,s_delay);
   and MGM_G152(MGM_W126,MGM_W125,MGM_W124);
   not MGM_G153(MGM_W127,si_delay);
   and MGM_G154(MGM_W128,MGM_W127,MGM_W126);
   not MGM_G155(MGM_W129,ssb_delay);
   and MGM_G156(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W129,MGM_W128);
   and MGM_G157(MGM_W130,rb_delay,d_delay);
   not MGM_G158(MGM_W131,s_delay);
   and MGM_G159(MGM_W132,MGM_W131,MGM_W130);
   not MGM_G160(MGM_W133,si_delay);
   and MGM_G161(MGM_W134,MGM_W133,MGM_W132);
   and MGM_G162(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W134);
   and MGM_G163(MGM_W135,rb_delay,d_delay);
   not MGM_G164(MGM_W136,s_delay);
   and MGM_G165(MGM_W137,MGM_W136,MGM_W135);
   and MGM_G166(MGM_W138,si_delay,MGM_W137);
   not MGM_G167(MGM_W139,ssb_delay);
   and MGM_G168(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W139,MGM_W138);
   and MGM_G169(MGM_W140,rb_delay,d_delay);
   not MGM_G170(MGM_W141,s_delay);
   and MGM_G171(MGM_W142,MGM_W141,MGM_W140);
   and MGM_G172(MGM_W143,si_delay,MGM_W142);
   and MGM_G173(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W143);
   not MGM_G174(MGM_W144,s_delay);
   and MGM_G175(MGM_W145,MGM_W144,rb_delay);
   not MGM_G176(MGM_W146,si_delay);
   and MGM_G177(MGM_W147,MGM_W146,MGM_W145);
   and MGM_G178(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W147);
   not MGM_G179(MGM_W148,s_delay);
   and MGM_G180(MGM_W149,MGM_W148,rb_delay);
   and MGM_G181(MGM_W150,si_delay,MGM_W149);
   and MGM_G182(ENABLE_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W150);
   not MGM_G183(MGM_W151,d_delay);
   not MGM_G184(MGM_W152,s_delay);
   and MGM_G185(MGM_W153,MGM_W152,MGM_W151);
   and MGM_G186(MGM_W154,si_delay,MGM_W153);
   not MGM_G187(MGM_W155,ssb_delay);
   and MGM_G188(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W155,MGM_W154);
   not MGM_G189(MGM_W156,s_delay);
   and MGM_G190(MGM_W157,MGM_W156,d_delay);
   not MGM_G191(MGM_W158,si_delay);
   and MGM_G192(MGM_W159,MGM_W158,MGM_W157);
   and MGM_G193(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W159);
   not MGM_G194(MGM_W160,s_delay);
   and MGM_G195(MGM_W161,MGM_W160,d_delay);
   and MGM_G196(MGM_W162,si_delay,MGM_W161);
   not MGM_G197(MGM_W163,ssb_delay);
   and MGM_G198(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W163,MGM_W162);
   not MGM_G199(MGM_W164,s_delay);
   and MGM_G200(MGM_W165,MGM_W164,d_delay);
   and MGM_G201(MGM_W166,si_delay,MGM_W165);
   and MGM_G202(ENABLE_d_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W166);
   not MGM_G203(MGM_W167,d_delay);
   and MGM_G204(MGM_W168,rb_delay,MGM_W167);
   not MGM_G205(MGM_W169,si_delay);
   and MGM_G206(MGM_W170,MGM_W169,MGM_W168);
   not MGM_G207(MGM_W171,ssb_delay);
   and MGM_G208(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W171,MGM_W170);
   not MGM_G209(MGM_W172,d_delay);
   and MGM_G210(MGM_W173,rb_delay,MGM_W172);
   not MGM_G211(MGM_W174,si_delay);
   and MGM_G212(MGM_W175,MGM_W174,MGM_W173);
   and MGM_G213(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W175);
   not MGM_G214(MGM_W176,d_delay);
   and MGM_G215(MGM_W177,rb_delay,MGM_W176);
   and MGM_G216(MGM_W178,si_delay,MGM_W177);
   and MGM_G217(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W178);
   and MGM_G218(MGM_W179,rb_delay,d_delay);
   not MGM_G219(MGM_W180,si_delay);
   and MGM_G220(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G221(MGM_W182,ssb_delay);
   and MGM_G222(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G223(MGM_W183,d_delay);
   and MGM_G224(MGM_W184,rb_delay,MGM_W183);
   not MGM_G225(MGM_W185,s_delay);
   and MGM_G226(MGM_W186,MGM_W185,MGM_W184);
   not MGM_G227(MGM_W187,ssb_delay);
   and MGM_G228(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W187,MGM_W186);
   and MGM_G229(MGM_W188,rb_delay,d_delay);
   not MGM_G230(MGM_W189,s_delay);
   and MGM_G231(MGM_W190,MGM_W189,MGM_W188);
   not MGM_G232(MGM_W191,ssb_delay);
   and MGM_G233(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb,MGM_W191,MGM_W190);
   not MGM_G234(MGM_W192,d_delay);
   and MGM_G235(MGM_W193,rb_delay,MGM_W192);
   not MGM_G236(MGM_W194,s_delay);
   and MGM_G237(MGM_W195,MGM_W194,MGM_W193);
   and MGM_G238(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si,si_delay,MGM_W195);
   and MGM_G239(MGM_W196,rb_delay,d_delay);
   not MGM_G240(MGM_W197,s_delay);
   and MGM_G241(MGM_W198,MGM_W197,MGM_W196);
   not MGM_G242(MGM_W199,si_delay);
   and MGM_G243(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si,MGM_W199,MGM_W198);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc clkb --> so
      (negedge clkb => (so : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      $width(posedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-HL
      
      // setuphold d- clkb-HL
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-negedge
      $recrem(posedge rb,negedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-negedge
      $recrem(negedge s,negedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,si_delay);
      
      // setuphold si- clkb-HL
      
      // setuphold si- clkb-HL
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      $setuphold(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,ssb_delay);
      
      // setuphold ssb- clkb-HL
      
      // setuphold ssb- clkb-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz203ad1d01x1( clk, d1, d2, o1, o2, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 2bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} so = {((o1*!ssb)+(rb*d2*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// 
// assign `fvz203ad_delay o1 =  IQ1;
// assign `fvz203ad_delay o2 =  IQ2;
// assign `fvz203ad_delay so =  o2;
// 

   input clk, d1, d2, rb, si, ssb;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x1_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz203ad_delay so_random_init = so_tmp ;
      assign `fvz203ad_delay o1_random_init = o1_tmp ;
      assign `fvz203ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x1_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fvz203ad_delay so_random_init = so_tmp ;
      assign `fvz203ad_delay o1_random_init = o1_tmp ;
      assign `fvz203ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x1_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x1_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   buf MGM_G293(ENABLE_rb,rb_delay);
   not MGM_G294(MGM_W240,d1_delay);
   not MGM_G295(MGM_W241,d2_delay);
   and MGM_G296(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G297(MGM_W243,si_delay,MGM_W242);
   not MGM_G298(MGM_W244,ssb_delay);
   and MGM_G299(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,d1_delay);
   and MGM_G301(MGM_W246,d2_delay,MGM_W245);
   not MGM_G302(MGM_W247,si_delay);
   and MGM_G303(MGM_W248,MGM_W247,MGM_W246);
   and MGM_G304(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W248);
   not MGM_G305(MGM_W249,d1_delay);
   and MGM_G306(MGM_W250,d2_delay,MGM_W249);
   and MGM_G307(MGM_W251,si_delay,MGM_W250);
   not MGM_G308(MGM_W252,ssb_delay);
   and MGM_G309(ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W252,MGM_W251);
   not MGM_G310(MGM_W253,d1_delay);
   and MGM_G311(MGM_W254,d2_delay,MGM_W253);
   and MGM_G312(MGM_W255,si_delay,MGM_W254);
   and MGM_G313(ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W255);
   not MGM_G314(MGM_W256,d2_delay);
   and MGM_G315(MGM_W257,MGM_W256,d1_delay);
   not MGM_G316(MGM_W258,si_delay);
   and MGM_G317(MGM_W259,MGM_W258,MGM_W257);
   and MGM_G318(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W259);
   not MGM_G319(MGM_W260,d2_delay);
   and MGM_G320(MGM_W261,MGM_W260,d1_delay);
   and MGM_G321(MGM_W262,si_delay,MGM_W261);
   not MGM_G322(MGM_W263,ssb_delay);
   and MGM_G323(ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W263,MGM_W262);
   not MGM_G324(MGM_W264,d2_delay);
   and MGM_G325(MGM_W265,MGM_W264,d1_delay);
   and MGM_G326(MGM_W266,si_delay,MGM_W265);
   and MGM_G327(ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W266);
   and MGM_G328(MGM_W267,d2_delay,d1_delay);
   not MGM_G329(MGM_W268,si_delay);
   and MGM_G330(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G331(ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W269);
   and MGM_G332(MGM_W270,d2_delay,d1_delay);
   and MGM_G333(MGM_W271,si_delay,MGM_W270);
   not MGM_G334(MGM_W272,ssb_delay);
   and MGM_G335(ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W272,MGM_W271);
   and MGM_G336(MGM_W273,d2_delay,d1_delay);
   and MGM_G337(MGM_W274,si_delay,MGM_W273);
   and MGM_G338(ENABLE_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W274);
   not MGM_G339(MGM_W275,clk_delay);
   not MGM_G340(MGM_W276,d1_delay);
   and MGM_G341(MGM_W277,MGM_W276,MGM_W275);
   not MGM_G342(MGM_W278,d2_delay);
   and MGM_G343(MGM_W279,MGM_W278,MGM_W277);
   not MGM_G344(MGM_W280,si_delay);
   and MGM_G345(MGM_W281,MGM_W280,MGM_W279);
   not MGM_G346(MGM_W282,ssb_delay);
   and MGM_G347(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W282,MGM_W281);
   not MGM_G348(MGM_W283,clk_delay);
   not MGM_G349(MGM_W284,d1_delay);
   and MGM_G350(MGM_W285,MGM_W284,MGM_W283);
   not MGM_G351(MGM_W286,d2_delay);
   and MGM_G352(MGM_W287,MGM_W286,MGM_W285);
   not MGM_G353(MGM_W288,si_delay);
   and MGM_G354(MGM_W289,MGM_W288,MGM_W287);
   and MGM_G355(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W289);
   not MGM_G356(MGM_W290,clk_delay);
   not MGM_G357(MGM_W291,d1_delay);
   and MGM_G358(MGM_W292,MGM_W291,MGM_W290);
   not MGM_G359(MGM_W293,d2_delay);
   and MGM_G360(MGM_W294,MGM_W293,MGM_W292);
   and MGM_G361(MGM_W295,si_delay,MGM_W294);
   not MGM_G362(MGM_W296,ssb_delay);
   and MGM_G363(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W296,MGM_W295);
   not MGM_G364(MGM_W297,clk_delay);
   not MGM_G365(MGM_W298,d1_delay);
   and MGM_G366(MGM_W299,MGM_W298,MGM_W297);
   not MGM_G367(MGM_W300,d2_delay);
   and MGM_G368(MGM_W301,MGM_W300,MGM_W299);
   and MGM_G369(MGM_W302,si_delay,MGM_W301);
   and MGM_G370(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W302);
   not MGM_G371(MGM_W303,clk_delay);
   not MGM_G372(MGM_W304,d1_delay);
   and MGM_G373(MGM_W305,MGM_W304,MGM_W303);
   and MGM_G374(MGM_W306,d2_delay,MGM_W305);
   not MGM_G375(MGM_W307,si_delay);
   and MGM_G376(MGM_W308,MGM_W307,MGM_W306);
   not MGM_G377(MGM_W309,ssb_delay);
   and MGM_G378(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W309,MGM_W308);
   not MGM_G379(MGM_W310,clk_delay);
   not MGM_G380(MGM_W311,d1_delay);
   and MGM_G381(MGM_W312,MGM_W311,MGM_W310);
   and MGM_G382(MGM_W313,d2_delay,MGM_W312);
   not MGM_G383(MGM_W314,si_delay);
   and MGM_G384(MGM_W315,MGM_W314,MGM_W313);
   and MGM_G385(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W315);
   not MGM_G386(MGM_W316,clk_delay);
   not MGM_G387(MGM_W317,d1_delay);
   and MGM_G388(MGM_W318,MGM_W317,MGM_W316);
   and MGM_G389(MGM_W319,d2_delay,MGM_W318);
   and MGM_G390(MGM_W320,si_delay,MGM_W319);
   not MGM_G391(MGM_W321,ssb_delay);
   and MGM_G392(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W321,MGM_W320);
   not MGM_G393(MGM_W322,clk_delay);
   not MGM_G394(MGM_W323,d1_delay);
   and MGM_G395(MGM_W324,MGM_W323,MGM_W322);
   and MGM_G396(MGM_W325,d2_delay,MGM_W324);
   and MGM_G397(MGM_W326,si_delay,MGM_W325);
   and MGM_G398(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W326);
   not MGM_G399(MGM_W327,clk_delay);
   and MGM_G400(MGM_W328,d1_delay,MGM_W327);
   not MGM_G401(MGM_W329,d2_delay);
   and MGM_G402(MGM_W330,MGM_W329,MGM_W328);
   not MGM_G403(MGM_W331,si_delay);
   and MGM_G404(MGM_W332,MGM_W331,MGM_W330);
   not MGM_G405(MGM_W333,ssb_delay);
   and MGM_G406(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W333,MGM_W332);
   not MGM_G407(MGM_W334,clk_delay);
   and MGM_G408(MGM_W335,d1_delay,MGM_W334);
   not MGM_G409(MGM_W336,d2_delay);
   and MGM_G410(MGM_W337,MGM_W336,MGM_W335);
   not MGM_G411(MGM_W338,si_delay);
   and MGM_G412(MGM_W339,MGM_W338,MGM_W337);
   and MGM_G413(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W339);
   not MGM_G414(MGM_W340,clk_delay);
   and MGM_G415(MGM_W341,d1_delay,MGM_W340);
   not MGM_G416(MGM_W342,d2_delay);
   and MGM_G417(MGM_W343,MGM_W342,MGM_W341);
   and MGM_G418(MGM_W344,si_delay,MGM_W343);
   not MGM_G419(MGM_W345,ssb_delay);
   and MGM_G420(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W345,MGM_W344);
   not MGM_G421(MGM_W346,clk_delay);
   and MGM_G422(MGM_W347,d1_delay,MGM_W346);
   not MGM_G423(MGM_W348,d2_delay);
   and MGM_G424(MGM_W349,MGM_W348,MGM_W347);
   and MGM_G425(MGM_W350,si_delay,MGM_W349);
   and MGM_G426(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W350);
   not MGM_G427(MGM_W351,clk_delay);
   and MGM_G428(MGM_W352,d1_delay,MGM_W351);
   and MGM_G429(MGM_W353,d2_delay,MGM_W352);
   not MGM_G430(MGM_W354,si_delay);
   and MGM_G431(MGM_W355,MGM_W354,MGM_W353);
   not MGM_G432(MGM_W356,ssb_delay);
   and MGM_G433(ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W356,MGM_W355);
   not MGM_G434(MGM_W357,clk_delay);
   and MGM_G435(MGM_W358,d1_delay,MGM_W357);
   and MGM_G436(MGM_W359,d2_delay,MGM_W358);
   not MGM_G437(MGM_W360,si_delay);
   and MGM_G438(MGM_W361,MGM_W360,MGM_W359);
   and MGM_G439(ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W361);
   not MGM_G440(MGM_W362,clk_delay);
   and MGM_G441(MGM_W363,d1_delay,MGM_W362);
   and MGM_G442(MGM_W364,d2_delay,MGM_W363);
   and MGM_G443(MGM_W365,si_delay,MGM_W364);
   not MGM_G444(MGM_W366,ssb_delay);
   and MGM_G445(ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W366,MGM_W365);
   not MGM_G446(MGM_W367,clk_delay);
   and MGM_G447(MGM_W368,d1_delay,MGM_W367);
   and MGM_G448(MGM_W369,d2_delay,MGM_W368);
   and MGM_G449(MGM_W370,si_delay,MGM_W369);
   and MGM_G450(ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W370);
   not MGM_G451(MGM_W371,d1_delay);
   and MGM_G452(MGM_W372,MGM_W371,clk_delay);
   not MGM_G453(MGM_W373,d2_delay);
   and MGM_G454(MGM_W374,MGM_W373,MGM_W372);
   not MGM_G455(MGM_W375,si_delay);
   and MGM_G456(MGM_W376,MGM_W375,MGM_W374);
   not MGM_G457(MGM_W377,ssb_delay);
   and MGM_G458(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W377,MGM_W376);
   not MGM_G459(MGM_W378,d1_delay);
   and MGM_G460(MGM_W379,MGM_W378,clk_delay);
   not MGM_G461(MGM_W380,d2_delay);
   and MGM_G462(MGM_W381,MGM_W380,MGM_W379);
   not MGM_G463(MGM_W382,si_delay);
   and MGM_G464(MGM_W383,MGM_W382,MGM_W381);
   and MGM_G465(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W383);
   not MGM_G466(MGM_W384,d1_delay);
   and MGM_G467(MGM_W385,MGM_W384,clk_delay);
   not MGM_G468(MGM_W386,d2_delay);
   and MGM_G469(MGM_W387,MGM_W386,MGM_W385);
   and MGM_G470(MGM_W388,si_delay,MGM_W387);
   not MGM_G471(MGM_W389,ssb_delay);
   and MGM_G472(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W389,MGM_W388);
   not MGM_G473(MGM_W390,d1_delay);
   and MGM_G474(MGM_W391,MGM_W390,clk_delay);
   not MGM_G475(MGM_W392,d2_delay);
   and MGM_G476(MGM_W393,MGM_W392,MGM_W391);
   and MGM_G477(MGM_W394,si_delay,MGM_W393);
   and MGM_G478(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W394);
   not MGM_G479(MGM_W395,d1_delay);
   and MGM_G480(MGM_W396,MGM_W395,clk_delay);
   and MGM_G481(MGM_W397,d2_delay,MGM_W396);
   not MGM_G482(MGM_W398,si_delay);
   and MGM_G483(MGM_W399,MGM_W398,MGM_W397);
   not MGM_G484(MGM_W400,ssb_delay);
   and MGM_G485(ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W400,MGM_W399);
   not MGM_G486(MGM_W401,d1_delay);
   and MGM_G487(MGM_W402,MGM_W401,clk_delay);
   and MGM_G488(MGM_W403,d2_delay,MGM_W402);
   not MGM_G489(MGM_W404,si_delay);
   and MGM_G490(MGM_W405,MGM_W404,MGM_W403);
   and MGM_G491(ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W405);
   not MGM_G492(MGM_W406,d1_delay);
   and MGM_G493(MGM_W407,MGM_W406,clk_delay);
   and MGM_G494(MGM_W408,d2_delay,MGM_W407);
   and MGM_G495(MGM_W409,si_delay,MGM_W408);
   not MGM_G496(MGM_W410,ssb_delay);
   and MGM_G497(ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W410,MGM_W409);
   not MGM_G498(MGM_W411,d1_delay);
   and MGM_G499(MGM_W412,MGM_W411,clk_delay);
   and MGM_G500(MGM_W413,d2_delay,MGM_W412);
   and MGM_G501(MGM_W414,si_delay,MGM_W413);
   and MGM_G502(ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W414);
   and MGM_G503(MGM_W415,d1_delay,clk_delay);
   not MGM_G504(MGM_W416,d2_delay);
   and MGM_G505(MGM_W417,MGM_W416,MGM_W415);
   not MGM_G506(MGM_W418,si_delay);
   and MGM_G507(MGM_W419,MGM_W418,MGM_W417);
   not MGM_G508(MGM_W420,ssb_delay);
   and MGM_G509(ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W420,MGM_W419);
   and MGM_G510(MGM_W421,d1_delay,clk_delay);
   not MGM_G511(MGM_W422,d2_delay);
   and MGM_G512(MGM_W423,MGM_W422,MGM_W421);
   not MGM_G513(MGM_W424,si_delay);
   and MGM_G514(MGM_W425,MGM_W424,MGM_W423);
   and MGM_G515(ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W425);
   and MGM_G516(MGM_W426,d1_delay,clk_delay);
   not MGM_G517(MGM_W427,d2_delay);
   and MGM_G518(MGM_W428,MGM_W427,MGM_W426);
   and MGM_G519(MGM_W429,si_delay,MGM_W428);
   not MGM_G520(MGM_W430,ssb_delay);
   and MGM_G521(ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W430,MGM_W429);
   and MGM_G522(MGM_W431,d1_delay,clk_delay);
   not MGM_G523(MGM_W432,d2_delay);
   and MGM_G524(MGM_W433,MGM_W432,MGM_W431);
   and MGM_G525(MGM_W434,si_delay,MGM_W433);
   and MGM_G526(ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W434);
   and MGM_G527(MGM_W435,d1_delay,clk_delay);
   and MGM_G528(MGM_W436,d2_delay,MGM_W435);
   not MGM_G529(MGM_W437,si_delay);
   and MGM_G530(MGM_W438,MGM_W437,MGM_W436);
   not MGM_G531(MGM_W439,ssb_delay);
   and MGM_G532(ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W439,MGM_W438);
   and MGM_G533(MGM_W440,d1_delay,clk_delay);
   and MGM_G534(MGM_W441,d2_delay,MGM_W440);
   not MGM_G535(MGM_W442,si_delay);
   and MGM_G536(MGM_W443,MGM_W442,MGM_W441);
   and MGM_G537(ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W443);
   and MGM_G538(MGM_W444,d1_delay,clk_delay);
   and MGM_G539(MGM_W445,d2_delay,MGM_W444);
   and MGM_G540(MGM_W446,si_delay,MGM_W445);
   not MGM_G541(MGM_W447,ssb_delay);
   and MGM_G542(ENABLE_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W447,MGM_W446);
   and MGM_G543(MGM_W448,d1_delay,clk_delay);
   and MGM_G544(MGM_W449,d2_delay,MGM_W448);
   and MGM_G545(MGM_W450,si_delay,MGM_W449);
   and MGM_G546(ENABLE_clk_AND_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W450);
   not MGM_G547(MGM_W451,ssb_delay);
   and MGM_G548(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W451);
   not MGM_G549(MGM_W452,d1_delay);
   not MGM_G550(MGM_W453,d2_delay);
   and MGM_G551(MGM_W454,MGM_W453,MGM_W452);
   and MGM_G552(MGM_W455,rb_delay,MGM_W454);
   not MGM_G553(MGM_W456,si_delay);
   and MGM_G554(ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si,MGM_W456,MGM_W455);
   not MGM_G555(MGM_W457,d1_delay);
   not MGM_G556(MGM_W458,d2_delay);
   and MGM_G557(MGM_W459,MGM_W458,MGM_W457);
   and MGM_G558(MGM_W460,rb_delay,MGM_W459);
   and MGM_G559(ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si,si_delay,MGM_W460);
   not MGM_G560(MGM_W461,d1_delay);
   and MGM_G561(MGM_W462,d2_delay,MGM_W461);
   and MGM_G562(MGM_W463,rb_delay,MGM_W462);
   not MGM_G563(MGM_W464,si_delay);
   and MGM_G564(ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si,MGM_W464,MGM_W463);
   not MGM_G565(MGM_W465,d1_delay);
   and MGM_G566(MGM_W466,d2_delay,MGM_W465);
   and MGM_G567(MGM_W467,rb_delay,MGM_W466);
   and MGM_G568(ENABLE_NOT_d1_AND_d2_AND_rb_AND_si,si_delay,MGM_W467);
   not MGM_G569(MGM_W468,d2_delay);
   and MGM_G570(MGM_W469,MGM_W468,d1_delay);
   and MGM_G571(MGM_W470,rb_delay,MGM_W469);
   not MGM_G572(MGM_W471,si_delay);
   and MGM_G573(ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si,MGM_W471,MGM_W470);
   not MGM_G574(MGM_W472,d2_delay);
   and MGM_G575(MGM_W473,MGM_W472,d1_delay);
   and MGM_G576(MGM_W474,rb_delay,MGM_W473);
   and MGM_G577(ENABLE_d1_AND_NOT_d2_AND_rb_AND_si,si_delay,MGM_W474);
   and MGM_G578(MGM_W475,d2_delay,d1_delay);
   and MGM_G579(MGM_W476,rb_delay,MGM_W475);
   not MGM_G580(MGM_W477,si_delay);
   and MGM_G581(ENABLE_d1_AND_d2_AND_rb_AND_NOT_si,MGM_W477,MGM_W476);
   and MGM_G582(MGM_W478,d2_delay,d1_delay);
   and MGM_G583(MGM_W479,rb_delay,MGM_W478);
   and MGM_G584(ENABLE_d1_AND_d2_AND_rb_AND_si,si_delay,MGM_W479);
   and MGM_G585(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz203ad1d01x2( clk, d1, d2, o1, o2, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 2bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} so = {((o1*!ssb)+(rb*d2*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// 
// assign `fvz203ad_delay o1 =  IQ1;
// assign `fvz203ad_delay o2 =  IQ2;
// assign `fvz203ad_delay so =  o2;
// 

   input clk, d1, d2, rb, si, ssb;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz203ad_delay so_random_init = so_tmp ;
      assign `fvz203ad_delay o1_random_init = o1_tmp ;
      assign `fvz203ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fvz203ad_delay so_random_init = so_tmp ;
      assign `fvz203ad_delay o1_random_init = o1_tmp ;
      assign `fvz203ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d01x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   buf MGM_G293(ENABLE_rb,rb_delay);
   not MGM_G294(MGM_W240,d1_delay);
   not MGM_G295(MGM_W241,d2_delay);
   and MGM_G296(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G297(MGM_W243,si_delay,MGM_W242);
   not MGM_G298(MGM_W244,ssb_delay);
   and MGM_G299(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,d1_delay);
   and MGM_G301(MGM_W246,d2_delay,MGM_W245);
   not MGM_G302(MGM_W247,si_delay);
   and MGM_G303(MGM_W248,MGM_W247,MGM_W246);
   and MGM_G304(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W248);
   not MGM_G305(MGM_W249,d1_delay);
   and MGM_G306(MGM_W250,d2_delay,MGM_W249);
   and MGM_G307(MGM_W251,si_delay,MGM_W250);
   not MGM_G308(MGM_W252,ssb_delay);
   and MGM_G309(ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W252,MGM_W251);
   not MGM_G310(MGM_W253,d1_delay);
   and MGM_G311(MGM_W254,d2_delay,MGM_W253);
   and MGM_G312(MGM_W255,si_delay,MGM_W254);
   and MGM_G313(ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W255);
   not MGM_G314(MGM_W256,d2_delay);
   and MGM_G315(MGM_W257,MGM_W256,d1_delay);
   not MGM_G316(MGM_W258,si_delay);
   and MGM_G317(MGM_W259,MGM_W258,MGM_W257);
   and MGM_G318(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W259);
   not MGM_G319(MGM_W260,d2_delay);
   and MGM_G320(MGM_W261,MGM_W260,d1_delay);
   and MGM_G321(MGM_W262,si_delay,MGM_W261);
   not MGM_G322(MGM_W263,ssb_delay);
   and MGM_G323(ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W263,MGM_W262);
   not MGM_G324(MGM_W264,d2_delay);
   and MGM_G325(MGM_W265,MGM_W264,d1_delay);
   and MGM_G326(MGM_W266,si_delay,MGM_W265);
   and MGM_G327(ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W266);
   and MGM_G328(MGM_W267,d2_delay,d1_delay);
   not MGM_G329(MGM_W268,si_delay);
   and MGM_G330(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G331(ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W269);
   and MGM_G332(MGM_W270,d2_delay,d1_delay);
   and MGM_G333(MGM_W271,si_delay,MGM_W270);
   not MGM_G334(MGM_W272,ssb_delay);
   and MGM_G335(ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W272,MGM_W271);
   and MGM_G336(MGM_W273,d2_delay,d1_delay);
   and MGM_G337(MGM_W274,si_delay,MGM_W273);
   and MGM_G338(ENABLE_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W274);
   not MGM_G339(MGM_W275,clk_delay);
   not MGM_G340(MGM_W276,d1_delay);
   and MGM_G341(MGM_W277,MGM_W276,MGM_W275);
   not MGM_G342(MGM_W278,d2_delay);
   and MGM_G343(MGM_W279,MGM_W278,MGM_W277);
   not MGM_G344(MGM_W280,si_delay);
   and MGM_G345(MGM_W281,MGM_W280,MGM_W279);
   not MGM_G346(MGM_W282,ssb_delay);
   and MGM_G347(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W282,MGM_W281);
   not MGM_G348(MGM_W283,clk_delay);
   not MGM_G349(MGM_W284,d1_delay);
   and MGM_G350(MGM_W285,MGM_W284,MGM_W283);
   not MGM_G351(MGM_W286,d2_delay);
   and MGM_G352(MGM_W287,MGM_W286,MGM_W285);
   not MGM_G353(MGM_W288,si_delay);
   and MGM_G354(MGM_W289,MGM_W288,MGM_W287);
   and MGM_G355(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W289);
   not MGM_G356(MGM_W290,clk_delay);
   not MGM_G357(MGM_W291,d1_delay);
   and MGM_G358(MGM_W292,MGM_W291,MGM_W290);
   not MGM_G359(MGM_W293,d2_delay);
   and MGM_G360(MGM_W294,MGM_W293,MGM_W292);
   and MGM_G361(MGM_W295,si_delay,MGM_W294);
   not MGM_G362(MGM_W296,ssb_delay);
   and MGM_G363(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W296,MGM_W295);
   not MGM_G364(MGM_W297,clk_delay);
   not MGM_G365(MGM_W298,d1_delay);
   and MGM_G366(MGM_W299,MGM_W298,MGM_W297);
   not MGM_G367(MGM_W300,d2_delay);
   and MGM_G368(MGM_W301,MGM_W300,MGM_W299);
   and MGM_G369(MGM_W302,si_delay,MGM_W301);
   and MGM_G370(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W302);
   not MGM_G371(MGM_W303,clk_delay);
   not MGM_G372(MGM_W304,d1_delay);
   and MGM_G373(MGM_W305,MGM_W304,MGM_W303);
   and MGM_G374(MGM_W306,d2_delay,MGM_W305);
   not MGM_G375(MGM_W307,si_delay);
   and MGM_G376(MGM_W308,MGM_W307,MGM_W306);
   not MGM_G377(MGM_W309,ssb_delay);
   and MGM_G378(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W309,MGM_W308);
   not MGM_G379(MGM_W310,clk_delay);
   not MGM_G380(MGM_W311,d1_delay);
   and MGM_G381(MGM_W312,MGM_W311,MGM_W310);
   and MGM_G382(MGM_W313,d2_delay,MGM_W312);
   not MGM_G383(MGM_W314,si_delay);
   and MGM_G384(MGM_W315,MGM_W314,MGM_W313);
   and MGM_G385(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W315);
   not MGM_G386(MGM_W316,clk_delay);
   not MGM_G387(MGM_W317,d1_delay);
   and MGM_G388(MGM_W318,MGM_W317,MGM_W316);
   and MGM_G389(MGM_W319,d2_delay,MGM_W318);
   and MGM_G390(MGM_W320,si_delay,MGM_W319);
   not MGM_G391(MGM_W321,ssb_delay);
   and MGM_G392(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W321,MGM_W320);
   not MGM_G393(MGM_W322,clk_delay);
   not MGM_G394(MGM_W323,d1_delay);
   and MGM_G395(MGM_W324,MGM_W323,MGM_W322);
   and MGM_G396(MGM_W325,d2_delay,MGM_W324);
   and MGM_G397(MGM_W326,si_delay,MGM_W325);
   and MGM_G398(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W326);
   not MGM_G399(MGM_W327,clk_delay);
   and MGM_G400(MGM_W328,d1_delay,MGM_W327);
   not MGM_G401(MGM_W329,d2_delay);
   and MGM_G402(MGM_W330,MGM_W329,MGM_W328);
   not MGM_G403(MGM_W331,si_delay);
   and MGM_G404(MGM_W332,MGM_W331,MGM_W330);
   not MGM_G405(MGM_W333,ssb_delay);
   and MGM_G406(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W333,MGM_W332);
   not MGM_G407(MGM_W334,clk_delay);
   and MGM_G408(MGM_W335,d1_delay,MGM_W334);
   not MGM_G409(MGM_W336,d2_delay);
   and MGM_G410(MGM_W337,MGM_W336,MGM_W335);
   not MGM_G411(MGM_W338,si_delay);
   and MGM_G412(MGM_W339,MGM_W338,MGM_W337);
   and MGM_G413(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W339);
   not MGM_G414(MGM_W340,clk_delay);
   and MGM_G415(MGM_W341,d1_delay,MGM_W340);
   not MGM_G416(MGM_W342,d2_delay);
   and MGM_G417(MGM_W343,MGM_W342,MGM_W341);
   and MGM_G418(MGM_W344,si_delay,MGM_W343);
   not MGM_G419(MGM_W345,ssb_delay);
   and MGM_G420(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W345,MGM_W344);
   not MGM_G421(MGM_W346,clk_delay);
   and MGM_G422(MGM_W347,d1_delay,MGM_W346);
   not MGM_G423(MGM_W348,d2_delay);
   and MGM_G424(MGM_W349,MGM_W348,MGM_W347);
   and MGM_G425(MGM_W350,si_delay,MGM_W349);
   and MGM_G426(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W350);
   not MGM_G427(MGM_W351,clk_delay);
   and MGM_G428(MGM_W352,d1_delay,MGM_W351);
   and MGM_G429(MGM_W353,d2_delay,MGM_W352);
   not MGM_G430(MGM_W354,si_delay);
   and MGM_G431(MGM_W355,MGM_W354,MGM_W353);
   not MGM_G432(MGM_W356,ssb_delay);
   and MGM_G433(ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W356,MGM_W355);
   not MGM_G434(MGM_W357,clk_delay);
   and MGM_G435(MGM_W358,d1_delay,MGM_W357);
   and MGM_G436(MGM_W359,d2_delay,MGM_W358);
   not MGM_G437(MGM_W360,si_delay);
   and MGM_G438(MGM_W361,MGM_W360,MGM_W359);
   and MGM_G439(ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W361);
   not MGM_G440(MGM_W362,clk_delay);
   and MGM_G441(MGM_W363,d1_delay,MGM_W362);
   and MGM_G442(MGM_W364,d2_delay,MGM_W363);
   and MGM_G443(MGM_W365,si_delay,MGM_W364);
   not MGM_G444(MGM_W366,ssb_delay);
   and MGM_G445(ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W366,MGM_W365);
   not MGM_G446(MGM_W367,clk_delay);
   and MGM_G447(MGM_W368,d1_delay,MGM_W367);
   and MGM_G448(MGM_W369,d2_delay,MGM_W368);
   and MGM_G449(MGM_W370,si_delay,MGM_W369);
   and MGM_G450(ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W370);
   not MGM_G451(MGM_W371,d1_delay);
   and MGM_G452(MGM_W372,MGM_W371,clk_delay);
   not MGM_G453(MGM_W373,d2_delay);
   and MGM_G454(MGM_W374,MGM_W373,MGM_W372);
   not MGM_G455(MGM_W375,si_delay);
   and MGM_G456(MGM_W376,MGM_W375,MGM_W374);
   not MGM_G457(MGM_W377,ssb_delay);
   and MGM_G458(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W377,MGM_W376);
   not MGM_G459(MGM_W378,d1_delay);
   and MGM_G460(MGM_W379,MGM_W378,clk_delay);
   not MGM_G461(MGM_W380,d2_delay);
   and MGM_G462(MGM_W381,MGM_W380,MGM_W379);
   not MGM_G463(MGM_W382,si_delay);
   and MGM_G464(MGM_W383,MGM_W382,MGM_W381);
   and MGM_G465(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W383);
   not MGM_G466(MGM_W384,d1_delay);
   and MGM_G467(MGM_W385,MGM_W384,clk_delay);
   not MGM_G468(MGM_W386,d2_delay);
   and MGM_G469(MGM_W387,MGM_W386,MGM_W385);
   and MGM_G470(MGM_W388,si_delay,MGM_W387);
   not MGM_G471(MGM_W389,ssb_delay);
   and MGM_G472(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W389,MGM_W388);
   not MGM_G473(MGM_W390,d1_delay);
   and MGM_G474(MGM_W391,MGM_W390,clk_delay);
   not MGM_G475(MGM_W392,d2_delay);
   and MGM_G476(MGM_W393,MGM_W392,MGM_W391);
   and MGM_G477(MGM_W394,si_delay,MGM_W393);
   and MGM_G478(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W394);
   not MGM_G479(MGM_W395,d1_delay);
   and MGM_G480(MGM_W396,MGM_W395,clk_delay);
   and MGM_G481(MGM_W397,d2_delay,MGM_W396);
   not MGM_G482(MGM_W398,si_delay);
   and MGM_G483(MGM_W399,MGM_W398,MGM_W397);
   not MGM_G484(MGM_W400,ssb_delay);
   and MGM_G485(ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W400,MGM_W399);
   not MGM_G486(MGM_W401,d1_delay);
   and MGM_G487(MGM_W402,MGM_W401,clk_delay);
   and MGM_G488(MGM_W403,d2_delay,MGM_W402);
   not MGM_G489(MGM_W404,si_delay);
   and MGM_G490(MGM_W405,MGM_W404,MGM_W403);
   and MGM_G491(ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W405);
   not MGM_G492(MGM_W406,d1_delay);
   and MGM_G493(MGM_W407,MGM_W406,clk_delay);
   and MGM_G494(MGM_W408,d2_delay,MGM_W407);
   and MGM_G495(MGM_W409,si_delay,MGM_W408);
   not MGM_G496(MGM_W410,ssb_delay);
   and MGM_G497(ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W410,MGM_W409);
   not MGM_G498(MGM_W411,d1_delay);
   and MGM_G499(MGM_W412,MGM_W411,clk_delay);
   and MGM_G500(MGM_W413,d2_delay,MGM_W412);
   and MGM_G501(MGM_W414,si_delay,MGM_W413);
   and MGM_G502(ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W414);
   and MGM_G503(MGM_W415,d1_delay,clk_delay);
   not MGM_G504(MGM_W416,d2_delay);
   and MGM_G505(MGM_W417,MGM_W416,MGM_W415);
   not MGM_G506(MGM_W418,si_delay);
   and MGM_G507(MGM_W419,MGM_W418,MGM_W417);
   not MGM_G508(MGM_W420,ssb_delay);
   and MGM_G509(ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W420,MGM_W419);
   and MGM_G510(MGM_W421,d1_delay,clk_delay);
   not MGM_G511(MGM_W422,d2_delay);
   and MGM_G512(MGM_W423,MGM_W422,MGM_W421);
   not MGM_G513(MGM_W424,si_delay);
   and MGM_G514(MGM_W425,MGM_W424,MGM_W423);
   and MGM_G515(ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W425);
   and MGM_G516(MGM_W426,d1_delay,clk_delay);
   not MGM_G517(MGM_W427,d2_delay);
   and MGM_G518(MGM_W428,MGM_W427,MGM_W426);
   and MGM_G519(MGM_W429,si_delay,MGM_W428);
   not MGM_G520(MGM_W430,ssb_delay);
   and MGM_G521(ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W430,MGM_W429);
   and MGM_G522(MGM_W431,d1_delay,clk_delay);
   not MGM_G523(MGM_W432,d2_delay);
   and MGM_G524(MGM_W433,MGM_W432,MGM_W431);
   and MGM_G525(MGM_W434,si_delay,MGM_W433);
   and MGM_G526(ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W434);
   and MGM_G527(MGM_W435,d1_delay,clk_delay);
   and MGM_G528(MGM_W436,d2_delay,MGM_W435);
   not MGM_G529(MGM_W437,si_delay);
   and MGM_G530(MGM_W438,MGM_W437,MGM_W436);
   not MGM_G531(MGM_W439,ssb_delay);
   and MGM_G532(ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W439,MGM_W438);
   and MGM_G533(MGM_W440,d1_delay,clk_delay);
   and MGM_G534(MGM_W441,d2_delay,MGM_W440);
   not MGM_G535(MGM_W442,si_delay);
   and MGM_G536(MGM_W443,MGM_W442,MGM_W441);
   and MGM_G537(ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W443);
   and MGM_G538(MGM_W444,d1_delay,clk_delay);
   and MGM_G539(MGM_W445,d2_delay,MGM_W444);
   and MGM_G540(MGM_W446,si_delay,MGM_W445);
   not MGM_G541(MGM_W447,ssb_delay);
   and MGM_G542(ENABLE_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W447,MGM_W446);
   and MGM_G543(MGM_W448,d1_delay,clk_delay);
   and MGM_G544(MGM_W449,d2_delay,MGM_W448);
   and MGM_G545(MGM_W450,si_delay,MGM_W449);
   and MGM_G546(ENABLE_clk_AND_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W450);
   not MGM_G547(MGM_W451,ssb_delay);
   and MGM_G548(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W451);
   not MGM_G549(MGM_W452,d1_delay);
   not MGM_G550(MGM_W453,d2_delay);
   and MGM_G551(MGM_W454,MGM_W453,MGM_W452);
   and MGM_G552(MGM_W455,rb_delay,MGM_W454);
   not MGM_G553(MGM_W456,si_delay);
   and MGM_G554(ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si,MGM_W456,MGM_W455);
   not MGM_G555(MGM_W457,d1_delay);
   not MGM_G556(MGM_W458,d2_delay);
   and MGM_G557(MGM_W459,MGM_W458,MGM_W457);
   and MGM_G558(MGM_W460,rb_delay,MGM_W459);
   and MGM_G559(ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si,si_delay,MGM_W460);
   not MGM_G560(MGM_W461,d1_delay);
   and MGM_G561(MGM_W462,d2_delay,MGM_W461);
   and MGM_G562(MGM_W463,rb_delay,MGM_W462);
   not MGM_G563(MGM_W464,si_delay);
   and MGM_G564(ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si,MGM_W464,MGM_W463);
   not MGM_G565(MGM_W465,d1_delay);
   and MGM_G566(MGM_W466,d2_delay,MGM_W465);
   and MGM_G567(MGM_W467,rb_delay,MGM_W466);
   and MGM_G568(ENABLE_NOT_d1_AND_d2_AND_rb_AND_si,si_delay,MGM_W467);
   not MGM_G569(MGM_W468,d2_delay);
   and MGM_G570(MGM_W469,MGM_W468,d1_delay);
   and MGM_G571(MGM_W470,rb_delay,MGM_W469);
   not MGM_G572(MGM_W471,si_delay);
   and MGM_G573(ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si,MGM_W471,MGM_W470);
   not MGM_G574(MGM_W472,d2_delay);
   and MGM_G575(MGM_W473,MGM_W472,d1_delay);
   and MGM_G576(MGM_W474,rb_delay,MGM_W473);
   and MGM_G577(ENABLE_d1_AND_NOT_d2_AND_rb_AND_si,si_delay,MGM_W474);
   and MGM_G578(MGM_W475,d2_delay,d1_delay);
   and MGM_G579(MGM_W476,rb_delay,MGM_W475);
   not MGM_G580(MGM_W477,si_delay);
   and MGM_G581(ENABLE_d1_AND_d2_AND_rb_AND_NOT_si,MGM_W477,MGM_W476);
   and MGM_G582(MGM_W478,d2_delay,d1_delay);
   and MGM_G583(MGM_W479,rb_delay,MGM_W478);
   and MGM_G584(ENABLE_d1_AND_d2_AND_rb_AND_si,si_delay,MGM_W479);
   and MGM_G585(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz203ad1d02x2( clk, d1, d2, o1, o2, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 2bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} so = {((o1*!ssb)+(rb*d2*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// 
// assign `fvz203ad_delay o1 =  IQ1;
// assign `fvz203ad_delay o2 =  IQ2;
// assign `fvz203ad_delay so =  o2;
// 

   input clk, d1, d2, rb, si, ssb;
   output o1, o2, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d02x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz203ad_delay so_random_init = so_tmp ;
      assign `fvz203ad_delay o1_random_init = o1_tmp ;
      assign `fvz203ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d02x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `fvz203ad_delay so_random_init = so_tmp ;
      assign `fvz203ad_delay o1_random_init = o1_tmp ;
      assign `fvz203ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d02x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz203ad_func i0sfvz203ad1d02x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   buf MGM_G293(ENABLE_rb,rb_delay);
   not MGM_G294(MGM_W240,d1_delay);
   not MGM_G295(MGM_W241,d2_delay);
   and MGM_G296(MGM_W242,MGM_W241,MGM_W240);
   and MGM_G297(MGM_W243,si_delay,MGM_W242);
   not MGM_G298(MGM_W244,ssb_delay);
   and MGM_G299(ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W244,MGM_W243);
   not MGM_G300(MGM_W245,d1_delay);
   and MGM_G301(MGM_W246,d2_delay,MGM_W245);
   not MGM_G302(MGM_W247,si_delay);
   and MGM_G303(MGM_W248,MGM_W247,MGM_W246);
   and MGM_G304(ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W248);
   not MGM_G305(MGM_W249,d1_delay);
   and MGM_G306(MGM_W250,d2_delay,MGM_W249);
   and MGM_G307(MGM_W251,si_delay,MGM_W250);
   not MGM_G308(MGM_W252,ssb_delay);
   and MGM_G309(ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W252,MGM_W251);
   not MGM_G310(MGM_W253,d1_delay);
   and MGM_G311(MGM_W254,d2_delay,MGM_W253);
   and MGM_G312(MGM_W255,si_delay,MGM_W254);
   and MGM_G313(ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W255);
   not MGM_G314(MGM_W256,d2_delay);
   and MGM_G315(MGM_W257,MGM_W256,d1_delay);
   not MGM_G316(MGM_W258,si_delay);
   and MGM_G317(MGM_W259,MGM_W258,MGM_W257);
   and MGM_G318(ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W259);
   not MGM_G319(MGM_W260,d2_delay);
   and MGM_G320(MGM_W261,MGM_W260,d1_delay);
   and MGM_G321(MGM_W262,si_delay,MGM_W261);
   not MGM_G322(MGM_W263,ssb_delay);
   and MGM_G323(ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W263,MGM_W262);
   not MGM_G324(MGM_W264,d2_delay);
   and MGM_G325(MGM_W265,MGM_W264,d1_delay);
   and MGM_G326(MGM_W266,si_delay,MGM_W265);
   and MGM_G327(ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W266);
   and MGM_G328(MGM_W267,d2_delay,d1_delay);
   not MGM_G329(MGM_W268,si_delay);
   and MGM_G330(MGM_W269,MGM_W268,MGM_W267);
   and MGM_G331(ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W269);
   and MGM_G332(MGM_W270,d2_delay,d1_delay);
   and MGM_G333(MGM_W271,si_delay,MGM_W270);
   not MGM_G334(MGM_W272,ssb_delay);
   and MGM_G335(ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W272,MGM_W271);
   and MGM_G336(MGM_W273,d2_delay,d1_delay);
   and MGM_G337(MGM_W274,si_delay,MGM_W273);
   and MGM_G338(ENABLE_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W274);
   not MGM_G339(MGM_W275,clk_delay);
   not MGM_G340(MGM_W276,d1_delay);
   and MGM_G341(MGM_W277,MGM_W276,MGM_W275);
   not MGM_G342(MGM_W278,d2_delay);
   and MGM_G343(MGM_W279,MGM_W278,MGM_W277);
   not MGM_G344(MGM_W280,si_delay);
   and MGM_G345(MGM_W281,MGM_W280,MGM_W279);
   not MGM_G346(MGM_W282,ssb_delay);
   and MGM_G347(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W282,MGM_W281);
   not MGM_G348(MGM_W283,clk_delay);
   not MGM_G349(MGM_W284,d1_delay);
   and MGM_G350(MGM_W285,MGM_W284,MGM_W283);
   not MGM_G351(MGM_W286,d2_delay);
   and MGM_G352(MGM_W287,MGM_W286,MGM_W285);
   not MGM_G353(MGM_W288,si_delay);
   and MGM_G354(MGM_W289,MGM_W288,MGM_W287);
   and MGM_G355(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W289);
   not MGM_G356(MGM_W290,clk_delay);
   not MGM_G357(MGM_W291,d1_delay);
   and MGM_G358(MGM_W292,MGM_W291,MGM_W290);
   not MGM_G359(MGM_W293,d2_delay);
   and MGM_G360(MGM_W294,MGM_W293,MGM_W292);
   and MGM_G361(MGM_W295,si_delay,MGM_W294);
   not MGM_G362(MGM_W296,ssb_delay);
   and MGM_G363(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W296,MGM_W295);
   not MGM_G364(MGM_W297,clk_delay);
   not MGM_G365(MGM_W298,d1_delay);
   and MGM_G366(MGM_W299,MGM_W298,MGM_W297);
   not MGM_G367(MGM_W300,d2_delay);
   and MGM_G368(MGM_W301,MGM_W300,MGM_W299);
   and MGM_G369(MGM_W302,si_delay,MGM_W301);
   and MGM_G370(ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W302);
   not MGM_G371(MGM_W303,clk_delay);
   not MGM_G372(MGM_W304,d1_delay);
   and MGM_G373(MGM_W305,MGM_W304,MGM_W303);
   and MGM_G374(MGM_W306,d2_delay,MGM_W305);
   not MGM_G375(MGM_W307,si_delay);
   and MGM_G376(MGM_W308,MGM_W307,MGM_W306);
   not MGM_G377(MGM_W309,ssb_delay);
   and MGM_G378(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W309,MGM_W308);
   not MGM_G379(MGM_W310,clk_delay);
   not MGM_G380(MGM_W311,d1_delay);
   and MGM_G381(MGM_W312,MGM_W311,MGM_W310);
   and MGM_G382(MGM_W313,d2_delay,MGM_W312);
   not MGM_G383(MGM_W314,si_delay);
   and MGM_G384(MGM_W315,MGM_W314,MGM_W313);
   and MGM_G385(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W315);
   not MGM_G386(MGM_W316,clk_delay);
   not MGM_G387(MGM_W317,d1_delay);
   and MGM_G388(MGM_W318,MGM_W317,MGM_W316);
   and MGM_G389(MGM_W319,d2_delay,MGM_W318);
   and MGM_G390(MGM_W320,si_delay,MGM_W319);
   not MGM_G391(MGM_W321,ssb_delay);
   and MGM_G392(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W321,MGM_W320);
   not MGM_G393(MGM_W322,clk_delay);
   not MGM_G394(MGM_W323,d1_delay);
   and MGM_G395(MGM_W324,MGM_W323,MGM_W322);
   and MGM_G396(MGM_W325,d2_delay,MGM_W324);
   and MGM_G397(MGM_W326,si_delay,MGM_W325);
   and MGM_G398(ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W326);
   not MGM_G399(MGM_W327,clk_delay);
   and MGM_G400(MGM_W328,d1_delay,MGM_W327);
   not MGM_G401(MGM_W329,d2_delay);
   and MGM_G402(MGM_W330,MGM_W329,MGM_W328);
   not MGM_G403(MGM_W331,si_delay);
   and MGM_G404(MGM_W332,MGM_W331,MGM_W330);
   not MGM_G405(MGM_W333,ssb_delay);
   and MGM_G406(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W333,MGM_W332);
   not MGM_G407(MGM_W334,clk_delay);
   and MGM_G408(MGM_W335,d1_delay,MGM_W334);
   not MGM_G409(MGM_W336,d2_delay);
   and MGM_G410(MGM_W337,MGM_W336,MGM_W335);
   not MGM_G411(MGM_W338,si_delay);
   and MGM_G412(MGM_W339,MGM_W338,MGM_W337);
   and MGM_G413(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W339);
   not MGM_G414(MGM_W340,clk_delay);
   and MGM_G415(MGM_W341,d1_delay,MGM_W340);
   not MGM_G416(MGM_W342,d2_delay);
   and MGM_G417(MGM_W343,MGM_W342,MGM_W341);
   and MGM_G418(MGM_W344,si_delay,MGM_W343);
   not MGM_G419(MGM_W345,ssb_delay);
   and MGM_G420(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W345,MGM_W344);
   not MGM_G421(MGM_W346,clk_delay);
   and MGM_G422(MGM_W347,d1_delay,MGM_W346);
   not MGM_G423(MGM_W348,d2_delay);
   and MGM_G424(MGM_W349,MGM_W348,MGM_W347);
   and MGM_G425(MGM_W350,si_delay,MGM_W349);
   and MGM_G426(ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W350);
   not MGM_G427(MGM_W351,clk_delay);
   and MGM_G428(MGM_W352,d1_delay,MGM_W351);
   and MGM_G429(MGM_W353,d2_delay,MGM_W352);
   not MGM_G430(MGM_W354,si_delay);
   and MGM_G431(MGM_W355,MGM_W354,MGM_W353);
   not MGM_G432(MGM_W356,ssb_delay);
   and MGM_G433(ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W356,MGM_W355);
   not MGM_G434(MGM_W357,clk_delay);
   and MGM_G435(MGM_W358,d1_delay,MGM_W357);
   and MGM_G436(MGM_W359,d2_delay,MGM_W358);
   not MGM_G437(MGM_W360,si_delay);
   and MGM_G438(MGM_W361,MGM_W360,MGM_W359);
   and MGM_G439(ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W361);
   not MGM_G440(MGM_W362,clk_delay);
   and MGM_G441(MGM_W363,d1_delay,MGM_W362);
   and MGM_G442(MGM_W364,d2_delay,MGM_W363);
   and MGM_G443(MGM_W365,si_delay,MGM_W364);
   not MGM_G444(MGM_W366,ssb_delay);
   and MGM_G445(ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W366,MGM_W365);
   not MGM_G446(MGM_W367,clk_delay);
   and MGM_G447(MGM_W368,d1_delay,MGM_W367);
   and MGM_G448(MGM_W369,d2_delay,MGM_W368);
   and MGM_G449(MGM_W370,si_delay,MGM_W369);
   and MGM_G450(ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W370);
   not MGM_G451(MGM_W371,d1_delay);
   and MGM_G452(MGM_W372,MGM_W371,clk_delay);
   not MGM_G453(MGM_W373,d2_delay);
   and MGM_G454(MGM_W374,MGM_W373,MGM_W372);
   not MGM_G455(MGM_W375,si_delay);
   and MGM_G456(MGM_W376,MGM_W375,MGM_W374);
   not MGM_G457(MGM_W377,ssb_delay);
   and MGM_G458(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W377,MGM_W376);
   not MGM_G459(MGM_W378,d1_delay);
   and MGM_G460(MGM_W379,MGM_W378,clk_delay);
   not MGM_G461(MGM_W380,d2_delay);
   and MGM_G462(MGM_W381,MGM_W380,MGM_W379);
   not MGM_G463(MGM_W382,si_delay);
   and MGM_G464(MGM_W383,MGM_W382,MGM_W381);
   and MGM_G465(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W383);
   not MGM_G466(MGM_W384,d1_delay);
   and MGM_G467(MGM_W385,MGM_W384,clk_delay);
   not MGM_G468(MGM_W386,d2_delay);
   and MGM_G469(MGM_W387,MGM_W386,MGM_W385);
   and MGM_G470(MGM_W388,si_delay,MGM_W387);
   not MGM_G471(MGM_W389,ssb_delay);
   and MGM_G472(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W389,MGM_W388);
   not MGM_G473(MGM_W390,d1_delay);
   and MGM_G474(MGM_W391,MGM_W390,clk_delay);
   not MGM_G475(MGM_W392,d2_delay);
   and MGM_G476(MGM_W393,MGM_W392,MGM_W391);
   and MGM_G477(MGM_W394,si_delay,MGM_W393);
   and MGM_G478(ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W394);
   not MGM_G479(MGM_W395,d1_delay);
   and MGM_G480(MGM_W396,MGM_W395,clk_delay);
   and MGM_G481(MGM_W397,d2_delay,MGM_W396);
   not MGM_G482(MGM_W398,si_delay);
   and MGM_G483(MGM_W399,MGM_W398,MGM_W397);
   not MGM_G484(MGM_W400,ssb_delay);
   and MGM_G485(ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W400,MGM_W399);
   not MGM_G486(MGM_W401,d1_delay);
   and MGM_G487(MGM_W402,MGM_W401,clk_delay);
   and MGM_G488(MGM_W403,d2_delay,MGM_W402);
   not MGM_G489(MGM_W404,si_delay);
   and MGM_G490(MGM_W405,MGM_W404,MGM_W403);
   and MGM_G491(ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W405);
   not MGM_G492(MGM_W406,d1_delay);
   and MGM_G493(MGM_W407,MGM_W406,clk_delay);
   and MGM_G494(MGM_W408,d2_delay,MGM_W407);
   and MGM_G495(MGM_W409,si_delay,MGM_W408);
   not MGM_G496(MGM_W410,ssb_delay);
   and MGM_G497(ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W410,MGM_W409);
   not MGM_G498(MGM_W411,d1_delay);
   and MGM_G499(MGM_W412,MGM_W411,clk_delay);
   and MGM_G500(MGM_W413,d2_delay,MGM_W412);
   and MGM_G501(MGM_W414,si_delay,MGM_W413);
   and MGM_G502(ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W414);
   and MGM_G503(MGM_W415,d1_delay,clk_delay);
   not MGM_G504(MGM_W416,d2_delay);
   and MGM_G505(MGM_W417,MGM_W416,MGM_W415);
   not MGM_G506(MGM_W418,si_delay);
   and MGM_G507(MGM_W419,MGM_W418,MGM_W417);
   not MGM_G508(MGM_W420,ssb_delay);
   and MGM_G509(ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb,MGM_W420,MGM_W419);
   and MGM_G510(MGM_W421,d1_delay,clk_delay);
   not MGM_G511(MGM_W422,d2_delay);
   and MGM_G512(MGM_W423,MGM_W422,MGM_W421);
   not MGM_G513(MGM_W424,si_delay);
   and MGM_G514(MGM_W425,MGM_W424,MGM_W423);
   and MGM_G515(ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W425);
   and MGM_G516(MGM_W426,d1_delay,clk_delay);
   not MGM_G517(MGM_W427,d2_delay);
   and MGM_G518(MGM_W428,MGM_W427,MGM_W426);
   and MGM_G519(MGM_W429,si_delay,MGM_W428);
   not MGM_G520(MGM_W430,ssb_delay);
   and MGM_G521(ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb,MGM_W430,MGM_W429);
   and MGM_G522(MGM_W431,d1_delay,clk_delay);
   not MGM_G523(MGM_W432,d2_delay);
   and MGM_G524(MGM_W433,MGM_W432,MGM_W431);
   and MGM_G525(MGM_W434,si_delay,MGM_W433);
   and MGM_G526(ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb,ssb_delay,MGM_W434);
   and MGM_G527(MGM_W435,d1_delay,clk_delay);
   and MGM_G528(MGM_W436,d2_delay,MGM_W435);
   not MGM_G529(MGM_W437,si_delay);
   and MGM_G530(MGM_W438,MGM_W437,MGM_W436);
   not MGM_G531(MGM_W439,ssb_delay);
   and MGM_G532(ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb,MGM_W439,MGM_W438);
   and MGM_G533(MGM_W440,d1_delay,clk_delay);
   and MGM_G534(MGM_W441,d2_delay,MGM_W440);
   not MGM_G535(MGM_W442,si_delay);
   and MGM_G536(MGM_W443,MGM_W442,MGM_W441);
   and MGM_G537(ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb,ssb_delay,MGM_W443);
   and MGM_G538(MGM_W444,d1_delay,clk_delay);
   and MGM_G539(MGM_W445,d2_delay,MGM_W444);
   and MGM_G540(MGM_W446,si_delay,MGM_W445);
   not MGM_G541(MGM_W447,ssb_delay);
   and MGM_G542(ENABLE_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb,MGM_W447,MGM_W446);
   and MGM_G543(MGM_W448,d1_delay,clk_delay);
   and MGM_G544(MGM_W449,d2_delay,MGM_W448);
   and MGM_G545(MGM_W450,si_delay,MGM_W449);
   and MGM_G546(ENABLE_clk_AND_d1_AND_d2_AND_si_AND_ssb,ssb_delay,MGM_W450);
   not MGM_G547(MGM_W451,ssb_delay);
   and MGM_G548(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W451);
   not MGM_G549(MGM_W452,d1_delay);
   not MGM_G550(MGM_W453,d2_delay);
   and MGM_G551(MGM_W454,MGM_W453,MGM_W452);
   and MGM_G552(MGM_W455,rb_delay,MGM_W454);
   not MGM_G553(MGM_W456,si_delay);
   and MGM_G554(ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si,MGM_W456,MGM_W455);
   not MGM_G555(MGM_W457,d1_delay);
   not MGM_G556(MGM_W458,d2_delay);
   and MGM_G557(MGM_W459,MGM_W458,MGM_W457);
   and MGM_G558(MGM_W460,rb_delay,MGM_W459);
   and MGM_G559(ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si,si_delay,MGM_W460);
   not MGM_G560(MGM_W461,d1_delay);
   and MGM_G561(MGM_W462,d2_delay,MGM_W461);
   and MGM_G562(MGM_W463,rb_delay,MGM_W462);
   not MGM_G563(MGM_W464,si_delay);
   and MGM_G564(ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si,MGM_W464,MGM_W463);
   not MGM_G565(MGM_W465,d1_delay);
   and MGM_G566(MGM_W466,d2_delay,MGM_W465);
   and MGM_G567(MGM_W467,rb_delay,MGM_W466);
   and MGM_G568(ENABLE_NOT_d1_AND_d2_AND_rb_AND_si,si_delay,MGM_W467);
   not MGM_G569(MGM_W468,d2_delay);
   and MGM_G570(MGM_W469,MGM_W468,d1_delay);
   and MGM_G571(MGM_W470,rb_delay,MGM_W469);
   not MGM_G572(MGM_W471,si_delay);
   and MGM_G573(ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si,MGM_W471,MGM_W470);
   not MGM_G574(MGM_W472,d2_delay);
   and MGM_G575(MGM_W473,MGM_W472,d1_delay);
   and MGM_G576(MGM_W474,rb_delay,MGM_W473);
   and MGM_G577(ENABLE_d1_AND_NOT_d2_AND_rb_AND_si,si_delay,MGM_W474);
   and MGM_G578(MGM_W475,d2_delay,d1_delay);
   and MGM_G579(MGM_W476,rb_delay,MGM_W475);
   not MGM_G580(MGM_W477,si_delay);
   and MGM_G581(ENABLE_d1_AND_d2_AND_rb_AND_NOT_si,MGM_W477,MGM_W476);
   and MGM_G582(MGM_W478,d2_delay,d1_delay);
   and MGM_G583(MGM_W479,rb_delay,MGM_W478);
   and MGM_G584(ENABLE_d1_AND_d2_AND_rb_AND_si,si_delay,MGM_W479);
   and MGM_G585(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_NOT_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_NOT_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clk_AND_d1_AND_d2_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_NOT_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_rb_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz403ad1q01x1( clk, d1, d2, d3, d4, o1, o2, o3, o4, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} o3 = {((o2*!ssb)+(rb*d3*ssb)) on rising clk} o4 = {((o3*!ssb)+(rb*d4*ssb)) on rising clk} so = {((o3*!ssb)+(rb*d4*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ3 <= 1'b0 ;
// end
// else
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ4 <= 1'b0 ;
// end
// else
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// end
// 
// assign `fvz403ad_delay o1 =  IQ1;
// assign `fvz403ad_delay o2 =  IQ2;
// assign `fvz403ad_delay o3 =  IQ3;
// assign `fvz403ad_delay o4 =  IQ4;
// assign `fvz403ad_delay so =  o4;
// 

   input clk, d1, d2, d3, d4, rb, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x1_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz403ad_delay so_random_init = so_tmp ;
      assign `fvz403ad_delay o1_random_init = o1_tmp ;
      assign `fvz403ad_delay o2_random_init = o2_tmp ;
      assign `fvz403ad_delay o3_random_init = o3_tmp ;
      assign `fvz403ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x1_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fvz403ad_delay so_random_init = so_tmp ;
      assign `fvz403ad_delay o1_random_init = o1_tmp ;
      assign `fvz403ad_delay o2_random_init = o2_tmp ;
      assign `fvz403ad_delay o3_random_init = o3_tmp ;
      assign `fvz403ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x1_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x1_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   buf MGM_G22(ENABLE_rb,rb_delay);
   and MGM_G23(MGM_W16,d2_delay,d1_delay);
   and MGM_G24(MGM_W17,d3_delay,MGM_W16);
   and MGM_G25(MGM_W18,d4_delay,MGM_W17);
   and MGM_G26(MGM_W19,si_delay,MGM_W18);
   and MGM_G27(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G28(MGM_W20,ssb_delay);
   and MGM_G29(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W20);
   not MGM_G30(MGM_W21,d1_delay);
   not MGM_G31(MGM_W22,d2_delay);
   and MGM_G32(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G33(MGM_W24,d3_delay);
   and MGM_G34(MGM_W25,MGM_W24,MGM_W23);
   not MGM_G35(MGM_W26,d4_delay);
   and MGM_G36(MGM_W27,MGM_W26,MGM_W25);
   and MGM_G37(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si,si_delay,MGM_W27);
   and MGM_G38(MGM_W28,d2_delay,d1_delay);
   and MGM_G39(MGM_W29,d3_delay,MGM_W28);
   and MGM_G40(MGM_W30,d4_delay,MGM_W29);
   not MGM_G41(MGM_W31,si_delay);
   and MGM_G42(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si,MGM_W31,MGM_W30);
   and MGM_G43(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o3==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o3==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz403ad1q01x2( clk, d1, d2, d3, d4, o1, o2, o3, o4, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} o3 = {((o2*!ssb)+(rb*d3*ssb)) on rising clk} o4 = {((o3*!ssb)+(rb*d4*ssb)) on rising clk} so = {((o3*!ssb)+(rb*d4*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ3 <= 1'b0 ;
// end
// else
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ4 <= 1'b0 ;
// end
// else
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// end
// 
// assign `fvz403ad_delay o1 =  IQ1;
// assign `fvz403ad_delay o2 =  IQ2;
// assign `fvz403ad_delay o3 =  IQ3;
// assign `fvz403ad_delay o4 =  IQ4;
// assign `fvz403ad_delay so =  o4;
// 

   input clk, d1, d2, d3, d4, rb, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz403ad_delay so_random_init = so_tmp ;
      assign `fvz403ad_delay o1_random_init = o1_tmp ;
      assign `fvz403ad_delay o2_random_init = o2_tmp ;
      assign `fvz403ad_delay o3_random_init = o3_tmp ;
      assign `fvz403ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fvz403ad_delay so_random_init = so_tmp ;
      assign `fvz403ad_delay o1_random_init = o1_tmp ;
      assign `fvz403ad_delay o2_random_init = o2_tmp ;
      assign `fvz403ad_delay o3_random_init = o3_tmp ;
      assign `fvz403ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q01x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   buf MGM_G22(ENABLE_rb,rb_delay);
   and MGM_G23(MGM_W16,d2_delay,d1_delay);
   and MGM_G24(MGM_W17,d3_delay,MGM_W16);
   and MGM_G25(MGM_W18,d4_delay,MGM_W17);
   and MGM_G26(MGM_W19,si_delay,MGM_W18);
   and MGM_G27(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G28(MGM_W20,ssb_delay);
   and MGM_G29(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W20);
   not MGM_G30(MGM_W21,d1_delay);
   not MGM_G31(MGM_W22,d2_delay);
   and MGM_G32(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G33(MGM_W24,d3_delay);
   and MGM_G34(MGM_W25,MGM_W24,MGM_W23);
   not MGM_G35(MGM_W26,d4_delay);
   and MGM_G36(MGM_W27,MGM_W26,MGM_W25);
   and MGM_G37(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si,si_delay,MGM_W27);
   and MGM_G38(MGM_W28,d2_delay,d1_delay);
   and MGM_G39(MGM_W29,d3_delay,MGM_W28);
   and MGM_G40(MGM_W30,d4_delay,MGM_W29);
   not MGM_G41(MGM_W31,si_delay);
   and MGM_G42(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si,MGM_W31,MGM_W30);
   and MGM_G43(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o3==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o3==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz403ad1q02x2( clk, d1, d2, d3, d4, o1, o2, o3, o4, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 4bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} o3 = {((o2*!ssb)+(rb*d3*ssb)) on rising clk} o4 = {((o3*!ssb)+(rb*d4*ssb)) on rising clk} so = {((o3*!ssb)+(rb*d4*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ3 <= 1'b0 ;
// end
// else
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ4 <= 1'b0 ;
// end
// else
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// end
// 
// assign `fvz403ad_delay o1 =  IQ1;
// assign `fvz403ad_delay o2 =  IQ2;
// assign `fvz403ad_delay o3 =  IQ3;
// assign `fvz403ad_delay o4 =  IQ4;
// assign `fvz403ad_delay so =  o4;
// 

   input clk, d1, d2, d3, d4, rb, si, ssb;
   output o1, o2, o3, o4, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q02x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz403ad_delay so_random_init = so_tmp ;
      assign `fvz403ad_delay o1_random_init = o1_tmp ;
      assign `fvz403ad_delay o2_random_init = o2_tmp ;
      assign `fvz403ad_delay o3_random_init = o3_tmp ;
      assign `fvz403ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q02x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `fvz403ad_delay so_random_init = so_tmp ;
      assign `fvz403ad_delay o1_random_init = o1_tmp ;
      assign `fvz403ad_delay o2_random_init = o2_tmp ;
      assign `fvz403ad_delay o3_random_init = o3_tmp ;
      assign `fvz403ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q02x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz403ad_func i0sfvz403ad1q02x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   buf MGM_G22(ENABLE_rb,rb_delay);
   and MGM_G23(MGM_W16,d2_delay,d1_delay);
   and MGM_G24(MGM_W17,d3_delay,MGM_W16);
   and MGM_G25(MGM_W18,d4_delay,MGM_W17);
   and MGM_G26(MGM_W19,si_delay,MGM_W18);
   and MGM_G27(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb,ssb_delay,MGM_W19);
   not MGM_G28(MGM_W20,ssb_delay);
   and MGM_G29(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W20);
   not MGM_G30(MGM_W21,d1_delay);
   not MGM_G31(MGM_W22,d2_delay);
   and MGM_G32(MGM_W23,MGM_W22,MGM_W21);
   not MGM_G33(MGM_W24,d3_delay);
   and MGM_G34(MGM_W25,MGM_W24,MGM_W23);
   not MGM_G35(MGM_W26,d4_delay);
   and MGM_G36(MGM_W27,MGM_W26,MGM_W25);
   and MGM_G37(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si,si_delay,MGM_W27);
   and MGM_G38(MGM_W28,d2_delay,d1_delay);
   and MGM_G39(MGM_W29,d3_delay,MGM_W28);
   and MGM_G40(MGM_W30,d4_delay,MGM_W29);
   not MGM_G41(MGM_W31,si_delay);
   and MGM_G42(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si,MGM_W31,MGM_W30);
   and MGM_G43(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o3==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o3==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz803ad1q01x1( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 8bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} o3 = {((o2*!ssb)+(rb*d3*ssb)) on rising clk} o4 = {((o3*!ssb)+(rb*d4*ssb)) on rising clk} o5 = {((o4*!ssb)+(rb*d5*ssb)) on rising clk} o6 = {((o5*!ssb)+(rb*d6*ssb)) on rising clk} o7 = {((o6*!ssb)+(rb*d7*ssb)) on rising clk} o8 = {((o7*!ssb)+(rb*d8*ssb)) on rising clk} so = {((o7*!ssb)+(rb*d8*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ3 <= 1'b0 ;
// end
// else
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ4 <= 1'b0 ;
// end
// else
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ5 <= 1'b0 ;
// end
// else
// begin
// IQ5 <= ssb ? d5 : IQ4 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ6 <= 1'b0 ;
// end
// else
// begin
// IQ6 <= ssb ? d6 : IQ5 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ7 <= 1'b0 ;
// end
// else
// begin
// IQ7 <= ssb ? d7 : IQ6 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ8 <= 1'b0 ;
// end
// else
// begin
// IQ8 <= ssb ? d8 : IQ7 ;
// end
// end
// 
// assign `fvz803ad_delay o1 =  IQ1;
// assign `fvz803ad_delay o2 =  IQ2;
// assign `fvz803ad_delay o3 =  IQ3;
// assign `fvz803ad_delay o4 =  IQ4;
// assign `fvz803ad_delay o5 =  IQ5;
// assign `fvz803ad_delay o6 =  IQ6;
// assign `fvz803ad_delay o7 =  IQ7;
// assign `fvz803ad_delay o8 =  IQ8;
// assign `fvz803ad_delay so =  o8;
// 

   input clk, d1, d2, d3, d4, d5, d6, d7, d8, rb, si, ssb;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      wire o5_random_init;
      wire o6_random_init;
      wire o7_random_init;
      wire o8_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init or o5_random_init or o6_random_init or o7_random_init or o8_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx) && (o5_random_init !== 1'bx) && (o6_random_init !== 1'bx) && (o7_random_init !== 1'bx) && (o8_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
         assign o5 = ((random_init_ctrl_gls === 1'b1) && (o5_random_init === 1'bx)) ? init_val : o5_random_init;
         assign o6 = ((random_init_ctrl_gls === 1'b1) && (o6_random_init === 1'bx)) ? init_val : o6_random_init;
         assign o7 = ((random_init_ctrl_gls === 1'b1) && (o7_random_init === 1'bx)) ? init_val : o7_random_init;
         assign o8 = ((random_init_ctrl_gls === 1'b1) && (o8_random_init === 1'bx)) ? init_val : o8_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
         assign o5 = o5_random_init;
         assign o6 = o6_random_init;
         assign o7 = o7_random_init;
         assign o8 = o8_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x1_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz803ad_delay so_random_init = so_tmp ;
      assign `fvz803ad_delay o1_random_init = o1_tmp ;
      assign `fvz803ad_delay o2_random_init = o2_tmp ;
      assign `fvz803ad_delay o3_random_init = o3_tmp ;
      assign `fvz803ad_delay o4_random_init = o4_tmp ;
      assign `fvz803ad_delay o5_random_init = o5_tmp ;
      assign `fvz803ad_delay o6_random_init = o6_tmp ;
      assign `fvz803ad_delay o7_random_init = o7_tmp ;
      assign `fvz803ad_delay o8_random_init = o8_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x1_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0));
      assign `fvz803ad_delay so_random_init = so_tmp ;
      assign `fvz803ad_delay o1_random_init = o1_tmp ;
      assign `fvz803ad_delay o2_random_init = o2_tmp ;
      assign `fvz803ad_delay o3_random_init = o3_tmp ;
      assign `fvz803ad_delay o4_random_init = o4_tmp ;
      assign `fvz803ad_delay o5_random_init = o5_tmp ;
      assign `fvz803ad_delay o6_random_init = o6_tmp ;
      assign `fvz803ad_delay o7_random_init = o7_tmp ;
      assign `fvz803ad_delay o8_random_init = o8_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire d5_delay ;
   wire d6_delay ;
   wire d7_delay ;
   wire d8_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   reg notifier4;
   reg notifier5;
   reg notifier6;
   reg notifier7;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
     notifier4 = (notifier4 !== notifier) ? notifier : ~notifier4;
     notifier5 = (notifier5 !== notifier) ? notifier : ~notifier5;
     notifier6 = (notifier6 !== notifier) ? notifier : ~notifier6;
     notifier7 = (notifier7 !== notifier) ? notifier : ~notifier7;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x1_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x1_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7));
   `endif
   
   // spec_gates_begin
   buf MGM_G38(ENABLE_rb,rb_delay);
   and MGM_G39(MGM_W32,d2_delay,d1_delay);
   and MGM_G40(MGM_W33,d3_delay,MGM_W32);
   and MGM_G41(MGM_W34,d4_delay,MGM_W33);
   and MGM_G42(MGM_W35,d5_delay,MGM_W34);
   and MGM_G43(MGM_W36,d6_delay,MGM_W35);
   and MGM_G44(MGM_W37,d7_delay,MGM_W36);
   and MGM_G45(MGM_W38,d8_delay,MGM_W37);
   and MGM_G46(MGM_W39,si_delay,MGM_W38);
   and MGM_G47(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb,ssb_delay,MGM_W39);
   not MGM_G48(MGM_W40,ssb_delay);
   and MGM_G49(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W40);
   not MGM_G50(MGM_W41,d1_delay);
   not MGM_G51(MGM_W42,d2_delay);
   and MGM_G52(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G53(MGM_W44,d3_delay);
   and MGM_G54(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G55(MGM_W46,d4_delay);
   and MGM_G56(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G57(MGM_W48,d5_delay);
   and MGM_G58(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G59(MGM_W50,d6_delay);
   and MGM_G60(MGM_W51,MGM_W50,MGM_W49);
   not MGM_G61(MGM_W52,d7_delay);
   and MGM_G62(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G63(MGM_W54,d8_delay);
   and MGM_G64(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G65(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si,si_delay,MGM_W55);
   and MGM_G66(MGM_W56,d2_delay,d1_delay);
   and MGM_G67(MGM_W57,d3_delay,MGM_W56);
   and MGM_G68(MGM_W58,d4_delay,MGM_W57);
   and MGM_G69(MGM_W59,d5_delay,MGM_W58);
   and MGM_G70(MGM_W60,d6_delay,MGM_W59);
   and MGM_G71(MGM_W61,d7_delay,MGM_W60);
   and MGM_G72(MGM_W62,d8_delay,MGM_W61);
   not MGM_G73(MGM_W63,si_delay);
   and MGM_G74(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si,MGM_W63,MGM_W62);
   and MGM_G75(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o7==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o7==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b0 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b0 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b1 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b1 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b0 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b0 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b1 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b1 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b0 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b0 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b1 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b1 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b0 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b0 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b1 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b1 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b0 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b0 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b1 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b1 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b0 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b0 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b1 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b1 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b0 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b0 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b1 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b1 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b0 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b0 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b1 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b1 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d5 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d5 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d6 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d6 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d7 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d7 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d8 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d8 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz803ad1q01x2( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 8bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} o3 = {((o2*!ssb)+(rb*d3*ssb)) on rising clk} o4 = {((o3*!ssb)+(rb*d4*ssb)) on rising clk} o5 = {((o4*!ssb)+(rb*d5*ssb)) on rising clk} o6 = {((o5*!ssb)+(rb*d6*ssb)) on rising clk} o7 = {((o6*!ssb)+(rb*d7*ssb)) on rising clk} o8 = {((o7*!ssb)+(rb*d8*ssb)) on rising clk} so = {((o7*!ssb)+(rb*d8*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ3 <= 1'b0 ;
// end
// else
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ4 <= 1'b0 ;
// end
// else
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ5 <= 1'b0 ;
// end
// else
// begin
// IQ5 <= ssb ? d5 : IQ4 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ6 <= 1'b0 ;
// end
// else
// begin
// IQ6 <= ssb ? d6 : IQ5 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ7 <= 1'b0 ;
// end
// else
// begin
// IQ7 <= ssb ? d7 : IQ6 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ8 <= 1'b0 ;
// end
// else
// begin
// IQ8 <= ssb ? d8 : IQ7 ;
// end
// end
// 
// assign `fvz803ad_delay o1 =  IQ1;
// assign `fvz803ad_delay o2 =  IQ2;
// assign `fvz803ad_delay o3 =  IQ3;
// assign `fvz803ad_delay o4 =  IQ4;
// assign `fvz803ad_delay o5 =  IQ5;
// assign `fvz803ad_delay o6 =  IQ6;
// assign `fvz803ad_delay o7 =  IQ7;
// assign `fvz803ad_delay o8 =  IQ8;
// assign `fvz803ad_delay so =  o8;
// 

   input clk, d1, d2, d3, d4, d5, d6, d7, d8, rb, si, ssb;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      wire o5_random_init;
      wire o6_random_init;
      wire o7_random_init;
      wire o8_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init or o5_random_init or o6_random_init or o7_random_init or o8_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx) && (o5_random_init !== 1'bx) && (o6_random_init !== 1'bx) && (o7_random_init !== 1'bx) && (o8_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
         assign o5 = ((random_init_ctrl_gls === 1'b1) && (o5_random_init === 1'bx)) ? init_val : o5_random_init;
         assign o6 = ((random_init_ctrl_gls === 1'b1) && (o6_random_init === 1'bx)) ? init_val : o6_random_init;
         assign o7 = ((random_init_ctrl_gls === 1'b1) && (o7_random_init === 1'bx)) ? init_val : o7_random_init;
         assign o8 = ((random_init_ctrl_gls === 1'b1) && (o8_random_init === 1'bx)) ? init_val : o8_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
         assign o5 = o5_random_init;
         assign o6 = o6_random_init;
         assign o7 = o7_random_init;
         assign o8 = o8_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz803ad_delay so_random_init = so_tmp ;
      assign `fvz803ad_delay o1_random_init = o1_tmp ;
      assign `fvz803ad_delay o2_random_init = o2_tmp ;
      assign `fvz803ad_delay o3_random_init = o3_tmp ;
      assign `fvz803ad_delay o4_random_init = o4_tmp ;
      assign `fvz803ad_delay o5_random_init = o5_tmp ;
      assign `fvz803ad_delay o6_random_init = o6_tmp ;
      assign `fvz803ad_delay o7_random_init = o7_tmp ;
      assign `fvz803ad_delay o8_random_init = o8_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0));
      assign `fvz803ad_delay so_random_init = so_tmp ;
      assign `fvz803ad_delay o1_random_init = o1_tmp ;
      assign `fvz803ad_delay o2_random_init = o2_tmp ;
      assign `fvz803ad_delay o3_random_init = o3_tmp ;
      assign `fvz803ad_delay o4_random_init = o4_tmp ;
      assign `fvz803ad_delay o5_random_init = o5_tmp ;
      assign `fvz803ad_delay o6_random_init = o6_tmp ;
      assign `fvz803ad_delay o7_random_init = o7_tmp ;
      assign `fvz803ad_delay o8_random_init = o8_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire d5_delay ;
   wire d6_delay ;
   wire d7_delay ;
   wire d8_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   reg notifier4;
   reg notifier5;
   reg notifier6;
   reg notifier7;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
     notifier4 = (notifier4 !== notifier) ? notifier : ~notifier4;
     notifier5 = (notifier5 !== notifier) ? notifier : ~notifier5;
     notifier6 = (notifier6 !== notifier) ? notifier : ~notifier6;
     notifier7 = (notifier7 !== notifier) ? notifier : ~notifier7;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q01x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7));
   `endif
   
   // spec_gates_begin
   buf MGM_G38(ENABLE_rb,rb_delay);
   and MGM_G39(MGM_W32,d2_delay,d1_delay);
   and MGM_G40(MGM_W33,d3_delay,MGM_W32);
   and MGM_G41(MGM_W34,d4_delay,MGM_W33);
   and MGM_G42(MGM_W35,d5_delay,MGM_W34);
   and MGM_G43(MGM_W36,d6_delay,MGM_W35);
   and MGM_G44(MGM_W37,d7_delay,MGM_W36);
   and MGM_G45(MGM_W38,d8_delay,MGM_W37);
   and MGM_G46(MGM_W39,si_delay,MGM_W38);
   and MGM_G47(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb,ssb_delay,MGM_W39);
   not MGM_G48(MGM_W40,ssb_delay);
   and MGM_G49(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W40);
   not MGM_G50(MGM_W41,d1_delay);
   not MGM_G51(MGM_W42,d2_delay);
   and MGM_G52(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G53(MGM_W44,d3_delay);
   and MGM_G54(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G55(MGM_W46,d4_delay);
   and MGM_G56(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G57(MGM_W48,d5_delay);
   and MGM_G58(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G59(MGM_W50,d6_delay);
   and MGM_G60(MGM_W51,MGM_W50,MGM_W49);
   not MGM_G61(MGM_W52,d7_delay);
   and MGM_G62(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G63(MGM_W54,d8_delay);
   and MGM_G64(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G65(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si,si_delay,MGM_W55);
   and MGM_G66(MGM_W56,d2_delay,d1_delay);
   and MGM_G67(MGM_W57,d3_delay,MGM_W56);
   and MGM_G68(MGM_W58,d4_delay,MGM_W57);
   and MGM_G69(MGM_W59,d5_delay,MGM_W58);
   and MGM_G70(MGM_W60,d6_delay,MGM_W59);
   and MGM_G71(MGM_W61,d7_delay,MGM_W60);
   and MGM_G72(MGM_W62,d8_delay,MGM_W61);
   not MGM_G73(MGM_W63,si_delay);
   and MGM_G74(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si,MGM_W63,MGM_W62);
   and MGM_G75(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o7==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o7==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b0 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b0 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b1 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b1 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b0 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b0 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b1 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b1 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b0 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b0 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b1 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b1 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b0 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b0 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b1 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b1 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b0 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b0 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b1 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b1 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b0 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b0 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b1 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b1 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b0 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b0 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b1 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b1 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b0 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b0 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b1 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b1 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d5 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d5 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d6 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d6 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d7 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d7 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d8 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d8 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvz803ad1q02x2( clk, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8, rb, si, so, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// RedCap scan 8bit MDFF with internally stitched scanout and asynch reset o1 = {((si*!ssb)+(rb*d1*ssb)) on rising clk} o2 = {((o1*!ssb)+(rb*d2*ssb)) on rising clk} o3 = {((o2*!ssb)+(rb*d3*ssb)) on rising clk} o4 = {((o3*!ssb)+(rb*d4*ssb)) on rising clk} o5 = {((o4*!ssb)+(rb*d5*ssb)) on rising clk} o6 = {((o5*!ssb)+(rb*d6*ssb)) on rising clk} o7 = {((o6*!ssb)+(rb*d7*ssb)) on rising clk} o8 = {((o7*!ssb)+(rb*d8*ssb)) on rising clk} so = {((o7*!ssb)+(rb*d8*ssb)) on rising clk}
// 
// 
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else
// begin
// IQ1 <= ssb ? d1 : si ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ2 <= 1'b0 ;
// end
// else
// begin
// IQ2 <= ssb ? d2 : IQ1 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ3 <= 1'b0 ;
// end
// else
// begin
// IQ3 <= ssb ? d3 : IQ2 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ4 <= 1'b0 ;
// end
// else
// begin
// IQ4 <= ssb ? d4 : IQ3 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ5 <= 1'b0 ;
// end
// else
// begin
// IQ5 <= ssb ? d5 : IQ4 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ6 <= 1'b0 ;
// end
// else
// begin
// IQ6 <= ssb ? d6 : IQ5 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ7 <= 1'b0 ;
// end
// else
// begin
// IQ7 <= ssb ? d7 : IQ6 ;
// end
// end
// always @ (posedge clk or negedge rb)
// begin
// if (!rb)
// begin
// IQ8 <= 1'b0 ;
// end
// else
// begin
// IQ8 <= ssb ? d8 : IQ7 ;
// end
// end
// 
// assign `fvz803ad_delay o1 =  IQ1;
// assign `fvz803ad_delay o2 =  IQ2;
// assign `fvz803ad_delay o3 =  IQ3;
// assign `fvz803ad_delay o4 =  IQ4;
// assign `fvz803ad_delay o5 =  IQ5;
// assign `fvz803ad_delay o6 =  IQ6;
// assign `fvz803ad_delay o7 =  IQ7;
// assign `fvz803ad_delay o8 =  IQ8;
// assign `fvz803ad_delay so =  o8;
// 

   input clk, d1, d2, d3, d4, d5, d6, d7, d8, rb, si, ssb;
   output o1, o2, o3, o4, o5, o6, o7, o8, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire so_random_init;
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      wire o5_random_init;
      wire o6_random_init;
      wire o7_random_init;
      wire o8_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(so_random_init or o1_random_init or o2_random_init or o3_random_init or o4_random_init or o5_random_init or o6_random_init or o7_random_init or o8_random_init)
         if((so_random_init !== 1'bx) && (o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx) && (o5_random_init !== 1'bx) && (o6_random_init !== 1'bx) && (o7_random_init !== 1'bx) && (o8_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
         assign o5 = ((random_init_ctrl_gls === 1'b1) && (o5_random_init === 1'bx)) ? init_val : o5_random_init;
         assign o6 = ((random_init_ctrl_gls === 1'b1) && (o6_random_init === 1'bx)) ? init_val : o6_random_init;
         assign o7 = ((random_init_ctrl_gls === 1'b1) && (o7_random_init === 1'bx)) ? init_val : o7_random_init;
         assign o8 = ((random_init_ctrl_gls === 1'b1) && (o8_random_init === 1'bx)) ? init_val : o8_random_init;
      `else
         assign so = so_random_init;
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
         assign o5 = o5_random_init;
         assign o6 = o6_random_init;
         assign o7 = o7_random_init;
         assign o8 = o8_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q02x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0),.vcc(vcc),.vssx(vssx));
      assign `fvz803ad_delay so_random_init = so_tmp ;
      assign `fvz803ad_delay o1_random_init = o1_tmp ;
      assign `fvz803ad_delay o2_random_init = o2_tmp ;
      assign `fvz803ad_delay o3_random_init = o3_tmp ;
      assign `fvz803ad_delay o4_random_init = o4_tmp ;
      assign `fvz803ad_delay o5_random_init = o5_tmp ;
      assign `fvz803ad_delay o6_random_init = o6_tmp ;
      assign `fvz803ad_delay o7_random_init = o7_tmp ;
      assign `fvz803ad_delay o8_random_init = o8_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q02x2_behav_inst(.clk(clk),.rb(rb),.si(si),.so(so_tmp),.ssb(ssb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.d5(d5),.d6(d6),.d7(d7),.d8(d8),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.o5(o5_tmp),.o6(o6_tmp),.o7(o7_tmp),.o8(o8_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.notifier4(1'b0),.notifier5(1'b0),.notifier6(1'b0),.notifier7(1'b0));
      assign `fvz803ad_delay so_random_init = so_tmp ;
      assign `fvz803ad_delay o1_random_init = o1_tmp ;
      assign `fvz803ad_delay o2_random_init = o2_tmp ;
      assign `fvz803ad_delay o3_random_init = o3_tmp ;
      assign `fvz803ad_delay o4_random_init = o4_tmp ;
      assign `fvz803ad_delay o5_random_init = o5_tmp ;
      assign `fvz803ad_delay o6_random_init = o6_tmp ;
      assign `fvz803ad_delay o7_random_init = o7_tmp ;
      assign `fvz803ad_delay o8_random_init = o8_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   wire d5_delay ;
   wire d6_delay ;
   wire d7_delay ;
   wire d8_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   reg notifier4;
   reg notifier5;
   reg notifier6;
   reg notifier7;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
     notifier4 = (notifier4 !== notifier) ? notifier : ~notifier4;
     notifier5 = (notifier5 !== notifier) ? notifier : ~notifier5;
     notifier6 = (notifier6 !== notifier) ? notifier : ~notifier6;
     notifier7 = (notifier7 !== notifier) ? notifier : ~notifier7;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q02x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_fvz803ad_func i0sfvz803ad1q02x2_inst(.clk(clk_delay),.rb(rb_delay),.si(si_delay),.so(so_random_init),.ssb(ssb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.d5(d5_delay),.d6(d6_delay),.d7(d7_delay),.d8(d8_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.o5(o5_random_init),.o6(o6_random_init),.o7(o7_random_init),.o8(o8_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.notifier4(notifier4),.notifier5(notifier5),.notifier6(notifier6),.notifier7(notifier7));
   `endif
   
   // spec_gates_begin
   buf MGM_G38(ENABLE_rb,rb_delay);
   and MGM_G39(MGM_W32,d2_delay,d1_delay);
   and MGM_G40(MGM_W33,d3_delay,MGM_W32);
   and MGM_G41(MGM_W34,d4_delay,MGM_W33);
   and MGM_G42(MGM_W35,d5_delay,MGM_W34);
   and MGM_G43(MGM_W36,d6_delay,MGM_W35);
   and MGM_G44(MGM_W37,d7_delay,MGM_W36);
   and MGM_G45(MGM_W38,d8_delay,MGM_W37);
   and MGM_G46(MGM_W39,si_delay,MGM_W38);
   and MGM_G47(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb,ssb_delay,MGM_W39);
   not MGM_G48(MGM_W40,ssb_delay);
   and MGM_G49(ENABLE_NOT_ssb_AND_rb,rb_delay,MGM_W40);
   not MGM_G50(MGM_W41,d1_delay);
   not MGM_G51(MGM_W42,d2_delay);
   and MGM_G52(MGM_W43,MGM_W42,MGM_W41);
   not MGM_G53(MGM_W44,d3_delay);
   and MGM_G54(MGM_W45,MGM_W44,MGM_W43);
   not MGM_G55(MGM_W46,d4_delay);
   and MGM_G56(MGM_W47,MGM_W46,MGM_W45);
   not MGM_G57(MGM_W48,d5_delay);
   and MGM_G58(MGM_W49,MGM_W48,MGM_W47);
   not MGM_G59(MGM_W50,d6_delay);
   and MGM_G60(MGM_W51,MGM_W50,MGM_W49);
   not MGM_G61(MGM_W52,d7_delay);
   and MGM_G62(MGM_W53,MGM_W52,MGM_W51);
   not MGM_G63(MGM_W54,d8_delay);
   and MGM_G64(MGM_W55,MGM_W54,MGM_W53);
   and MGM_G65(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si,si_delay,MGM_W55);
   and MGM_G66(MGM_W56,d2_delay,d1_delay);
   and MGM_G67(MGM_W57,d3_delay,MGM_W56);
   and MGM_G68(MGM_W58,d4_delay,MGM_W57);
   and MGM_G69(MGM_W59,d5_delay,MGM_W58);
   and MGM_G70(MGM_W60,d6_delay,MGM_W59);
   and MGM_G71(MGM_W61,d7_delay,MGM_W60);
   and MGM_G72(MGM_W62,d8_delay,MGM_W61);
   not MGM_G73(MGM_W63,si_delay);
   and MGM_G74(ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si,MGM_W63,MGM_W62);
   and MGM_G75(ENABLE_ssb_AND_rb,rb_delay,ssb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(o7==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d1))  = (0.0,0.0);
      
      if(o7==1'b1 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so +: 1'b1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d1==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o1
      (negedge rb => (o1 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b0 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(d2==1'b1 && o1==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b0 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b0)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d2==1'b1 && ssb==1'b1)
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o2
      (negedge rb => (o2 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b0 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(d3==1'b1 && o2==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b0 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b0)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d3==1'b1 && ssb==1'b1)
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o3
      (negedge rb => (o3 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b0 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(d4==1'b1 && o3==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b0 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b0)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d4==1'b1 && ssb==1'b1)
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o4
      (negedge rb => (o4 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b0 && o4==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(d5==1'b1 && o4==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o5
      (posedge clk => (o5 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b0 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b0 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b1 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d5==1'b1 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b0 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b0 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b1 && ssb==1'b0)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d5==1'b1 && ssb==1'b1)
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o5
      (negedge rb => (o5 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b0 && o5==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(d6==1'b1 && o5==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o6
      (posedge clk => (o6 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b0 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b0 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b1 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d6==1'b1 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b0 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b0 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b1 && ssb==1'b0)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d6==1'b1 && ssb==1'b1)
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o6
      (negedge rb => (o6 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b0 && o6==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(d7==1'b1 && o6==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o7
      (posedge clk => (o7 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b0 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b0 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b1 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d7==1'b1 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b0 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b0 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b1 && ssb==1'b0)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d7==1'b1 && ssb==1'b1)
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o7
      (negedge rb => (o7 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b0 && o7==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b0 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && rb==1'b1 && ssb==1'b0)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(d8==1'b1 && o7==1'b1 && rb==1'b1 && ssb==1'b1)
      // seq arc clk --> o8
      (posedge clk => (o8 +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b0 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b0 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b1 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d8==1'b1 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b0 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b0 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b1 && ssb==1'b0)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d8==1'b1 && ssb==1'b1)
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o8
      (negedge rb => (o8 +: 1'b0))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_rb == 1'b1)
      ,0.0,0,notifier);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_si_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb,0.0,0,notifier);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      negedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      posedge si &&& (ENABLE_NOT_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,si_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4_AND_NOT_d5_AND_NOT_d6_AND_NOT_d7_AND_NOT_d8_AND_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      negedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      posedge ssb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4_AND_d5_AND_d6_AND_d7_AND_d8_AND_NOT_si == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d1 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d2 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d3 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d4 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d5 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d5- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d5 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier4,,,clk_delay,d5_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d6 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d6- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d6 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier5,,,clk_delay,d6_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d7 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d7- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d7 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier6,,,clk_delay,d7_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      negedge d8 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      // setuphold d8- clk-LH
      $setuphold(posedge clk &&& (ENABLE_ssb_AND_rb == 1'b1),
      posedge d8 &&& (ENABLE_ssb_AND_rb == 1'b1),
      0.0,0.0,notifier7,,,clk_delay,d8_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan003ad1d01x1( clk, d, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch with active low reset o = if not(rb) then val0 else if clk then (d)
// 
// 
// always @ (clk or d or rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan003ad_delay o =  IQ;
// 

   input clk, d, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `lan003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G9(MGM_W4,d_delay);
   and MGM_G10(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W4);
   and MGM_G11(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G12(ENABLE_rb,rb_delay);
   not MGM_G13(MGM_W5,clk_delay);
   not MGM_G14(MGM_W6,d_delay);
   and MGM_G15(ENABLE_NOT_clk_AND_NOT_d,MGM_W6,MGM_W5);
   not MGM_G16(MGM_W7,clk_delay);
   and MGM_G17(ENABLE_NOT_clk_AND_d,d_delay,MGM_W7);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb == 1'b1),
      negedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb == 1'b1),
      posedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan003ad1d02x1( clk, d, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch with active low reset o = if not(rb) then val0 else if clk then (d)
// 
// 
// always @ (clk or d or rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan003ad_delay o =  IQ;
// 

   input clk, d, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d02x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan003ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d02x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `lan003ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d02x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan003ad_func i0slan003ad1d02x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G9(MGM_W4,d_delay);
   and MGM_G10(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W4);
   and MGM_G11(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G12(ENABLE_rb,rb_delay);
   not MGM_G13(MGM_W5,clk_delay);
   not MGM_G14(MGM_W6,d_delay);
   and MGM_G15(ENABLE_NOT_clk_AND_NOT_d,MGM_W6,MGM_W5);
   not MGM_G16(MGM_W7,clk_delay);
   and MGM_G17(ENABLE_NOT_clk_AND_d,d_delay,MGM_W7);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb == 1'b1),
      negedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb == 1'b1),
      posedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_NOT_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan00bad1d01x1( clk, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch with active high set o = {if not(rb) then val0 else (if (s) then val1 else (if clk then (d)))}
// 
// 
// always @ (clk or d or rb or s)
// begin
// if ((!rb) && (s))
// begin
// IQ <= 1'b0 ;
// end
// else if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan00bad_delay o =  IQ;
// 

   input clk, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan00bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `lan00bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && s==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && s==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      negedge clk &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-negedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      negedge clk &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-negedge
      $recrem(negedge s,negedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan00bad1d02x1( clk, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch with active high set o = {if not(rb) then val0 else (if (s) then val1 else (if clk then (d)))}
// 
// 
// always @ (clk or d or rb or s)
// begin
// if ((!rb) && (s))
// begin
// IQ <= 1'b0 ;
// end
// else if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan00bad_delay o =  IQ;
// 

   input clk, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d02x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan00bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d02x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `lan00bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d02x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan00bad_func i0slan00bad1d02x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && s==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && s==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      negedge clk &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-negedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      negedge clk &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-negedge
      $recrem(negedge s,negedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan083ad1d01x1( clkb, d, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Negative level sensitive latch with active low reset o = {if not(rb) then val0 else if not(clkb) then (d)}
// 
// 
// always @ (clkb or d or rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (!clkb)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan083ad_delay o =  IQ;
// 

   input clkb, d, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan083ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `lan083ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G7(MGM_W2,d_delay);
   and MGM_G8(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W2);
   and MGM_G9(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G10(ENABLE_rb,rb_delay);
   not MGM_G11(MGM_W3,d_delay);
   and MGM_G12(ENABLE_clkb_AND_NOT_d,MGM_W3,clkb_delay);
   and MGM_G13(ENABLE_clkb_AND_d,d_delay,clkb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1 && rb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb == 1'b1),
      negedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb == 1'b1),
      posedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      
      // setuphold d- clkb-LH
      
      // recrem rb-clkb-posedge
      $recrem(posedge rb,posedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      $width(negedge rb &&& (ENABLE_clkb_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clkb_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan083ad1d02x1( clkb, d, o, rb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Negative level sensitive latch with active low reset o = {if not(rb) then val0 else if not(clkb) then (d)}
// 
// 
// always @ (clkb or d or rb)
// begin
// if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (!clkb)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan083ad_delay o =  IQ;
// 

   input clkb, d, rb;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d02x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan083ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d02x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.notifier(1'b0));
      assign `lan083ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d02x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan083ad_func i0slan083ad1d02x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G7(MGM_W2,d_delay);
   and MGM_G8(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W2);
   and MGM_G9(ENABLE_d_AND_rb,rb_delay,d_delay);
   buf MGM_G10(ENABLE_rb,rb_delay);
   not MGM_G11(MGM_W3,d_delay);
   and MGM_G12(ENABLE_clkb_AND_NOT_d,MGM_W3,clkb_delay);
   and MGM_G13(ENABLE_clkb_AND_d,d_delay,clkb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1 && rb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb == 1'b1),
      negedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb == 1'b1),
      posedge d &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      
      // setuphold d- clkb-LH
      
      // recrem rb-clkb-posedge
      $recrem(posedge rb,posedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      $width(negedge rb &&& (ENABLE_clkb_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb &&& (ENABLE_clkb_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge rb,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan08bad1d01x1( clkb, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Negative level sensitive latch with active high set o = {if not(rb) then val0 else (if (s) then val1 else (if not(clkb) then (d)))}
// 
// 
// always @ (clkb or d or rb or s)
// begin
// if ((!rb) && (s))
// begin
// IQ <= 1'b0 ;
// end
// else if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (!clkb)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan08bad_delay o =  IQ;
// 

   input clkb, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan08bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `lan08bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1 && s==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1 && s==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      
      // setuphold d- clkb-LH
      
      // recrem rb-clkb-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      posedge clkb &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-posedge
      $recrem(posedge rb,posedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-posedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      posedge clkb &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-posedge
      $recrem(negedge s,posedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slan08bad1d02x1( clkb, d, o, rb, s `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Negative level sensitive latch with active high set o = {if not(rb) then val0 else (if (s) then val1 else (if not(clkb) then (d)))}
// 
// 
// always @ (clkb or d or rb or s)
// begin
// if ((!rb) && (s))
// begin
// IQ <= 1'b0 ;
// end
// else if (s)
// begin
// IQ <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ <= 1'b0 ;
// end
// else if (!clkb)
// begin
// IQ <= d;
// end
// end
// 
// assign `lan08bad_delay o =  IQ;
// 

   input clkb, d, rb, s;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d02x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lan08bad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d02x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.rb(rb),.s(s),.notifier(1'b0));
      assign `lan08bad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d02x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lan08bad_func i0slan08bad1d02x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G11(MGM_W6,d_delay);
   and MGM_G12(MGM_W7,rb_delay,MGM_W6);
   not MGM_G13(MGM_W8,s_delay);
   and MGM_G14(ENABLE_NOT_d_AND_rb_AND_NOT_s,MGM_W8,MGM_W7);
   and MGM_G15(MGM_W9,rb_delay,d_delay);
   not MGM_G16(MGM_W10,s_delay);
   and MGM_G17(ENABLE_d_AND_rb_AND_NOT_s,MGM_W10,MGM_W9);
   not MGM_G18(MGM_W11,s_delay);
   and MGM_G19(ENABLE_rb_AND_NOT_s,MGM_W11,rb_delay);
   not MGM_G20(ENABLE_NOT_s,s_delay);
   buf MGM_G21(ENABLE_rb,rb_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1 && s==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && rb==1'b1 && s==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && s==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      if(clkb==1'b0 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (negedge s => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clkb==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d_AND_rb_AND_NOT_s == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s == 1'b1),
      0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      
      // setuphold d- clkb-LH
      
      // recrem rb-clkb-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_s == 1'b1),
      posedge clkb &&& (ENABLE_NOT_s == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem rb-clkb-posedge
      $recrem(posedge rb,posedge clkb,0.0,0.0,notifier,,,rb_delay,clkb_delay);
      
      // recrem s-clkb-posedge
      $recrem(negedge s &&& (ENABLE_rb == 1'b1),
      posedge clkb &&& (ENABLE_rb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      // recrem s-clkb-posedge
      $recrem(negedge s,posedge clkb,0.0,0.0,notifier,,,s_delay,clkb_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn000ad1n01x1( clk, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch o = if clk then d
// 
// 
// always @ (clk or d)
// begin
// if (clk)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsn000ad_delay o =  IQ;
// 

   input clk, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `lsn000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn000ad1n02x1( clk, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch o = if clk then d
// 
// 
// always @ (clk or d)
// begin
// if (clk)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsn000ad_delay o =  IQ;
// 

   input clk, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n02x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n02x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `lsn000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n02x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn000ad_func i0slsn000ad1n02x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn080ad1n01x1( clkb, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Negative level sensitive latch o = if not (clkb) then d
// 
// 
// always @ (clkb or d)
// begin
// if (!clkb)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsn080ad_delay o =  IQ;
// 

   input clkb, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn080ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `lsn080ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb,negedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb,posedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn080ad1n02x1( clkb, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Negative level sensitive latch o = if not (clkb) then d
// 
// 
// always @ (clkb or d)
// begin
// if (!clkb)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsn080ad_delay o =  IQ;
// 

   input clkb, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n02x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn080ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n02x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `lsn080ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n02x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn080ad_func i0slsn080ad1n02x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb,negedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb,posedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn200ad1d01x1( clk, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive 2bit latch o1 {if clk then d1} o2 {if clk then d2}
// 
// 
// always @ (clk or d1)
// begin
// if (clk)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clk or d2)
// begin
// if (clk)
// begin
// IQ2 <= d2;
// end
// end
// 
// assign `lsn200ad_delay o1 =  IQ1;
// assign `lsn200ad_delay o2 =  IQ2;
// 

   input clk, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn200ad_delay o1_random_init = o1_tmp ;
      assign `lsn200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `lsn200ad_delay o1_random_init = o1_tmp ;
      assign `lsn200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      
      // setuphold d1- clk-HL
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      
      // setuphold d2- clk-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn200ad1d02x1( clk, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive 2bit latch o1 {if clk then d1} o2 {if clk then d2}
// 
// 
// always @ (clk or d1)
// begin
// if (clk)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clk or d2)
// begin
// if (clk)
// begin
// IQ2 <= d2;
// end
// end
// 
// assign `lsn200ad_delay o1 =  IQ1;
// assign `lsn200ad_delay o2 =  IQ2;
// 

   input clk, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d02x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn200ad_delay o1_random_init = o1_tmp ;
      assign `lsn200ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d02x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `lsn200ad_delay o1_random_init = o1_tmp ;
      assign `lsn200ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d02x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn200ad_func i0slsn200ad1d02x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      
      // setuphold d1- clk-HL
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      
      // setuphold d2- clk-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn280ad1d01x1( clkb, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// active-low non-inverting latch
// 
// 
// always @ (clkb or d1)
// begin
// if (!clkb)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clkb or d2)
// begin
// if (!clkb)
// begin
// IQ2 <= d2;
// end
// end
// 
// assign `lsn280ad_delay o1 =  IQ1;
// assign `lsn280ad_delay o2 =  IQ2;
// 

   input clkb, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn280ad_delay o1_random_init = o1_tmp ;
      assign `lsn280ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `lsn280ad_delay o1_random_init = o1_tmp ;
      assign `lsn280ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      
      // setuphold d1- clkb-LH
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      
      // setuphold d2- clkb-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn280ad1d02x1( clkb, d1, d2, o1, o2 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// active-low non-inverting latch
// 
// 
// always @ (clkb or d1)
// begin
// if (!clkb)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clkb or d2)
// begin
// if (!clkb)
// begin
// IQ2 <= d2;
// end
// end
// 
// assign `lsn280ad_delay o1 =  IQ1;
// assign `lsn280ad_delay o2 =  IQ2;
// 

   input clkb, d1, d2;
   output o1, o2;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d02x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn280ad_delay o1_random_init = o1_tmp ;
      assign `lsn280ad_delay o2_random_init = o2_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d02x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.o1(o1_tmp),.o2(o2_tmp),.notifier0(1'b0),.notifier1(1'b0));
      assign `lsn280ad_delay o1_random_init = o1_tmp ;
      assign `lsn280ad_delay o2_random_init = o2_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d02x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn280ad_func i0slsn280ad1d02x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.o1(o1_random_init),.o2(o2_random_init),.notifier0(notifier0),.notifier1(notifier1));
   `endif
   
   // spec_gates_begin
   not MGM_G12(MGM_W4,d1_delay);
   not MGM_G13(MGM_W5,d2_delay);
   and MGM_G14(ENABLE_NOT_d1_AND_NOT_d2,MGM_W5,MGM_W4);
   not MGM_G15(MGM_W6,d1_delay);
   and MGM_G16(ENABLE_NOT_d1_AND_d2,d2_delay,MGM_W6);
   not MGM_G17(MGM_W7,d2_delay);
   and MGM_G18(ENABLE_d1_AND_NOT_d2,MGM_W7,d1_delay);
   and MGM_G19(ENABLE_d1_AND_d2,d2_delay,d1_delay);
   not MGM_G20(ENABLE_NOT_d2,d2_delay);
   buf MGM_G21(ENABLE_d2,d2_delay);
   not MGM_G22(ENABLE_NOT_d1,d1_delay);
   buf MGM_G23(ENABLE_d1,d1_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d2 == 1'b1),
      negedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d2 == 1'b1),
      posedge d1 &&& (ENABLE_d2 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      
      // setuphold d1- clkb-LH
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1 == 1'b1),
      negedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1 == 1'b1),
      posedge d2 &&& (ENABLE_d1 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      
      // setuphold d2- clkb-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn400ad1d01x1( clk, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Quad positive level sensitive latch o1 = if clk then (d)
// 
// 
// always @ (clk or d1)
// begin
// if (clk)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clk or d2)
// begin
// if (clk)
// begin
// IQ2 <= d2;
// end
// end
// always @ (clk or d3)
// begin
// if (clk)
// begin
// IQ3 <= d3;
// end
// end
// always @ (clk or d4)
// begin
// if (clk)
// begin
// IQ4 <= d4;
// end
// end
// 
// assign `lsn400ad_delay o1 =  IQ1;
// assign `lsn400ad_delay o2 =  IQ2;
// assign `lsn400ad_delay o3 =  IQ3;
// assign `lsn400ad_delay o4 =  IQ4;
// 

   input clk, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn400ad_delay o1_random_init = o1_tmp ;
      assign `lsn400ad_delay o2_random_init = o2_tmp ;
      assign `lsn400ad_delay o3_random_init = o3_tmp ;
      assign `lsn400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `lsn400ad_delay o1_random_init = o1_tmp ;
      assign `lsn400ad_delay o2_random_init = o2_tmp ;
      assign `lsn400ad_delay o3_random_init = o3_tmp ;
      assign `lsn400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G92(MGM_W72,d1_delay);
   not MGM_G93(MGM_W73,d2_delay);
   and MGM_G94(MGM_W74,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W75,d3_delay);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   not MGM_G97(MGM_W77,d4_delay);
   and MGM_G98(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,d1_delay);
   not MGM_G100(MGM_W79,d2_delay);
   and MGM_G101(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G102(MGM_W81,d3_delay);
   and MGM_G103(MGM_W82,MGM_W81,MGM_W80);
   and MGM_G104(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W82);
   not MGM_G105(MGM_W83,d1_delay);
   not MGM_G106(MGM_W84,d2_delay);
   and MGM_G107(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W86,d3_delay,MGM_W85);
   not MGM_G109(MGM_W87,d4_delay);
   and MGM_G110(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W87,MGM_W86);
   not MGM_G111(MGM_W88,d1_delay);
   not MGM_G112(MGM_W89,d2_delay);
   and MGM_G113(MGM_W90,MGM_W89,MGM_W88);
   and MGM_G114(MGM_W91,d3_delay,MGM_W90);
   and MGM_G115(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W91);
   not MGM_G116(MGM_W92,d1_delay);
   and MGM_G117(MGM_W93,d2_delay,MGM_W92);
   not MGM_G118(MGM_W94,d3_delay);
   and MGM_G119(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G120(MGM_W96,d4_delay);
   and MGM_G121(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W96,MGM_W95);
   not MGM_G122(MGM_W97,d2_delay);
   and MGM_G123(MGM_W98,MGM_W97,d1_delay);
   not MGM_G124(MGM_W99,d3_delay);
   and MGM_G125(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G126(MGM_W101,d4_delay);
   and MGM_G127(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W101,MGM_W100);
   not MGM_G128(MGM_W102,d2_delay);
   and MGM_G129(MGM_W103,MGM_W102,d1_delay);
   and MGM_G130(MGM_W104,d3_delay,MGM_W103);
   not MGM_G131(MGM_W105,d4_delay);
   and MGM_G132(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W105,MGM_W104);
   not MGM_G133(MGM_W106,d2_delay);
   and MGM_G134(MGM_W107,MGM_W106,d1_delay);
   and MGM_G135(MGM_W108,d3_delay,MGM_W107);
   and MGM_G136(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W108);
   and MGM_G137(MGM_W109,d2_delay,d1_delay);
   and MGM_G138(MGM_W110,d3_delay,MGM_W109);
   and MGM_G139(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W110);
   not MGM_G140(MGM_W111,d2_delay);
   not MGM_G141(MGM_W112,d3_delay);
   and MGM_G142(MGM_W113,MGM_W112,MGM_W111);
   not MGM_G143(MGM_W114,d4_delay);
   and MGM_G144(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W114,MGM_W113);
   not MGM_G145(MGM_W115,d2_delay);
   and MGM_G146(MGM_W116,d3_delay,MGM_W115);
   not MGM_G147(MGM_W117,d4_delay);
   and MGM_G148(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W117,MGM_W116);
   not MGM_G149(MGM_W118,d2_delay);
   and MGM_G150(MGM_W119,d3_delay,MGM_W118);
   and MGM_G151(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W119);
   not MGM_G152(MGM_W120,d1_delay);
   not MGM_G153(MGM_W121,d3_delay);
   and MGM_G154(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G155(MGM_W123,d4_delay);
   and MGM_G156(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W123,MGM_W122);
   and MGM_G157(MGM_W124,d3_delay,d1_delay);
   and MGM_G158(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W124);
   not MGM_G159(MGM_W125,d1_delay);
   not MGM_G160(MGM_W126,d2_delay);
   and MGM_G161(MGM_W127,MGM_W126,MGM_W125);
   not MGM_G162(MGM_W128,d4_delay);
   and MGM_G163(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W128,MGM_W127);
   not MGM_G164(MGM_W129,d1_delay);
   not MGM_G165(MGM_W130,d2_delay);
   and MGM_G166(MGM_W131,MGM_W130,MGM_W129);
   and MGM_G167(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W131);
   not MGM_G168(MGM_W132,d2_delay);
   and MGM_G169(MGM_W133,MGM_W132,d1_delay);
   not MGM_G170(MGM_W134,d4_delay);
   and MGM_G171(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W134,MGM_W133);
   not MGM_G172(MGM_W135,d1_delay);
   not MGM_G173(MGM_W136,d2_delay);
   and MGM_G174(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G175(MGM_W138,d3_delay);
   and MGM_G176(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W138,MGM_W137);
   not MGM_G177(MGM_W139,d1_delay);
   not MGM_G178(MGM_W140,d2_delay);
   and MGM_G179(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G180(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W141);
   not MGM_G181(MGM_W142,d2_delay);
   and MGM_G182(MGM_W143,MGM_W142,d1_delay);
   and MGM_G183(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W143);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      
      // setuphold d1- clk-HL
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      
      // setuphold d2- clk-HL
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      
      // setuphold d3- clk-HL
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      
      // setuphold d4- clk-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn400ad1d02x1( clk, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Quad positive level sensitive latch o1 = if clk then (d)
// 
// 
// always @ (clk or d1)
// begin
// if (clk)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clk or d2)
// begin
// if (clk)
// begin
// IQ2 <= d2;
// end
// end
// always @ (clk or d3)
// begin
// if (clk)
// begin
// IQ3 <= d3;
// end
// end
// always @ (clk or d4)
// begin
// if (clk)
// begin
// IQ4 <= d4;
// end
// end
// 
// assign `lsn400ad_delay o1 =  IQ1;
// assign `lsn400ad_delay o2 =  IQ2;
// assign `lsn400ad_delay o3 =  IQ3;
// assign `lsn400ad_delay o4 =  IQ4;
// 

   input clk, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d02x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn400ad_delay o1_random_init = o1_tmp ;
      assign `lsn400ad_delay o2_random_init = o2_tmp ;
      assign `lsn400ad_delay o3_random_init = o3_tmp ;
      assign `lsn400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d02x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `lsn400ad_delay o1_random_init = o1_tmp ;
      assign `lsn400ad_delay o2_random_init = o2_tmp ;
      assign `lsn400ad_delay o3_random_init = o3_tmp ;
      assign `lsn400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d02x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn400ad_func i0slsn400ad1d02x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G92(MGM_W72,d1_delay);
   not MGM_G93(MGM_W73,d2_delay);
   and MGM_G94(MGM_W74,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W75,d3_delay);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   not MGM_G97(MGM_W77,d4_delay);
   and MGM_G98(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,d1_delay);
   not MGM_G100(MGM_W79,d2_delay);
   and MGM_G101(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G102(MGM_W81,d3_delay);
   and MGM_G103(MGM_W82,MGM_W81,MGM_W80);
   and MGM_G104(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W82);
   not MGM_G105(MGM_W83,d1_delay);
   not MGM_G106(MGM_W84,d2_delay);
   and MGM_G107(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W86,d3_delay,MGM_W85);
   not MGM_G109(MGM_W87,d4_delay);
   and MGM_G110(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W87,MGM_W86);
   not MGM_G111(MGM_W88,d1_delay);
   not MGM_G112(MGM_W89,d2_delay);
   and MGM_G113(MGM_W90,MGM_W89,MGM_W88);
   and MGM_G114(MGM_W91,d3_delay,MGM_W90);
   and MGM_G115(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W91);
   not MGM_G116(MGM_W92,d1_delay);
   and MGM_G117(MGM_W93,d2_delay,MGM_W92);
   not MGM_G118(MGM_W94,d3_delay);
   and MGM_G119(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G120(MGM_W96,d4_delay);
   and MGM_G121(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W96,MGM_W95);
   not MGM_G122(MGM_W97,d2_delay);
   and MGM_G123(MGM_W98,MGM_W97,d1_delay);
   not MGM_G124(MGM_W99,d3_delay);
   and MGM_G125(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G126(MGM_W101,d4_delay);
   and MGM_G127(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W101,MGM_W100);
   not MGM_G128(MGM_W102,d2_delay);
   and MGM_G129(MGM_W103,MGM_W102,d1_delay);
   and MGM_G130(MGM_W104,d3_delay,MGM_W103);
   not MGM_G131(MGM_W105,d4_delay);
   and MGM_G132(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W105,MGM_W104);
   not MGM_G133(MGM_W106,d2_delay);
   and MGM_G134(MGM_W107,MGM_W106,d1_delay);
   and MGM_G135(MGM_W108,d3_delay,MGM_W107);
   and MGM_G136(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W108);
   and MGM_G137(MGM_W109,d2_delay,d1_delay);
   and MGM_G138(MGM_W110,d3_delay,MGM_W109);
   and MGM_G139(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W110);
   not MGM_G140(MGM_W111,d2_delay);
   not MGM_G141(MGM_W112,d3_delay);
   and MGM_G142(MGM_W113,MGM_W112,MGM_W111);
   not MGM_G143(MGM_W114,d4_delay);
   and MGM_G144(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W114,MGM_W113);
   not MGM_G145(MGM_W115,d2_delay);
   and MGM_G146(MGM_W116,d3_delay,MGM_W115);
   not MGM_G147(MGM_W117,d4_delay);
   and MGM_G148(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W117,MGM_W116);
   not MGM_G149(MGM_W118,d2_delay);
   and MGM_G150(MGM_W119,d3_delay,MGM_W118);
   and MGM_G151(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W119);
   not MGM_G152(MGM_W120,d1_delay);
   not MGM_G153(MGM_W121,d3_delay);
   and MGM_G154(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G155(MGM_W123,d4_delay);
   and MGM_G156(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W123,MGM_W122);
   and MGM_G157(MGM_W124,d3_delay,d1_delay);
   and MGM_G158(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W124);
   not MGM_G159(MGM_W125,d1_delay);
   not MGM_G160(MGM_W126,d2_delay);
   and MGM_G161(MGM_W127,MGM_W126,MGM_W125);
   not MGM_G162(MGM_W128,d4_delay);
   and MGM_G163(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W128,MGM_W127);
   not MGM_G164(MGM_W129,d1_delay);
   not MGM_G165(MGM_W130,d2_delay);
   and MGM_G166(MGM_W131,MGM_W130,MGM_W129);
   and MGM_G167(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W131);
   not MGM_G168(MGM_W132,d2_delay);
   and MGM_G169(MGM_W133,MGM_W132,d1_delay);
   not MGM_G170(MGM_W134,d4_delay);
   and MGM_G171(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W134,MGM_W133);
   not MGM_G172(MGM_W135,d1_delay);
   not MGM_G173(MGM_W136,d2_delay);
   and MGM_G174(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G175(MGM_W138,d3_delay);
   and MGM_G176(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W138,MGM_W137);
   not MGM_G177(MGM_W139,d1_delay);
   not MGM_G178(MGM_W140,d2_delay);
   and MGM_G179(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G180(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W141);
   not MGM_G181(MGM_W142,d2_delay);
   and MGM_G182(MGM_W143,MGM_W142,d1_delay);
   and MGM_G183(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W143);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      
      // setuphold d1- clk-HL
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      
      // setuphold d2- clk-HL
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      
      // setuphold d3- clk-HL
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      
      // setuphold d4- clk-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn480ad1d01x1( clkb, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// quad latch
// 
// 
// always @ (clkb or d1)
// begin
// if (!clkb)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clkb or d2)
// begin
// if (!clkb)
// begin
// IQ2 <= d2;
// end
// end
// always @ (clkb or d3)
// begin
// if (!clkb)
// begin
// IQ3 <= d3;
// end
// end
// always @ (clkb or d4)
// begin
// if (!clkb)
// begin
// IQ4 <= d4;
// end
// end
// 
// assign `lsn480ad_delay o1 =  IQ1;
// assign `lsn480ad_delay o2 =  IQ2;
// assign `lsn480ad_delay o3 =  IQ3;
// assign `lsn480ad_delay o4 =  IQ4;
// 

   input clkb, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn480ad_delay o1_random_init = o1_tmp ;
      assign `lsn480ad_delay o2_random_init = o2_tmp ;
      assign `lsn480ad_delay o3_random_init = o3_tmp ;
      assign `lsn480ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d01x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `lsn480ad_delay o1_random_init = o1_tmp ;
      assign `lsn480ad_delay o2_random_init = o2_tmp ;
      assign `lsn480ad_delay o3_random_init = o3_tmp ;
      assign `lsn480ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d01x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G92(MGM_W72,d1_delay);
   not MGM_G93(MGM_W73,d2_delay);
   and MGM_G94(MGM_W74,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W75,d3_delay);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   not MGM_G97(MGM_W77,d4_delay);
   and MGM_G98(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,d1_delay);
   not MGM_G100(MGM_W79,d2_delay);
   and MGM_G101(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G102(MGM_W81,d3_delay);
   and MGM_G103(MGM_W82,MGM_W81,MGM_W80);
   and MGM_G104(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W82);
   not MGM_G105(MGM_W83,d1_delay);
   not MGM_G106(MGM_W84,d2_delay);
   and MGM_G107(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W86,d3_delay,MGM_W85);
   not MGM_G109(MGM_W87,d4_delay);
   and MGM_G110(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W87,MGM_W86);
   not MGM_G111(MGM_W88,d1_delay);
   not MGM_G112(MGM_W89,d2_delay);
   and MGM_G113(MGM_W90,MGM_W89,MGM_W88);
   and MGM_G114(MGM_W91,d3_delay,MGM_W90);
   and MGM_G115(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W91);
   not MGM_G116(MGM_W92,d1_delay);
   and MGM_G117(MGM_W93,d2_delay,MGM_W92);
   not MGM_G118(MGM_W94,d3_delay);
   and MGM_G119(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G120(MGM_W96,d4_delay);
   and MGM_G121(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W96,MGM_W95);
   not MGM_G122(MGM_W97,d2_delay);
   and MGM_G123(MGM_W98,MGM_W97,d1_delay);
   not MGM_G124(MGM_W99,d3_delay);
   and MGM_G125(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G126(MGM_W101,d4_delay);
   and MGM_G127(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W101,MGM_W100);
   not MGM_G128(MGM_W102,d2_delay);
   and MGM_G129(MGM_W103,MGM_W102,d1_delay);
   and MGM_G130(MGM_W104,d3_delay,MGM_W103);
   not MGM_G131(MGM_W105,d4_delay);
   and MGM_G132(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W105,MGM_W104);
   not MGM_G133(MGM_W106,d2_delay);
   and MGM_G134(MGM_W107,MGM_W106,d1_delay);
   and MGM_G135(MGM_W108,d3_delay,MGM_W107);
   and MGM_G136(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W108);
   and MGM_G137(MGM_W109,d2_delay,d1_delay);
   and MGM_G138(MGM_W110,d3_delay,MGM_W109);
   and MGM_G139(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W110);
   not MGM_G140(MGM_W111,d2_delay);
   not MGM_G141(MGM_W112,d3_delay);
   and MGM_G142(MGM_W113,MGM_W112,MGM_W111);
   not MGM_G143(MGM_W114,d4_delay);
   and MGM_G144(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W114,MGM_W113);
   not MGM_G145(MGM_W115,d2_delay);
   and MGM_G146(MGM_W116,d3_delay,MGM_W115);
   not MGM_G147(MGM_W117,d4_delay);
   and MGM_G148(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W117,MGM_W116);
   not MGM_G149(MGM_W118,d2_delay);
   and MGM_G150(MGM_W119,d3_delay,MGM_W118);
   and MGM_G151(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W119);
   not MGM_G152(MGM_W120,d1_delay);
   not MGM_G153(MGM_W121,d3_delay);
   and MGM_G154(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G155(MGM_W123,d4_delay);
   and MGM_G156(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W123,MGM_W122);
   and MGM_G157(MGM_W124,d3_delay,d1_delay);
   and MGM_G158(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W124);
   not MGM_G159(MGM_W125,d1_delay);
   not MGM_G160(MGM_W126,d2_delay);
   and MGM_G161(MGM_W127,MGM_W126,MGM_W125);
   not MGM_G162(MGM_W128,d4_delay);
   and MGM_G163(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W128,MGM_W127);
   not MGM_G164(MGM_W129,d1_delay);
   not MGM_G165(MGM_W130,d2_delay);
   and MGM_G166(MGM_W131,MGM_W130,MGM_W129);
   and MGM_G167(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W131);
   not MGM_G168(MGM_W132,d2_delay);
   and MGM_G169(MGM_W133,MGM_W132,d1_delay);
   not MGM_G170(MGM_W134,d4_delay);
   and MGM_G171(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W134,MGM_W133);
   not MGM_G172(MGM_W135,d1_delay);
   not MGM_G173(MGM_W136,d2_delay);
   and MGM_G174(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G175(MGM_W138,d3_delay);
   and MGM_G176(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W138,MGM_W137);
   not MGM_G177(MGM_W139,d1_delay);
   not MGM_G178(MGM_W140,d2_delay);
   and MGM_G179(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G180(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W141);
   not MGM_G181(MGM_W142,d2_delay);
   and MGM_G182(MGM_W143,MGM_W142,d1_delay);
   and MGM_G183(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W143);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      
      // setuphold d1- clkb-LH
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      
      // setuphold d2- clkb-LH
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      
      // setuphold d3- clkb-LH
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      
      // setuphold d4- clkb-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsn480ad1d02x1( clkb, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// quad latch
// 
// 
// always @ (clkb or d1)
// begin
// if (!clkb)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clkb or d2)
// begin
// if (!clkb)
// begin
// IQ2 <= d2;
// end
// end
// always @ (clkb or d3)
// begin
// if (!clkb)
// begin
// IQ3 <= d3;
// end
// end
// always @ (clkb or d4)
// begin
// if (!clkb)
// begin
// IQ4 <= d4;
// end
// end
// 
// assign `lsn480ad_delay o1 =  IQ1;
// assign `lsn480ad_delay o2 =  IQ2;
// assign `lsn480ad_delay o3 =  IQ3;
// assign `lsn480ad_delay o4 =  IQ4;
// 

   input clkb, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d02x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `lsn480ad_delay o1_random_init = o1_tmp ;
      assign `lsn480ad_delay o2_random_init = o2_tmp ;
      assign `lsn480ad_delay o3_random_init = o3_tmp ;
      assign `lsn480ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d02x1_behav_inst(.clkb(clkb),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `lsn480ad_delay o1_random_init = o1_tmp ;
      assign `lsn480ad_delay o2_random_init = o2_tmp ;
      assign `lsn480ad_delay o3_random_init = o3_tmp ;
      assign `lsn480ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d02x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_lsn480ad_func i0slsn480ad1d02x1_inst(.clkb(clkb_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G92(MGM_W72,d1_delay);
   not MGM_G93(MGM_W73,d2_delay);
   and MGM_G94(MGM_W74,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W75,d3_delay);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   not MGM_G97(MGM_W77,d4_delay);
   and MGM_G98(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,d1_delay);
   not MGM_G100(MGM_W79,d2_delay);
   and MGM_G101(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G102(MGM_W81,d3_delay);
   and MGM_G103(MGM_W82,MGM_W81,MGM_W80);
   and MGM_G104(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W82);
   not MGM_G105(MGM_W83,d1_delay);
   not MGM_G106(MGM_W84,d2_delay);
   and MGM_G107(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W86,d3_delay,MGM_W85);
   not MGM_G109(MGM_W87,d4_delay);
   and MGM_G110(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W87,MGM_W86);
   not MGM_G111(MGM_W88,d1_delay);
   not MGM_G112(MGM_W89,d2_delay);
   and MGM_G113(MGM_W90,MGM_W89,MGM_W88);
   and MGM_G114(MGM_W91,d3_delay,MGM_W90);
   and MGM_G115(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W91);
   not MGM_G116(MGM_W92,d1_delay);
   and MGM_G117(MGM_W93,d2_delay,MGM_W92);
   not MGM_G118(MGM_W94,d3_delay);
   and MGM_G119(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G120(MGM_W96,d4_delay);
   and MGM_G121(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W96,MGM_W95);
   not MGM_G122(MGM_W97,d2_delay);
   and MGM_G123(MGM_W98,MGM_W97,d1_delay);
   not MGM_G124(MGM_W99,d3_delay);
   and MGM_G125(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G126(MGM_W101,d4_delay);
   and MGM_G127(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W101,MGM_W100);
   not MGM_G128(MGM_W102,d2_delay);
   and MGM_G129(MGM_W103,MGM_W102,d1_delay);
   and MGM_G130(MGM_W104,d3_delay,MGM_W103);
   not MGM_G131(MGM_W105,d4_delay);
   and MGM_G132(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W105,MGM_W104);
   not MGM_G133(MGM_W106,d2_delay);
   and MGM_G134(MGM_W107,MGM_W106,d1_delay);
   and MGM_G135(MGM_W108,d3_delay,MGM_W107);
   and MGM_G136(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W108);
   and MGM_G137(MGM_W109,d2_delay,d1_delay);
   and MGM_G138(MGM_W110,d3_delay,MGM_W109);
   and MGM_G139(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W110);
   not MGM_G140(MGM_W111,d2_delay);
   not MGM_G141(MGM_W112,d3_delay);
   and MGM_G142(MGM_W113,MGM_W112,MGM_W111);
   not MGM_G143(MGM_W114,d4_delay);
   and MGM_G144(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W114,MGM_W113);
   not MGM_G145(MGM_W115,d2_delay);
   and MGM_G146(MGM_W116,d3_delay,MGM_W115);
   not MGM_G147(MGM_W117,d4_delay);
   and MGM_G148(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W117,MGM_W116);
   not MGM_G149(MGM_W118,d2_delay);
   and MGM_G150(MGM_W119,d3_delay,MGM_W118);
   and MGM_G151(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W119);
   not MGM_G152(MGM_W120,d1_delay);
   not MGM_G153(MGM_W121,d3_delay);
   and MGM_G154(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G155(MGM_W123,d4_delay);
   and MGM_G156(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W123,MGM_W122);
   and MGM_G157(MGM_W124,d3_delay,d1_delay);
   and MGM_G158(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W124);
   not MGM_G159(MGM_W125,d1_delay);
   not MGM_G160(MGM_W126,d2_delay);
   and MGM_G161(MGM_W127,MGM_W126,MGM_W125);
   not MGM_G162(MGM_W128,d4_delay);
   and MGM_G163(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W128,MGM_W127);
   not MGM_G164(MGM_W129,d1_delay);
   not MGM_G165(MGM_W130,d2_delay);
   and MGM_G166(MGM_W131,MGM_W130,MGM_W129);
   and MGM_G167(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W131);
   not MGM_G168(MGM_W132,d2_delay);
   and MGM_G169(MGM_W133,MGM_W132,d1_delay);
   not MGM_G170(MGM_W134,d4_delay);
   and MGM_G171(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W134,MGM_W133);
   not MGM_G172(MGM_W135,d1_delay);
   not MGM_G173(MGM_W136,d2_delay);
   and MGM_G174(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G175(MGM_W138,d3_delay);
   and MGM_G176(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W138,MGM_W137);
   not MGM_G177(MGM_W139,d1_delay);
   not MGM_G178(MGM_W140,d2_delay);
   and MGM_G179(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G180(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W141);
   not MGM_G181(MGM_W142,d2_delay);
   and MGM_G182(MGM_W143,MGM_W142,d1_delay);
   and MGM_G183(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W143);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b1)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b0)
      // seq arc clkb --> o1
      (negedge clkb => (o1 : d1))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clkb --> o2
      (negedge clkb => (o2 : d2))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clkb --> o3
      (negedge clkb => (o3 : d3))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clkb --> o4
      (negedge clkb => (o4 : d4))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clkb_delay,d1_delay);
      
      // setuphold d1- clkb-LH
      
      // setuphold d1- clkb-LH
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clkb_delay,d2_delay);
      
      // setuphold d2- clkb-LH
      
      // setuphold d2- clkb-LH
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clkb_delay,d3_delay);
      
      // setuphold d3- clkb-LH
      
      // setuphold d3- clkb-LH
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      $setuphold(posedge clkb &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clkb_delay,d4_delay);
      
      // setuphold d4- clkb-LH
      
      // setuphold d4- clkb-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sltn000ad1n01x1( clk, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch o = if clk then d
// 
// 
// always @ (clk or d)
// begin
// if (clk)
// begin
// IQ <= d;
// end
// end
// 
// assign `ltn000ad_delay o =  IQ;
// 

   input clk, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn000ad_func i0sltn000ad1n01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `ltn000ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn000ad_func i0sltn000ad1n01x1_behav_inst(.clk(clk),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `ltn000ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn000ad_func i0sltn000ad1n01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn000ad_func i0sltn000ad1n01x1_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sltn080ad1n01x1( clkb, d, o `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Negative level sensitive latch o = if not (clkb) then d
// 
// 
// always @ (clkb or d)
// begin
// if (!clkb)
// begin
// IQ <= d;
// end
// end
// 
// assign `ltn080ad_delay o =  IQ;
// 

   input clkb, d;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn080ad_func i0sltn080ad1n01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `ltn080ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn080ad_func i0sltn080ad1n01x1_behav_inst(.clkb(clkb),.d(d),.o(o_tmp),.notifier(1'b0));
      assign `ltn080ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clkb_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn080ad_func i0sltn080ad1n01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn080ad_func i0sltn080ad1n01x1_inst(.clkb(clkb_delay),.d(d_delay),.o(o_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clkb --> o
      (negedge clkb => (o : d))  = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clkb==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      $width(negedge clkb &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clkb,0.0,0,notifier);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb,negedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      // setuphold d- clkb-LH
      $setuphold(posedge clkb,posedge d,0.0,0.0,notifier,,,clkb_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sltn400ad1q01x1( clk, d1, d2, d3, d4, o1, o2, o3, o4 `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Quad positive level sensitive latch o1 = {if (clk) then (d1)} o2 = {if (clk) then (d2)} o3 = {if (clk) then (d3)} o4 = {if (clk) then (d4)}
// 
// 
// always @ (clk or d1)
// begin
// if (clk)
// begin
// IQ1 <= d1;
// end
// end
// always @ (clk or d2)
// begin
// if (clk)
// begin
// IQ2 <= d2;
// end
// end
// always @ (clk or d3)
// begin
// if (clk)
// begin
// IQ3 <= d3;
// end
// end
// always @ (clk or d4)
// begin
// if (clk)
// begin
// IQ4 <= d4;
// end
// end
// 
// assign `ltn400ad_delay o1 =  IQ1;
// assign `ltn400ad_delay o2 =  IQ2;
// assign `ltn400ad_delay o3 =  IQ3;
// assign `ltn400ad_delay o4 =  IQ4;
// 

   input clk, d1, d2, d3, d4;
   output o1, o2, o3, o4;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o1_random_init;
      wire o2_random_init;
      wire o3_random_init;
      wire o4_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o1_random_init or o2_random_init or o3_random_init or o4_random_init)
         if((o1_random_init !== 1'bx) && (o2_random_init !== 1'bx) && (o3_random_init !== 1'bx) && (o4_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o1 = ((random_init_ctrl_gls === 1'b1) && (o1_random_init === 1'bx)) ? init_val : o1_random_init;
         assign o2 = ((random_init_ctrl_gls === 1'b1) && (o2_random_init === 1'bx)) ? init_val : o2_random_init;
         assign o3 = ((random_init_ctrl_gls === 1'b1) && (o3_random_init === 1'bx)) ? init_val : o3_random_init;
         assign o4 = ((random_init_ctrl_gls === 1'b1) && (o4_random_init === 1'bx)) ? init_val : o4_random_init;
      `else
         assign o1 = o1_random_init;
         assign o2 = o2_random_init;
         assign o3 = o3_random_init;
         assign o4 = o4_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn400ad_func i0sltn400ad1q01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0),.vcc(vcc),.vssx(vssx));
      assign `ltn400ad_delay o1_random_init = o1_tmp ;
      assign `ltn400ad_delay o2_random_init = o2_tmp ;
      assign `ltn400ad_delay o3_random_init = o3_tmp ;
      assign `ltn400ad_delay o4_random_init = o4_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn400ad_func i0sltn400ad1q01x1_behav_inst(.clk(clk),.d1(d1),.d2(d2),.d3(d3),.d4(d4),.o1(o1_tmp),.o2(o2_tmp),.o3(o3_tmp),.o4(o4_tmp),.notifier0(1'b0),.notifier1(1'b0),.notifier2(1'b0),.notifier3(1'b0));
      assign `ltn400ad_delay o1_random_init = o1_tmp ;
      assign `ltn400ad_delay o2_random_init = o2_tmp ;
      assign `ltn400ad_delay o3_random_init = o3_tmp ;
      assign `ltn400ad_delay o4_random_init = o4_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d1_delay ;
   wire d2_delay ;
   wire d3_delay ;
   wire d4_delay ;
   reg notifier;
   reg notifier0;
   reg notifier1;
   reg notifier2;
   reg notifier3;
   
   always@(notifier) begin
     notifier0 = (notifier0 !== notifier) ? notifier : ~notifier0;
     notifier1 = (notifier1 !== notifier) ? notifier : ~notifier1;
     notifier2 = (notifier2 !== notifier) ? notifier : ~notifier2;
     notifier3 = (notifier3 !== notifier) ? notifier : ~notifier3;
   end
   
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn400ad_func i0sltn400ad1q01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltn400ad_func i0sltn400ad1q01x1_inst(.clk(clk_delay),.d1(d1_delay),.d2(d2_delay),.d3(d3_delay),.d4(d4_delay),.o1(o1_random_init),.o2(o2_random_init),.o3(o3_random_init),.o4(o4_random_init),.notifier0(notifier0),.notifier1(notifier1),.notifier2(notifier2),.notifier3(notifier3));
   `endif
   
   // spec_gates_begin
   not MGM_G92(MGM_W72,d1_delay);
   not MGM_G93(MGM_W73,d2_delay);
   and MGM_G94(MGM_W74,MGM_W73,MGM_W72);
   not MGM_G95(MGM_W75,d3_delay);
   and MGM_G96(MGM_W76,MGM_W75,MGM_W74);
   not MGM_G97(MGM_W77,d4_delay);
   and MGM_G98(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W77,MGM_W76);
   not MGM_G99(MGM_W78,d1_delay);
   not MGM_G100(MGM_W79,d2_delay);
   and MGM_G101(MGM_W80,MGM_W79,MGM_W78);
   not MGM_G102(MGM_W81,d3_delay);
   and MGM_G103(MGM_W82,MGM_W81,MGM_W80);
   and MGM_G104(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4,d4_delay,MGM_W82);
   not MGM_G105(MGM_W83,d1_delay);
   not MGM_G106(MGM_W84,d2_delay);
   and MGM_G107(MGM_W85,MGM_W84,MGM_W83);
   and MGM_G108(MGM_W86,d3_delay,MGM_W85);
   not MGM_G109(MGM_W87,d4_delay);
   and MGM_G110(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W87,MGM_W86);
   not MGM_G111(MGM_W88,d1_delay);
   not MGM_G112(MGM_W89,d2_delay);
   and MGM_G113(MGM_W90,MGM_W89,MGM_W88);
   and MGM_G114(MGM_W91,d3_delay,MGM_W90);
   and MGM_G115(ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W91);
   not MGM_G116(MGM_W92,d1_delay);
   and MGM_G117(MGM_W93,d2_delay,MGM_W92);
   not MGM_G118(MGM_W94,d3_delay);
   and MGM_G119(MGM_W95,MGM_W94,MGM_W93);
   not MGM_G120(MGM_W96,d4_delay);
   and MGM_G121(ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4,MGM_W96,MGM_W95);
   not MGM_G122(MGM_W97,d2_delay);
   and MGM_G123(MGM_W98,MGM_W97,d1_delay);
   not MGM_G124(MGM_W99,d3_delay);
   and MGM_G125(MGM_W100,MGM_W99,MGM_W98);
   not MGM_G126(MGM_W101,d4_delay);
   and MGM_G127(ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W101,MGM_W100);
   not MGM_G128(MGM_W102,d2_delay);
   and MGM_G129(MGM_W103,MGM_W102,d1_delay);
   and MGM_G130(MGM_W104,d3_delay,MGM_W103);
   not MGM_G131(MGM_W105,d4_delay);
   and MGM_G132(ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4,MGM_W105,MGM_W104);
   not MGM_G133(MGM_W106,d2_delay);
   and MGM_G134(MGM_W107,MGM_W106,d1_delay);
   and MGM_G135(MGM_W108,d3_delay,MGM_W107);
   and MGM_G136(ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W108);
   and MGM_G137(MGM_W109,d2_delay,d1_delay);
   and MGM_G138(MGM_W110,d3_delay,MGM_W109);
   and MGM_G139(ENABLE_d1_AND_d2_AND_d3_AND_d4,d4_delay,MGM_W110);
   not MGM_G140(MGM_W111,d2_delay);
   not MGM_G141(MGM_W112,d3_delay);
   and MGM_G142(MGM_W113,MGM_W112,MGM_W111);
   not MGM_G143(MGM_W114,d4_delay);
   and MGM_G144(ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4,MGM_W114,MGM_W113);
   not MGM_G145(MGM_W115,d2_delay);
   and MGM_G146(MGM_W116,d3_delay,MGM_W115);
   not MGM_G147(MGM_W117,d4_delay);
   and MGM_G148(ENABLE_NOT_d2_AND_d3_AND_NOT_d4,MGM_W117,MGM_W116);
   not MGM_G149(MGM_W118,d2_delay);
   and MGM_G150(MGM_W119,d3_delay,MGM_W118);
   and MGM_G151(ENABLE_NOT_d2_AND_d3_AND_d4,d4_delay,MGM_W119);
   not MGM_G152(MGM_W120,d1_delay);
   not MGM_G153(MGM_W121,d3_delay);
   and MGM_G154(MGM_W122,MGM_W121,MGM_W120);
   not MGM_G155(MGM_W123,d4_delay);
   and MGM_G156(ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4,MGM_W123,MGM_W122);
   and MGM_G157(MGM_W124,d3_delay,d1_delay);
   and MGM_G158(ENABLE_d1_AND_d3_AND_d4,d4_delay,MGM_W124);
   not MGM_G159(MGM_W125,d1_delay);
   not MGM_G160(MGM_W126,d2_delay);
   and MGM_G161(MGM_W127,MGM_W126,MGM_W125);
   not MGM_G162(MGM_W128,d4_delay);
   and MGM_G163(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4,MGM_W128,MGM_W127);
   not MGM_G164(MGM_W129,d1_delay);
   not MGM_G165(MGM_W130,d2_delay);
   and MGM_G166(MGM_W131,MGM_W130,MGM_W129);
   and MGM_G167(ENABLE_NOT_d1_AND_NOT_d2_AND_d4,d4_delay,MGM_W131);
   not MGM_G168(MGM_W132,d2_delay);
   and MGM_G169(MGM_W133,MGM_W132,d1_delay);
   not MGM_G170(MGM_W134,d4_delay);
   and MGM_G171(ENABLE_d1_AND_NOT_d2_AND_NOT_d4,MGM_W134,MGM_W133);
   not MGM_G172(MGM_W135,d1_delay);
   not MGM_G173(MGM_W136,d2_delay);
   and MGM_G174(MGM_W137,MGM_W136,MGM_W135);
   not MGM_G175(MGM_W138,d3_delay);
   and MGM_G176(ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3,MGM_W138,MGM_W137);
   not MGM_G177(MGM_W139,d1_delay);
   not MGM_G178(MGM_W140,d2_delay);
   and MGM_G179(MGM_W141,MGM_W140,MGM_W139);
   and MGM_G180(ENABLE_NOT_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W141);
   not MGM_G181(MGM_W142,d2_delay);
   and MGM_G182(MGM_W143,MGM_W142,d1_delay);
   and MGM_G183(ENABLE_d1_AND_NOT_d2_AND_d3,d3_delay,MGM_W143);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d1==1'b0)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(d1==1'b1)
      // seq arc clk --> o1
      (posedge clk => (o1 : d1))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d1 --> o1
      (negedge d1 => (o1:d1)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d1 --> o1
      (posedge d1 => (o1:d1)) = (0.0,0.0);
      
      if(d2==1'b0)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(d2==1'b1)
      // seq arc clk --> o2
      (posedge clk => (o2 : d2))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d2 --> o2
      (negedge d2 => (o2:d2)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d2 --> o2
      (posedge d2 => (o2:d2)) = (0.0,0.0);
      
      if(d3==1'b0)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(d3==1'b1)
      // seq arc clk --> o3
      (posedge clk => (o3 : d3))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d3 --> o3
      (negedge d3 => (o3:d3)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d3 --> o3
      (posedge d3 => (o3:d3)) = (0.0,0.0);
      
      if(d4==1'b0)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(d4==1'b1)
      // seq arc clk --> o4
      (posedge clk => (o4 : d4))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d4 --> o4
      (negedge d4 => (o4:d4)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d4 --> o4
      (posedge d4 => (o4:d4)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d1_AND_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d1_AND_d2_AND_d3_AND_d4 == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      negedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      posedge d1 &&& (ENABLE_NOT_d2_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier0,,,clk_delay,d1_delay);
      
      // setuphold d1- clk-HL
      
      // setuphold d1- clk-HL
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      negedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      posedge d2 &&& (ENABLE_NOT_d1_AND_NOT_d3_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      negedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      posedge d2 &&& (ENABLE_d1_AND_d3_AND_d4 == 1'b1),
      0.0,0.0,notifier1,,,clk_delay,d2_delay);
      
      // setuphold d2- clk-HL
      
      // setuphold d2- clk-HL
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      negedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      posedge d3 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      negedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      posedge d3 &&& (ENABLE_d1_AND_NOT_d2_AND_NOT_d4 == 1'b1),
      0.0,0.0,notifier2,,,clk_delay,d3_delay);
      
      // setuphold d3- clk-HL
      
      // setuphold d3- clk-HL
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_NOT_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_NOT_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      negedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      $setuphold(negedge clk &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      posedge d4 &&& (ENABLE_d1_AND_NOT_d2_AND_d3 == 1'b1),
      0.0,0.0,notifier3,,,clk_delay,d4_delay);
      
      // setuphold d4- clk-HL
      
      // setuphold d4- clk-HL
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sltnf10ad1n01x1( clk, d, ob `ifdef POWER_AWARE_MODE , vcc, vssx `endif );

// 
// Positive level sensitive latch with additional inverting stage at output ob = if (clk) then (not(d))
// 
// 
// always @ (clk or d)
// begin
// if (clk)
// begin
// IQ <= !d;
// end
// end
// 
// assign `ltnf10ad_delay ob = IQ;
// 

   input clk, d;
   output ob;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire ob_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(ob_random_init)
         if((ob_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign ob = ((random_init_ctrl_gls === 1'b1) && (ob_random_init === 1'bx)) ? init_val : ob_random_init;
      `else
         assign ob = ob_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltnf10ad_func i0sltnf10ad1n01x1_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0),.vcc(vcc),.vssx(vssx));
      assign `ltnf10ad_delay ob_random_init = ob_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltnf10ad_func i0sltnf10ad1n01x1_behav_inst(.clk(clk),.d(d),.ob(ob_tmp),.notifier(1'b0));
      assign `ltnf10ad_delay ob_random_init = ob_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltnf10ad_func i0sltnf10ad1n01x1_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier),.vcc(vcc),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dsldrseq_ltnf10ad_func i0sltnf10ad1n01x1_inst(.clk(clk_delay),.d(d_delay),.ob(ob_random_init),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G2(ENABLE_NOT_d,d_delay);
   buf MGM_G3(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b1)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(d==1'b0)
      // seq arc clk --> ob
      (posedge clk => (ob : d))  = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc posedge d --> ob
      (posedge d => (ob:d)) = (0.0,0.0);
      
      if(clk==1'b1)
      // comb arc negedge d --> ob
      (negedge d => (ob:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> ob
      (posedge d => (ob:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> ob
      (negedge d => (ob:d)) = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,negedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk,posedge d,0.0,0.0,notifier,,,clk_delay,d_delay);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




