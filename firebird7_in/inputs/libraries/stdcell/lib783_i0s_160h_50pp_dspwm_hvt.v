// ##############################################################################
// ## Intel Top Secret                                                         ##
// ##############################################################################
// ## Copyright (C) Intel Corporation.                                         ##
// ##                                                                          ##
// ## This is the property of Intel Corporation and may only be utilized       ##
// ## pursuant to a written Restricted Use Nondisclosure Agreement and any     ##
// ## applicable licenses with Intel Corporation.  It may not be used,         ##
// ## reproduced, or disclosed to others except in accordance with the terms   ##
// ## and conditions of such agreement.                                        ##
// ##                                                                          ##
// ## All products, processes, computer systems, dates, and figures            ##
// ## specified are preliminary based on current expectations, and are         ##
// ## subject to change without notice.                                        ##
// ##############################################################################
// ## Text_Tag % __Placeholder neutral1


`ifdef INTCNOPWR
      //do nothing
`else
      `define POWER_AWARE_MODE
`endif

`ifdef functional
      `define FUNCTIONAL
`endif



`timescale 1ps/1ps


`ifdef FUNCTIONAL
  `define glsdelay 1
  `ifdef no_unit_delay
          `define cell_delay_value
          `define seq_delay_value
          `define clkcell_delay_value
          `define clkseq_delay_value
  `elsif seq_unit_delay
          `define cell_delay_value
          `define seq_delay_value #1
          `define clkcell_delay_value
          `define clkseq_delay_value #1
  `elsif parameterized_delay
          `define cell_delay_value #(glsdelay)
          `define seq_delay_value #(glsdelay)
          `define clkcell_delay_value #(glsdelay)
          `define clkseq_delay_value #(glsdelay)
  `else   
          `define cell_delay_value #1
          `define seq_delay_value #1
          `define clkcell_delay_value #1
          `define clkseq_delay_value #1
  `endif
  `ifdef clk_no_delay
          `define clkcell_delay_value
          `define clkseq_delay_value
  `endif
`endif

  
`ifdef FUNCTIONAL
     `ifndef funr00ad_delay
        `define funr00ad_delay `seq_delay_value
     `endif
     `ifndef fuzr00ad_delay
        `define fuzr00ad_delay `seq_delay_value
     `endif
     `ifndef fvnr03ad_delay
        `define fvnr03ad_delay `seq_delay_value
     `endif
     `ifndef fvzr03ad_delay
        `define fvzr03ad_delay `seq_delay_value
     `endif
     `ifndef fvzr0bad_delay
        `define fvzr0bad_delay `seq_delay_value
     `endif
     `ifndef fvzr43ad_delay
        `define fvzr43ad_delay `seq_delay_value
     `endif
     `ifndef lanr03ad_delay
        `define lanr03ad_delay `seq_delay_value
     `endif
     `ifndef lsnr00ad_delay
        `define lsnr00ad_delay `seq_delay_value
     `endif
  `endif



primitive INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0( MGM_EN0, clk `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_EN0;
  input clk;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //clk vcc, vssx: MGM_EN0
    0  1  0: 1;
    1  1  0: 0;
  `else
  //clk: MGM_EN0
    0: 1;
    1: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1( MGM_D0, d `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_D0;
  input d;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //d vcc, vssx: MGM_D0
    1  1  0: 1;
    0  1  0: 0;
  `else
  //d: MGM_D0
    1: 1;
    0: 0;
  `endif
  endtable

endprimitive
primitive INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D RE  PW GN N  :  Q  :  Q 
     0  0  0  ?  1  0  ?  :  ?  :  -;
     ?  0  1  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  1  0  ?  :  0  :  0;
     ?  0  0  ?  1  0  ?  :  0  :  0;
     1  0  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  1  1  1  0  ?  :  ?  :  1;
     0  ?  ?  1  1  0  ?  :  1  :  1;
     0  ?  0  ?  1  0  ?  :  1  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D RE  N  :  Q  :  Q 
     0  0  0  ?  ?  :  ?  :  -;
     ?  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  :  0  :  0;
     ?  0  0  ?  ?  :  0  :  0;
     1  0  ?  ?  ?  :  ?  :  0;
     0  ?  1  1  ?  :  ?  :  1;
     0  ?  ?  1  ?  :  1  :  1;
     0  ?  0  ?  ?  :  1  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive
primitive INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP( Q, C, P, CK, D, sleep `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, sleep, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D RE  PW GN N  :  Q  :  Q 
     0  0  0  ?  ?  1  0  ?  :  ?  :  -;
     ?  0  1  0  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  1  0  ?  :  0  :  0;
     ?  0  0  ?  ?  1  0  ?  :  0  :  0;
     1  0  ?  ?  0  1  0  ?  :  ?  :  0;
     1  ?  ?  ?  ?  1  0  ?  :  0  :  0;
     0  ?  1  1  0  1  0  ?  :  ?  :  1;
     0  ?  0  ?  ?  1  0  ?  :  1  :  1;
     0  ?  ?  1  ?  1  0  ?  :  1  :  1;
     0  1  ?  ?  0  1  0  ?  :  ?  :  1;
     0  1  ?  ?  ?  1  0  ?  :  1  :  1;
     ?  ?  ?  ?  1  1  0  ?  :  ?  :  -;
     ?  ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D RE  N  :  Q  :  Q 
     0  0  0  ?  ?  ?  :  ?  :  -;
     ?  0  1  0  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  ?  :  0  :  0;
     ?  0  0  ?  ?  ?  :  0  :  0;
     1  0  ?  ?  0  ?  :  ?  :  0;
     1  ?  ?  ?  ?  ?  :  0  :  0;
     0  ?  1  1  0  ?  :  ?  :  1;
     0  ?  0  ?  ?  ?  :  1  :  1;
     0  ?  ?  1  ?  ?  :  1  :  1;
     0  1  ?  ?  0  ?  :  ?  :  1;
     0  1  ?  ?  ?  ?  :  1  :  1;
     ?  ?  ?  ?  1  ?  :  ?  :  -;
     ?  ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive
primitive INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2( o, IQ2 `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
  output o;
  input IQ2;
  `ifdef POWER_AWARE_MODE
  input vcc, vcc_in, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //IQ2 vcc, vcc_in, vssx: o
    1  1  1  0: 1;
    0  1  1  0: 0;
  `else
  //IQ2: o
    1: 1;
    0: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func( clk, d, o, sleep, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, sleep, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst4( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_D1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst7( o, IQ2, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst4( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_D1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst7( o, IQ2 );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3( MGM_D0, d, si, ssb `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output MGM_D0;
  input d, si, ssb;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //d, si, ssb vcc, vssx: MGM_D0
    1  1  ?  1  0: 1;
    1  ?  1  1  0: 1;
    ?  1  0  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  1  1  0: 0;
    ?  0  0  1  0: 0;
  `else
  //d, si, ssb: MGM_D0
    1  1  ?: 1;
    1  ?  1: 1;
    ?  1  0: 1;
    0  0  ?: 0;
    0  ?  1: 0;
    ?  0  0: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func( clk, d, o, si, sleep, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, si, sleep, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst2( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst4( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_D1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst7( o, IQ2, vcc, vcc_in, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst8( so, IQ2, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst2( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst3( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst4( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_D1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst6( IQ2, 1'b0, 1'b0, MGM_EN1, MGM_D1, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst7( o, IQ2 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst8( so, IQ2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func( clk, d, o, rb, sleep, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, rb, sleep, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst3( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst6( MGM_C1, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_D1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_EN1, MGM_D1, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst9( o, IQ2, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst3( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst6( MGM_C1, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_D1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_EN1, MGM_D1, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst9( o, IQ2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func( clk, d, o, rb, si, sleep, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, rb, si, sleep, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst3( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst6( MGM_C1, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_D1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_EN1, MGM_D1, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst9( o, IQ2, vcc, vcc_in, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst10( so, IQ2, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst3( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst6( MGM_C1, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_D1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_EN1, MGM_D1, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst9( o, IQ2 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst10( so, IQ2 );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_N_L_IQ_LATCH_UDP( Q, C, P, CK, D `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D RE  PW GN N  :  Q  :  Q 
     0  0  0  ?  1  0  ?  :  ?  :  -;
     ?  0  1  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  1  0  ?  :  0  :  0;
     ?  0  0  ?  1  0  ?  :  0  :  0;
     1  ?  ?  ?  1  0  ?  :  ?  :  0;
     0  ?  1  1  1  0  ?  :  ?  :  1;
     0  ?  ?  1  1  0  ?  :  1  :  1;
     0  ?  0  ?  1  0  ?  :  1  :  1;
     0  1  ?  ?  1  0  ?  :  ?  :  1;
     ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D RE  N  :  Q  :  Q 
     0  0  0  ?  ?  :  ?  :  -;
     ?  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  :  0  :  0;
     ?  0  0  ?  ?  :  0  :  0;
     1  ?  ?  ?  ?  :  ?  :  0;
     0  ?  1  1  ?  :  ?  :  1;
     0  ?  ?  1  ?  :  1  :  1;
     0  ?  0  ?  ?  :  1  :  1;
     0  1  ?  ?  ?  :  ?  :  1;
     ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive
primitive INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_N_RETN_L_IQ_LATCH_UDP( Q, C, P, CK, D, sleep `ifdef POWER_AWARE_MODE , vcc, vssx `endif , N );
   output Q;
   reg Q;
   input C, P, CK, D, sleep, N; 
   `ifdef POWER_AWARE_MODE
   input vcc, vssx;
   `endif
   table 
  `ifdef POWER_AWARE_MODE
   //C  P  CK D RE  PW GN N  :  Q  :  Q 
     0  0  0  ?  ?  1  0  ?  :  ?  :  -;
     ?  0  1  0  0  1  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  1  0  ?  :  0  :  0;
     ?  0  0  ?  ?  1  0  ?  :  0  :  0;
     1  ?  ?  ?  0  1  0  ?  :  ?  :  0;
     1  ?  ?  ?  ?  1  0  ?  :  0  :  0;
     0  ?  1  1  0  1  0  ?  :  ?  :  1;
     0  ?  0  ?  ?  1  0  ?  :  1  :  1;
     0  ?  ?  1  ?  1  0  ?  :  1  :  1;
     0  1  ?  ?  0  1  0  ?  :  ?  :  1;
     0  1  ?  ?  ?  1  0  ?  :  1  :  1;
     ?  ?  ?  ?  1  1  0  ?  :  ?  :  -;
     ?  ?  ?  ?  ?  1  0  *  :  ?  :  x;
  `else
   //C  P  CK D RE  N  :  Q  :  Q 
     0  0  0  ?  ?  ?  :  ?  :  -;
     ?  0  1  0  0  ?  :  ?  :  0;
     ?  0  ?  0  ?  ?  :  0  :  0;
     ?  0  0  ?  ?  ?  :  0  :  0;
     1  ?  ?  ?  0  ?  :  ?  :  0;
     1  ?  ?  ?  ?  ?  :  0  :  0;
     0  ?  1  1  0  ?  :  ?  :  1;
     0  ?  0  ?  ?  ?  :  1  :  1;
     0  ?  ?  1  ?  ?  :  1  :  1;
     0  1  ?  ?  0  ?  :  ?  :  1;
     0  1  ?  ?  ?  ?  :  1  :  1;
     ?  ?  ?  ?  1  ?  :  ?  :  -;
     ?  ?  ?  ?  ?  *  :  ?  :  x;
  `endif

endtable
endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func( clk, d, o, rb, s, si, sleep, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, rb, s, si, sleep, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst2( MGM_P0, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst3( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst4( MGM_D0, d, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_N_L_IQ_LATCH_UDP inst5( IQ1, MGM_C0, MGM_P0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst6( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_P1, s, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst8( MGM_C1, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst9( MGM_D1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_N_RETN_L_IQ_LATCH_UDP inst10( IQ2, MGM_C1, MGM_P1, MGM_EN1, MGM_D1, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst11( o, IQ2, vcc, vcc_in, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst12( so, IQ2, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst2( MGM_P0, s );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst3( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst4( MGM_D0, d, si, ssb );
   INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_N_L_IQ_LATCH_UDP inst5( IQ1, MGM_C0, MGM_P0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst6( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_P1, s );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst8( MGM_C1, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst9( MGM_D1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_N_RETN_L_IQ_LATCH_UDP inst10( IQ2, MGM_C1, MGM_P1, MGM_EN1, MGM_D1, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst11( o, IQ2 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst12( so, IQ2 );
`endif

endmodule
`endcelldefine 




primitive INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_4( int1, IQ2, d, den `ifdef POWER_AWARE_MODE , vcc, vssx `endif );
  output int1;
  input IQ2, d, den;
  `ifdef POWER_AWARE_MODE
  input vcc, vssx;
  `endif

  table
  `ifdef POWER_AWARE_MODE
  //IQ2, d, den vcc, vssx: int1
    1  1  ?  1  0: 1;
    1  ?  0  1  0: 1;
    ?  1  1  1  0: 1;
    0  0  ?  1  0: 0;
    0  ?  0  1  0: 0;
    ?  0  1  1  0: 0;
  `else
  //IQ2, d, den: int1
    1  1  ?: 1;
    1  ?  0: 1;
    ?  1  1: 1;
    0  0  ?: 0;
    0  ?  0: 0;
    ?  0  1: 0;
  `endif
  endtable

endprimitive


`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func( clk, d, den, o, rb, si, sleep, so, ssb, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, den, rb, si, sleep, ssb, notifier;
   output o, so;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst3( MGM_D0, int2, vcc, vcc_in, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_EN0, MGM_D0, vcc, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_EN1, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst6( MGM_C1, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_D1, IQ1, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_EN1, MGM_D1, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_4 inst9( int1, IQ2, d, den, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst10( int2, int1, si, ssb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst11( o, IQ2, vcc, vcc_in, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst12( so, IQ2, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst3( MGM_D0, int2 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_IQ_LATCH_UDP inst4( IQ1, MGM_C0, 1'b0, MGM_EN0, MGM_D0, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst5( MGM_EN1, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst6( MGM_C1, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst7( MGM_D1, IQ1 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst8( IQ2, MGM_C1, 1'b0, MGM_EN1, MGM_D1, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_4 inst9( int1, IQ2, d, den );
   INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_3 inst10( int2, int1, si, ssb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst11( o, IQ2 );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst12( so, IQ2 );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func( clk, d, o, rb, sleep, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, rb, sleep, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst3( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst4( IQ, MGM_C0, 1'b0, MGM_EN0, MGM_D0, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst5( o, IQ, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_0 inst2( MGM_C0, rb );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst3( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst4( IQ, MGM_C0, 1'b0, MGM_EN0, MGM_D0, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst5( o, IQ );
`endif

endmodule
`endcelldefine 






`celldefine 


module INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func( clk, d, o, sleep, notifier `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );
   input clk, d, sleep, notifier;
   output o;
`ifdef POWER_AWARE_MODE
   inout  vcc;
   inout  vcc_in;
   inout  vssx;
`endif

`ifdef POWER_AWARE_MODE
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst1( MGM_EN0, clk, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst2( MGM_D0, d, vcc, vssx );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, sleep, vcc_in, vssx, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst4( o, IQ, vcc, vcc_in, vssx );
`else
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst1( MGM_EN0, clk );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_1 inst2( MGM_D0, d );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_N_RETN_IQ_LATCH_UDP inst3( IQ, 1'b0, 1'b0, MGM_EN0, MGM_D0, sleep, notifier );
   INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_2 inst4( o, IQ );
`endif

endmodule
`endcelldefine 




`celldefine 


module i0sfunr00ad1d02x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// posedge fully buffered retention FF
// 
// 
// always @ (clk or d)
// begin
// if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `funr00ad_delay o =  IQ2;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `funr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `funr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G1432(MGM_W1159,d_delay);
   not MGM_G1433(MGM_W1160,sleep);
   and MGM_G1434(ENABLE_NOT_d_AND_NOT_sleep,MGM_W1160,MGM_W1159);
   not MGM_G1435(MGM_W1161,d_delay);
   and MGM_G1436(ENABLE_NOT_d_AND_sleep,sleep,MGM_W1161);
   not MGM_G1437(MGM_W1162,sleep);
   and MGM_G1438(ENABLE_d_AND_NOT_sleep,MGM_W1162,d_delay);
   and MGM_G1439(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G1440(ENABLE_NOT_sleep,sleep);
   buf MGM_G1441(ENABLE_sleep,sleep);
   not MGM_G1442(ENABLE_NOT_d,d_delay);
   buf MGM_G1443(ENABLE_d,d_delay);
   not MGM_G1444(MGM_W1163,d_delay);
   and MGM_G1445(ENABLE_clk_AND_NOT_d,MGM_W1163,clk_delay);
   and MGM_G1446(ENABLE_clk_AND_d,d_delay,clk_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      negedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      posedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfunr00ad1d03x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// posedge fully buffered retention FF
// 
// 
// always @ (clk or d)
// begin
// if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `funr00ad_delay o =  IQ2;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `funr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `funr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G1432(MGM_W1159,d_delay);
   not MGM_G1433(MGM_W1160,sleep);
   and MGM_G1434(ENABLE_NOT_d_AND_NOT_sleep,MGM_W1160,MGM_W1159);
   not MGM_G1435(MGM_W1161,d_delay);
   and MGM_G1436(ENABLE_NOT_d_AND_sleep,sleep,MGM_W1161);
   not MGM_G1437(MGM_W1162,sleep);
   and MGM_G1438(ENABLE_d_AND_NOT_sleep,MGM_W1162,d_delay);
   and MGM_G1439(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G1440(ENABLE_NOT_sleep,sleep);
   buf MGM_G1441(ENABLE_sleep,sleep);
   not MGM_G1442(ENABLE_NOT_d,d_delay);
   buf MGM_G1443(ENABLE_d,d_delay);
   not MGM_G1444(MGM_W1163,d_delay);
   and MGM_G1445(ENABLE_clk_AND_NOT_d,MGM_W1163,clk_delay);
   and MGM_G1446(ENABLE_clk_AND_d,d_delay,clk_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      negedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      posedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfunr00ad1d06x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// posedge fully buffered retention FF
// 
// 
// always @ (clk or d)
// begin
// if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `funr00ad_delay o =  IQ2;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `funr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `funr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G1432(MGM_W1159,d_delay);
   not MGM_G1433(MGM_W1160,sleep);
   and MGM_G1434(ENABLE_NOT_d_AND_NOT_sleep,MGM_W1160,MGM_W1159);
   not MGM_G1435(MGM_W1161,d_delay);
   and MGM_G1436(ENABLE_NOT_d_AND_sleep,sleep,MGM_W1161);
   not MGM_G1437(MGM_W1162,sleep);
   and MGM_G1438(ENABLE_d_AND_NOT_sleep,MGM_W1162,d_delay);
   and MGM_G1439(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G1440(ENABLE_NOT_sleep,sleep);
   buf MGM_G1441(ENABLE_sleep,sleep);
   not MGM_G1442(ENABLE_NOT_d,d_delay);
   buf MGM_G1443(ENABLE_d,d_delay);
   not MGM_G1444(MGM_W1163,d_delay);
   and MGM_G1445(ENABLE_clk_AND_NOT_d,MGM_W1163,clk_delay);
   and MGM_G1446(ENABLE_clk_AND_d,d_delay,clk_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      negedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      posedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfunr00ad1d12x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// posedge fully buffered retention FF
// 
// 
// always @ (clk or d)
// begin
// if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `funr00ad_delay o =  IQ2;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `funr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `funr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_funr00ad_func i0sfunr00ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G1432(MGM_W1159,d_delay);
   not MGM_G1433(MGM_W1160,sleep);
   and MGM_G1434(ENABLE_NOT_d_AND_NOT_sleep,MGM_W1160,MGM_W1159);
   not MGM_G1435(MGM_W1161,d_delay);
   and MGM_G1436(ENABLE_NOT_d_AND_sleep,sleep,MGM_W1161);
   not MGM_G1437(MGM_W1162,sleep);
   and MGM_G1438(ENABLE_d_AND_NOT_sleep,MGM_W1162,d_delay);
   and MGM_G1439(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G1440(ENABLE_NOT_sleep,sleep);
   buf MGM_G1441(ENABLE_sleep,sleep);
   not MGM_G1442(ENABLE_NOT_d,d_delay);
   buf MGM_G1443(ENABLE_d,d_delay);
   not MGM_G1444(MGM_W1163,d_delay);
   and MGM_G1445(ENABLE_clk_AND_NOT_d,MGM_W1163,clk_delay);
   and MGM_G1446(ENABLE_clk_AND_d,d_delay,clk_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      negedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_sleep == 1'b1),
      posedge d &&& (ENABLE_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuzr00ad1d02x5( clk, d, o, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D non inverting retention FF
// 
// 
// always @ (clk or d or si or ssb)
// begin
// if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fuzr00ad_delay o =  IQ2;
// assign `fuzr00ad_delay so =  IQ2;
// 

   input clk, d, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G186(MGM_W142,d_delay);
   not MGM_G187(MGM_W143,si_delay);
   and MGM_G188(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G189(MGM_W145,sleep);
   and MGM_G190(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W147,ssb_delay);
   and MGM_G192(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W147,MGM_W146);
   not MGM_G193(MGM_W148,d_delay);
   not MGM_G194(MGM_W149,si_delay);
   and MGM_G195(MGM_W150,MGM_W149,MGM_W148);
   not MGM_G196(MGM_W151,sleep);
   and MGM_G197(MGM_W152,MGM_W151,MGM_W150);
   and MGM_G198(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W152);
   not MGM_G199(MGM_W153,d_delay);
   not MGM_G200(MGM_W154,si_delay);
   and MGM_G201(MGM_W155,MGM_W154,MGM_W153);
   and MGM_G202(MGM_W156,sleep,MGM_W155);
   not MGM_G203(MGM_W157,ssb_delay);
   and MGM_G204(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W157,MGM_W156);
   not MGM_G205(MGM_W158,d_delay);
   not MGM_G206(MGM_W159,si_delay);
   and MGM_G207(MGM_W160,MGM_W159,MGM_W158);
   and MGM_G208(MGM_W161,sleep,MGM_W160);
   and MGM_G209(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G210(MGM_W162,d_delay);
   and MGM_G211(MGM_W163,si_delay,MGM_W162);
   not MGM_G212(MGM_W164,sleep);
   and MGM_G213(MGM_W165,MGM_W164,MGM_W163);
   not MGM_G214(MGM_W166,ssb_delay);
   and MGM_G215(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G216(MGM_W167,d_delay);
   and MGM_G217(MGM_W168,si_delay,MGM_W167);
   not MGM_G218(MGM_W169,sleep);
   and MGM_G219(MGM_W170,MGM_W169,MGM_W168);
   and MGM_G220(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G221(MGM_W171,d_delay);
   and MGM_G222(MGM_W172,si_delay,MGM_W171);
   and MGM_G223(MGM_W173,sleep,MGM_W172);
   not MGM_G224(MGM_W174,ssb_delay);
   and MGM_G225(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W174,MGM_W173);
   not MGM_G226(MGM_W175,d_delay);
   and MGM_G227(MGM_W176,si_delay,MGM_W175);
   and MGM_G228(MGM_W177,sleep,MGM_W176);
   and MGM_G229(ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W177);
   not MGM_G230(MGM_W178,si_delay);
   and MGM_G231(MGM_W179,MGM_W178,d_delay);
   not MGM_G232(MGM_W180,sleep);
   and MGM_G233(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G234(MGM_W182,ssb_delay);
   and MGM_G235(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G236(MGM_W183,si_delay);
   and MGM_G237(MGM_W184,MGM_W183,d_delay);
   not MGM_G238(MGM_W185,sleep);
   and MGM_G239(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G240(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G241(MGM_W187,si_delay);
   and MGM_G242(MGM_W188,MGM_W187,d_delay);
   and MGM_G243(MGM_W189,sleep,MGM_W188);
   not MGM_G244(MGM_W190,ssb_delay);
   and MGM_G245(ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W190,MGM_W189);
   not MGM_G246(MGM_W191,si_delay);
   and MGM_G247(MGM_W192,MGM_W191,d_delay);
   and MGM_G248(MGM_W193,sleep,MGM_W192);
   and MGM_G249(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W193);
   and MGM_G250(MGM_W194,si_delay,d_delay);
   not MGM_G251(MGM_W195,sleep);
   and MGM_G252(MGM_W196,MGM_W195,MGM_W194);
   not MGM_G253(MGM_W197,ssb_delay);
   and MGM_G254(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W197,MGM_W196);
   and MGM_G255(MGM_W198,si_delay,d_delay);
   not MGM_G256(MGM_W199,sleep);
   and MGM_G257(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G258(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W200);
   and MGM_G259(MGM_W201,si_delay,d_delay);
   and MGM_G260(MGM_W202,sleep,MGM_W201);
   not MGM_G261(MGM_W203,ssb_delay);
   and MGM_G262(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W203,MGM_W202);
   and MGM_G263(MGM_W204,si_delay,d_delay);
   and MGM_G264(MGM_W205,sleep,MGM_W204);
   and MGM_G265(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W205);
   not MGM_G266(MGM_W206,si_delay);
   not MGM_G267(MGM_W207,sleep);
   and MGM_G268(MGM_W208,MGM_W207,MGM_W206);
   and MGM_G269(ENABLE_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W208);
   not MGM_G270(MGM_W209,si_delay);
   and MGM_G271(MGM_W210,sleep,MGM_W209);
   and MGM_G272(ENABLE_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W210);
   not MGM_G273(MGM_W211,sleep);
   and MGM_G274(MGM_W212,MGM_W211,si_delay);
   and MGM_G275(ENABLE_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   and MGM_G276(MGM_W213,sleep,si_delay);
   and MGM_G277(ENABLE_si_AND_sleep_AND_ssb,ssb_delay,MGM_W213);
   not MGM_G278(MGM_W214,d_delay);
   not MGM_G279(MGM_W215,sleep);
   and MGM_G280(MGM_W216,MGM_W215,MGM_W214);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G283(MGM_W218,d_delay);
   and MGM_G284(MGM_W219,sleep,MGM_W218);
   not MGM_G285(MGM_W220,ssb_delay);
   and MGM_G286(ENABLE_NOT_d_AND_sleep_AND_NOT_ssb,MGM_W220,MGM_W219);
   not MGM_G287(MGM_W221,sleep);
   and MGM_G288(MGM_W222,MGM_W221,d_delay);
   not MGM_G289(MGM_W223,ssb_delay);
   and MGM_G290(ENABLE_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W223,MGM_W222);
   and MGM_G291(MGM_W224,sleep,d_delay);
   not MGM_G292(MGM_W225,ssb_delay);
   and MGM_G293(ENABLE_d_AND_sleep_AND_NOT_ssb,MGM_W225,MGM_W224);
   not MGM_G294(MGM_W226,d_delay);
   not MGM_G295(MGM_W227,si_delay);
   and MGM_G296(MGM_W228,MGM_W227,MGM_W226);
   not MGM_G297(MGM_W229,ssb_delay);
   and MGM_G298(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W229,MGM_W228);
   not MGM_G299(MGM_W230,d_delay);
   not MGM_G300(MGM_W231,si_delay);
   and MGM_G301(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G302(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W232);
   not MGM_G303(MGM_W233,d_delay);
   and MGM_G304(MGM_W234,si_delay,MGM_W233);
   not MGM_G305(MGM_W235,ssb_delay);
   and MGM_G306(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W235,MGM_W234);
   not MGM_G307(MGM_W236,d_delay);
   and MGM_G308(MGM_W237,si_delay,MGM_W236);
   and MGM_G309(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W237);
   not MGM_G310(MGM_W238,si_delay);
   and MGM_G311(MGM_W239,MGM_W238,d_delay);
   not MGM_G312(MGM_W240,ssb_delay);
   and MGM_G313(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W240,MGM_W239);
   not MGM_G314(MGM_W241,si_delay);
   and MGM_G315(MGM_W242,MGM_W241,d_delay);
   and MGM_G316(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W242);
   and MGM_G317(MGM_W243,si_delay,d_delay);
   not MGM_G318(MGM_W244,ssb_delay);
   and MGM_G319(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W244,MGM_W243);
   and MGM_G320(MGM_W245,si_delay,d_delay);
   and MGM_G321(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W245);
   not MGM_G322(MGM_W246,d_delay);
   and MGM_G323(MGM_W247,MGM_W246,clk_delay);
   not MGM_G324(MGM_W248,si_delay);
   and MGM_G325(MGM_W249,MGM_W248,MGM_W247);
   not MGM_G326(MGM_W250,ssb_delay);
   and MGM_G327(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W250,MGM_W249);
   not MGM_G328(MGM_W251,d_delay);
   and MGM_G329(MGM_W252,MGM_W251,clk_delay);
   not MGM_G330(MGM_W253,si_delay);
   and MGM_G331(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G332(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W254);
   not MGM_G333(MGM_W255,d_delay);
   and MGM_G334(MGM_W256,MGM_W255,clk_delay);
   and MGM_G335(MGM_W257,si_delay,MGM_W256);
   not MGM_G336(MGM_W258,ssb_delay);
   and MGM_G337(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W258,MGM_W257);
   not MGM_G338(MGM_W259,d_delay);
   and MGM_G339(MGM_W260,MGM_W259,clk_delay);
   and MGM_G340(MGM_W261,si_delay,MGM_W260);
   and MGM_G341(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W261);
   and MGM_G342(MGM_W262,d_delay,clk_delay);
   not MGM_G343(MGM_W263,si_delay);
   and MGM_G344(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G345(MGM_W265,ssb_delay);
   and MGM_G346(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W265,MGM_W264);
   and MGM_G347(MGM_W266,d_delay,clk_delay);
   not MGM_G348(MGM_W267,si_delay);
   and MGM_G349(MGM_W268,MGM_W267,MGM_W266);
   and MGM_G350(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W268);
   and MGM_G351(MGM_W269,d_delay,clk_delay);
   and MGM_G352(MGM_W270,si_delay,MGM_W269);
   not MGM_G353(MGM_W271,ssb_delay);
   and MGM_G354(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W271,MGM_W270);
   and MGM_G355(MGM_W272,d_delay,clk_delay);
   and MGM_G356(MGM_W273,si_delay,MGM_W272);
   and MGM_G357(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W273);
   not MGM_G358(MGM_W274,d_delay);
   and MGM_G359(MGM_W275,si_delay,MGM_W274);
   not MGM_G360(MGM_W276,sleep);
   and MGM_G361(ENABLE_NOT_d_AND_si_AND_NOT_sleep,MGM_W276,MGM_W275);
   not MGM_G362(MGM_W277,d_delay);
   and MGM_G363(MGM_W278,si_delay,MGM_W277);
   and MGM_G364(ENABLE_NOT_d_AND_si_AND_sleep,sleep,MGM_W278);
   not MGM_G365(MGM_W279,si_delay);
   and MGM_G366(MGM_W280,MGM_W279,d_delay);
   not MGM_G367(MGM_W281,sleep);
   and MGM_G368(ENABLE_d_AND_NOT_si_AND_NOT_sleep,MGM_W281,MGM_W280);
   not MGM_G369(MGM_W282,si_delay);
   and MGM_G370(MGM_W283,MGM_W282,d_delay);
   and MGM_G371(ENABLE_d_AND_NOT_si_AND_sleep,sleep,MGM_W283);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuzr00ad1d03x5( clk, d, o, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D non inverting retention FF
// 
// 
// always @ (clk or d or si or ssb)
// begin
// if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fuzr00ad_delay o =  IQ2;
// assign `fuzr00ad_delay so =  IQ2;
// 

   input clk, d, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G186(MGM_W142,d_delay);
   not MGM_G187(MGM_W143,si_delay);
   and MGM_G188(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G189(MGM_W145,sleep);
   and MGM_G190(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W147,ssb_delay);
   and MGM_G192(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W147,MGM_W146);
   not MGM_G193(MGM_W148,d_delay);
   not MGM_G194(MGM_W149,si_delay);
   and MGM_G195(MGM_W150,MGM_W149,MGM_W148);
   not MGM_G196(MGM_W151,sleep);
   and MGM_G197(MGM_W152,MGM_W151,MGM_W150);
   and MGM_G198(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W152);
   not MGM_G199(MGM_W153,d_delay);
   not MGM_G200(MGM_W154,si_delay);
   and MGM_G201(MGM_W155,MGM_W154,MGM_W153);
   and MGM_G202(MGM_W156,sleep,MGM_W155);
   not MGM_G203(MGM_W157,ssb_delay);
   and MGM_G204(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W157,MGM_W156);
   not MGM_G205(MGM_W158,d_delay);
   not MGM_G206(MGM_W159,si_delay);
   and MGM_G207(MGM_W160,MGM_W159,MGM_W158);
   and MGM_G208(MGM_W161,sleep,MGM_W160);
   and MGM_G209(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G210(MGM_W162,d_delay);
   and MGM_G211(MGM_W163,si_delay,MGM_W162);
   not MGM_G212(MGM_W164,sleep);
   and MGM_G213(MGM_W165,MGM_W164,MGM_W163);
   not MGM_G214(MGM_W166,ssb_delay);
   and MGM_G215(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G216(MGM_W167,d_delay);
   and MGM_G217(MGM_W168,si_delay,MGM_W167);
   not MGM_G218(MGM_W169,sleep);
   and MGM_G219(MGM_W170,MGM_W169,MGM_W168);
   and MGM_G220(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G221(MGM_W171,d_delay);
   and MGM_G222(MGM_W172,si_delay,MGM_W171);
   and MGM_G223(MGM_W173,sleep,MGM_W172);
   not MGM_G224(MGM_W174,ssb_delay);
   and MGM_G225(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W174,MGM_W173);
   not MGM_G226(MGM_W175,d_delay);
   and MGM_G227(MGM_W176,si_delay,MGM_W175);
   and MGM_G228(MGM_W177,sleep,MGM_W176);
   and MGM_G229(ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W177);
   not MGM_G230(MGM_W178,si_delay);
   and MGM_G231(MGM_W179,MGM_W178,d_delay);
   not MGM_G232(MGM_W180,sleep);
   and MGM_G233(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G234(MGM_W182,ssb_delay);
   and MGM_G235(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G236(MGM_W183,si_delay);
   and MGM_G237(MGM_W184,MGM_W183,d_delay);
   not MGM_G238(MGM_W185,sleep);
   and MGM_G239(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G240(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G241(MGM_W187,si_delay);
   and MGM_G242(MGM_W188,MGM_W187,d_delay);
   and MGM_G243(MGM_W189,sleep,MGM_W188);
   not MGM_G244(MGM_W190,ssb_delay);
   and MGM_G245(ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W190,MGM_W189);
   not MGM_G246(MGM_W191,si_delay);
   and MGM_G247(MGM_W192,MGM_W191,d_delay);
   and MGM_G248(MGM_W193,sleep,MGM_W192);
   and MGM_G249(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W193);
   and MGM_G250(MGM_W194,si_delay,d_delay);
   not MGM_G251(MGM_W195,sleep);
   and MGM_G252(MGM_W196,MGM_W195,MGM_W194);
   not MGM_G253(MGM_W197,ssb_delay);
   and MGM_G254(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W197,MGM_W196);
   and MGM_G255(MGM_W198,si_delay,d_delay);
   not MGM_G256(MGM_W199,sleep);
   and MGM_G257(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G258(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W200);
   and MGM_G259(MGM_W201,si_delay,d_delay);
   and MGM_G260(MGM_W202,sleep,MGM_W201);
   not MGM_G261(MGM_W203,ssb_delay);
   and MGM_G262(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W203,MGM_W202);
   and MGM_G263(MGM_W204,si_delay,d_delay);
   and MGM_G264(MGM_W205,sleep,MGM_W204);
   and MGM_G265(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W205);
   not MGM_G266(MGM_W206,si_delay);
   not MGM_G267(MGM_W207,sleep);
   and MGM_G268(MGM_W208,MGM_W207,MGM_W206);
   and MGM_G269(ENABLE_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W208);
   not MGM_G270(MGM_W209,si_delay);
   and MGM_G271(MGM_W210,sleep,MGM_W209);
   and MGM_G272(ENABLE_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W210);
   not MGM_G273(MGM_W211,sleep);
   and MGM_G274(MGM_W212,MGM_W211,si_delay);
   and MGM_G275(ENABLE_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   and MGM_G276(MGM_W213,sleep,si_delay);
   and MGM_G277(ENABLE_si_AND_sleep_AND_ssb,ssb_delay,MGM_W213);
   not MGM_G278(MGM_W214,d_delay);
   not MGM_G279(MGM_W215,sleep);
   and MGM_G280(MGM_W216,MGM_W215,MGM_W214);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G283(MGM_W218,d_delay);
   and MGM_G284(MGM_W219,sleep,MGM_W218);
   not MGM_G285(MGM_W220,ssb_delay);
   and MGM_G286(ENABLE_NOT_d_AND_sleep_AND_NOT_ssb,MGM_W220,MGM_W219);
   not MGM_G287(MGM_W221,sleep);
   and MGM_G288(MGM_W222,MGM_W221,d_delay);
   not MGM_G289(MGM_W223,ssb_delay);
   and MGM_G290(ENABLE_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W223,MGM_W222);
   and MGM_G291(MGM_W224,sleep,d_delay);
   not MGM_G292(MGM_W225,ssb_delay);
   and MGM_G293(ENABLE_d_AND_sleep_AND_NOT_ssb,MGM_W225,MGM_W224);
   not MGM_G294(MGM_W226,d_delay);
   not MGM_G295(MGM_W227,si_delay);
   and MGM_G296(MGM_W228,MGM_W227,MGM_W226);
   not MGM_G297(MGM_W229,ssb_delay);
   and MGM_G298(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W229,MGM_W228);
   not MGM_G299(MGM_W230,d_delay);
   not MGM_G300(MGM_W231,si_delay);
   and MGM_G301(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G302(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W232);
   not MGM_G303(MGM_W233,d_delay);
   and MGM_G304(MGM_W234,si_delay,MGM_W233);
   not MGM_G305(MGM_W235,ssb_delay);
   and MGM_G306(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W235,MGM_W234);
   not MGM_G307(MGM_W236,d_delay);
   and MGM_G308(MGM_W237,si_delay,MGM_W236);
   and MGM_G309(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W237);
   not MGM_G310(MGM_W238,si_delay);
   and MGM_G311(MGM_W239,MGM_W238,d_delay);
   not MGM_G312(MGM_W240,ssb_delay);
   and MGM_G313(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W240,MGM_W239);
   not MGM_G314(MGM_W241,si_delay);
   and MGM_G315(MGM_W242,MGM_W241,d_delay);
   and MGM_G316(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W242);
   and MGM_G317(MGM_W243,si_delay,d_delay);
   not MGM_G318(MGM_W244,ssb_delay);
   and MGM_G319(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W244,MGM_W243);
   and MGM_G320(MGM_W245,si_delay,d_delay);
   and MGM_G321(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W245);
   not MGM_G322(MGM_W246,d_delay);
   and MGM_G323(MGM_W247,MGM_W246,clk_delay);
   not MGM_G324(MGM_W248,si_delay);
   and MGM_G325(MGM_W249,MGM_W248,MGM_W247);
   not MGM_G326(MGM_W250,ssb_delay);
   and MGM_G327(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W250,MGM_W249);
   not MGM_G328(MGM_W251,d_delay);
   and MGM_G329(MGM_W252,MGM_W251,clk_delay);
   not MGM_G330(MGM_W253,si_delay);
   and MGM_G331(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G332(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W254);
   not MGM_G333(MGM_W255,d_delay);
   and MGM_G334(MGM_W256,MGM_W255,clk_delay);
   and MGM_G335(MGM_W257,si_delay,MGM_W256);
   not MGM_G336(MGM_W258,ssb_delay);
   and MGM_G337(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W258,MGM_W257);
   not MGM_G338(MGM_W259,d_delay);
   and MGM_G339(MGM_W260,MGM_W259,clk_delay);
   and MGM_G340(MGM_W261,si_delay,MGM_W260);
   and MGM_G341(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W261);
   and MGM_G342(MGM_W262,d_delay,clk_delay);
   not MGM_G343(MGM_W263,si_delay);
   and MGM_G344(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G345(MGM_W265,ssb_delay);
   and MGM_G346(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W265,MGM_W264);
   and MGM_G347(MGM_W266,d_delay,clk_delay);
   not MGM_G348(MGM_W267,si_delay);
   and MGM_G349(MGM_W268,MGM_W267,MGM_W266);
   and MGM_G350(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W268);
   and MGM_G351(MGM_W269,d_delay,clk_delay);
   and MGM_G352(MGM_W270,si_delay,MGM_W269);
   not MGM_G353(MGM_W271,ssb_delay);
   and MGM_G354(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W271,MGM_W270);
   and MGM_G355(MGM_W272,d_delay,clk_delay);
   and MGM_G356(MGM_W273,si_delay,MGM_W272);
   and MGM_G357(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W273);
   not MGM_G358(MGM_W274,d_delay);
   and MGM_G359(MGM_W275,si_delay,MGM_W274);
   not MGM_G360(MGM_W276,sleep);
   and MGM_G361(ENABLE_NOT_d_AND_si_AND_NOT_sleep,MGM_W276,MGM_W275);
   not MGM_G362(MGM_W277,d_delay);
   and MGM_G363(MGM_W278,si_delay,MGM_W277);
   and MGM_G364(ENABLE_NOT_d_AND_si_AND_sleep,sleep,MGM_W278);
   not MGM_G365(MGM_W279,si_delay);
   and MGM_G366(MGM_W280,MGM_W279,d_delay);
   not MGM_G367(MGM_W281,sleep);
   and MGM_G368(ENABLE_d_AND_NOT_si_AND_NOT_sleep,MGM_W281,MGM_W280);
   not MGM_G369(MGM_W282,si_delay);
   and MGM_G370(MGM_W283,MGM_W282,d_delay);
   and MGM_G371(ENABLE_d_AND_NOT_si_AND_sleep,sleep,MGM_W283);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuzr00ad1d06x5( clk, d, o, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D non inverting retention FF
// 
// 
// always @ (clk or d or si or ssb)
// begin
// if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fuzr00ad_delay o =  IQ2;
// assign `fuzr00ad_delay so =  IQ2;
// 

   input clk, d, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G186(MGM_W142,d_delay);
   not MGM_G187(MGM_W143,si_delay);
   and MGM_G188(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G189(MGM_W145,sleep);
   and MGM_G190(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W147,ssb_delay);
   and MGM_G192(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W147,MGM_W146);
   not MGM_G193(MGM_W148,d_delay);
   not MGM_G194(MGM_W149,si_delay);
   and MGM_G195(MGM_W150,MGM_W149,MGM_W148);
   not MGM_G196(MGM_W151,sleep);
   and MGM_G197(MGM_W152,MGM_W151,MGM_W150);
   and MGM_G198(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W152);
   not MGM_G199(MGM_W153,d_delay);
   not MGM_G200(MGM_W154,si_delay);
   and MGM_G201(MGM_W155,MGM_W154,MGM_W153);
   and MGM_G202(MGM_W156,sleep,MGM_W155);
   not MGM_G203(MGM_W157,ssb_delay);
   and MGM_G204(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W157,MGM_W156);
   not MGM_G205(MGM_W158,d_delay);
   not MGM_G206(MGM_W159,si_delay);
   and MGM_G207(MGM_W160,MGM_W159,MGM_W158);
   and MGM_G208(MGM_W161,sleep,MGM_W160);
   and MGM_G209(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G210(MGM_W162,d_delay);
   and MGM_G211(MGM_W163,si_delay,MGM_W162);
   not MGM_G212(MGM_W164,sleep);
   and MGM_G213(MGM_W165,MGM_W164,MGM_W163);
   not MGM_G214(MGM_W166,ssb_delay);
   and MGM_G215(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G216(MGM_W167,d_delay);
   and MGM_G217(MGM_W168,si_delay,MGM_W167);
   not MGM_G218(MGM_W169,sleep);
   and MGM_G219(MGM_W170,MGM_W169,MGM_W168);
   and MGM_G220(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G221(MGM_W171,d_delay);
   and MGM_G222(MGM_W172,si_delay,MGM_W171);
   and MGM_G223(MGM_W173,sleep,MGM_W172);
   not MGM_G224(MGM_W174,ssb_delay);
   and MGM_G225(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W174,MGM_W173);
   not MGM_G226(MGM_W175,d_delay);
   and MGM_G227(MGM_W176,si_delay,MGM_W175);
   and MGM_G228(MGM_W177,sleep,MGM_W176);
   and MGM_G229(ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W177);
   not MGM_G230(MGM_W178,si_delay);
   and MGM_G231(MGM_W179,MGM_W178,d_delay);
   not MGM_G232(MGM_W180,sleep);
   and MGM_G233(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G234(MGM_W182,ssb_delay);
   and MGM_G235(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G236(MGM_W183,si_delay);
   and MGM_G237(MGM_W184,MGM_W183,d_delay);
   not MGM_G238(MGM_W185,sleep);
   and MGM_G239(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G240(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G241(MGM_W187,si_delay);
   and MGM_G242(MGM_W188,MGM_W187,d_delay);
   and MGM_G243(MGM_W189,sleep,MGM_W188);
   not MGM_G244(MGM_W190,ssb_delay);
   and MGM_G245(ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W190,MGM_W189);
   not MGM_G246(MGM_W191,si_delay);
   and MGM_G247(MGM_W192,MGM_W191,d_delay);
   and MGM_G248(MGM_W193,sleep,MGM_W192);
   and MGM_G249(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W193);
   and MGM_G250(MGM_W194,si_delay,d_delay);
   not MGM_G251(MGM_W195,sleep);
   and MGM_G252(MGM_W196,MGM_W195,MGM_W194);
   not MGM_G253(MGM_W197,ssb_delay);
   and MGM_G254(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W197,MGM_W196);
   and MGM_G255(MGM_W198,si_delay,d_delay);
   not MGM_G256(MGM_W199,sleep);
   and MGM_G257(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G258(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W200);
   and MGM_G259(MGM_W201,si_delay,d_delay);
   and MGM_G260(MGM_W202,sleep,MGM_W201);
   not MGM_G261(MGM_W203,ssb_delay);
   and MGM_G262(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W203,MGM_W202);
   and MGM_G263(MGM_W204,si_delay,d_delay);
   and MGM_G264(MGM_W205,sleep,MGM_W204);
   and MGM_G265(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W205);
   not MGM_G266(MGM_W206,si_delay);
   not MGM_G267(MGM_W207,sleep);
   and MGM_G268(MGM_W208,MGM_W207,MGM_W206);
   and MGM_G269(ENABLE_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W208);
   not MGM_G270(MGM_W209,si_delay);
   and MGM_G271(MGM_W210,sleep,MGM_W209);
   and MGM_G272(ENABLE_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W210);
   not MGM_G273(MGM_W211,sleep);
   and MGM_G274(MGM_W212,MGM_W211,si_delay);
   and MGM_G275(ENABLE_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   and MGM_G276(MGM_W213,sleep,si_delay);
   and MGM_G277(ENABLE_si_AND_sleep_AND_ssb,ssb_delay,MGM_W213);
   not MGM_G278(MGM_W214,d_delay);
   not MGM_G279(MGM_W215,sleep);
   and MGM_G280(MGM_W216,MGM_W215,MGM_W214);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G283(MGM_W218,d_delay);
   and MGM_G284(MGM_W219,sleep,MGM_W218);
   not MGM_G285(MGM_W220,ssb_delay);
   and MGM_G286(ENABLE_NOT_d_AND_sleep_AND_NOT_ssb,MGM_W220,MGM_W219);
   not MGM_G287(MGM_W221,sleep);
   and MGM_G288(MGM_W222,MGM_W221,d_delay);
   not MGM_G289(MGM_W223,ssb_delay);
   and MGM_G290(ENABLE_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W223,MGM_W222);
   and MGM_G291(MGM_W224,sleep,d_delay);
   not MGM_G292(MGM_W225,ssb_delay);
   and MGM_G293(ENABLE_d_AND_sleep_AND_NOT_ssb,MGM_W225,MGM_W224);
   not MGM_G294(MGM_W226,d_delay);
   not MGM_G295(MGM_W227,si_delay);
   and MGM_G296(MGM_W228,MGM_W227,MGM_W226);
   not MGM_G297(MGM_W229,ssb_delay);
   and MGM_G298(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W229,MGM_W228);
   not MGM_G299(MGM_W230,d_delay);
   not MGM_G300(MGM_W231,si_delay);
   and MGM_G301(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G302(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W232);
   not MGM_G303(MGM_W233,d_delay);
   and MGM_G304(MGM_W234,si_delay,MGM_W233);
   not MGM_G305(MGM_W235,ssb_delay);
   and MGM_G306(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W235,MGM_W234);
   not MGM_G307(MGM_W236,d_delay);
   and MGM_G308(MGM_W237,si_delay,MGM_W236);
   and MGM_G309(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W237);
   not MGM_G310(MGM_W238,si_delay);
   and MGM_G311(MGM_W239,MGM_W238,d_delay);
   not MGM_G312(MGM_W240,ssb_delay);
   and MGM_G313(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W240,MGM_W239);
   not MGM_G314(MGM_W241,si_delay);
   and MGM_G315(MGM_W242,MGM_W241,d_delay);
   and MGM_G316(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W242);
   and MGM_G317(MGM_W243,si_delay,d_delay);
   not MGM_G318(MGM_W244,ssb_delay);
   and MGM_G319(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W244,MGM_W243);
   and MGM_G320(MGM_W245,si_delay,d_delay);
   and MGM_G321(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W245);
   not MGM_G322(MGM_W246,d_delay);
   and MGM_G323(MGM_W247,MGM_W246,clk_delay);
   not MGM_G324(MGM_W248,si_delay);
   and MGM_G325(MGM_W249,MGM_W248,MGM_W247);
   not MGM_G326(MGM_W250,ssb_delay);
   and MGM_G327(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W250,MGM_W249);
   not MGM_G328(MGM_W251,d_delay);
   and MGM_G329(MGM_W252,MGM_W251,clk_delay);
   not MGM_G330(MGM_W253,si_delay);
   and MGM_G331(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G332(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W254);
   not MGM_G333(MGM_W255,d_delay);
   and MGM_G334(MGM_W256,MGM_W255,clk_delay);
   and MGM_G335(MGM_W257,si_delay,MGM_W256);
   not MGM_G336(MGM_W258,ssb_delay);
   and MGM_G337(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W258,MGM_W257);
   not MGM_G338(MGM_W259,d_delay);
   and MGM_G339(MGM_W260,MGM_W259,clk_delay);
   and MGM_G340(MGM_W261,si_delay,MGM_W260);
   and MGM_G341(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W261);
   and MGM_G342(MGM_W262,d_delay,clk_delay);
   not MGM_G343(MGM_W263,si_delay);
   and MGM_G344(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G345(MGM_W265,ssb_delay);
   and MGM_G346(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W265,MGM_W264);
   and MGM_G347(MGM_W266,d_delay,clk_delay);
   not MGM_G348(MGM_W267,si_delay);
   and MGM_G349(MGM_W268,MGM_W267,MGM_W266);
   and MGM_G350(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W268);
   and MGM_G351(MGM_W269,d_delay,clk_delay);
   and MGM_G352(MGM_W270,si_delay,MGM_W269);
   not MGM_G353(MGM_W271,ssb_delay);
   and MGM_G354(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W271,MGM_W270);
   and MGM_G355(MGM_W272,d_delay,clk_delay);
   and MGM_G356(MGM_W273,si_delay,MGM_W272);
   and MGM_G357(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W273);
   not MGM_G358(MGM_W274,d_delay);
   and MGM_G359(MGM_W275,si_delay,MGM_W274);
   not MGM_G360(MGM_W276,sleep);
   and MGM_G361(ENABLE_NOT_d_AND_si_AND_NOT_sleep,MGM_W276,MGM_W275);
   not MGM_G362(MGM_W277,d_delay);
   and MGM_G363(MGM_W278,si_delay,MGM_W277);
   and MGM_G364(ENABLE_NOT_d_AND_si_AND_sleep,sleep,MGM_W278);
   not MGM_G365(MGM_W279,si_delay);
   and MGM_G366(MGM_W280,MGM_W279,d_delay);
   not MGM_G367(MGM_W281,sleep);
   and MGM_G368(ENABLE_d_AND_NOT_si_AND_NOT_sleep,MGM_W281,MGM_W280);
   not MGM_G369(MGM_W282,si_delay);
   and MGM_G370(MGM_W283,MGM_W282,d_delay);
   and MGM_G371(ENABLE_d_AND_NOT_si_AND_sleep,sleep,MGM_W283);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfuzr00ad1d12x5( clk, d, o, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D non inverting retention FF
// 
// 
// always @ (clk or d or si or ssb)
// begin
// if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fuzr00ad_delay o =  IQ2;
// assign `fuzr00ad_delay so =  IQ2;
// 

   input clk, d, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fuzr00ad_delay o_random_init = o_tmp ;
      assign `fuzr00ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fuzr00ad_func i0sfuzr00ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G186(MGM_W142,d_delay);
   not MGM_G187(MGM_W143,si_delay);
   and MGM_G188(MGM_W144,MGM_W143,MGM_W142);
   not MGM_G189(MGM_W145,sleep);
   and MGM_G190(MGM_W146,MGM_W145,MGM_W144);
   not MGM_G191(MGM_W147,ssb_delay);
   and MGM_G192(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W147,MGM_W146);
   not MGM_G193(MGM_W148,d_delay);
   not MGM_G194(MGM_W149,si_delay);
   and MGM_G195(MGM_W150,MGM_W149,MGM_W148);
   not MGM_G196(MGM_W151,sleep);
   and MGM_G197(MGM_W152,MGM_W151,MGM_W150);
   and MGM_G198(ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W152);
   not MGM_G199(MGM_W153,d_delay);
   not MGM_G200(MGM_W154,si_delay);
   and MGM_G201(MGM_W155,MGM_W154,MGM_W153);
   and MGM_G202(MGM_W156,sleep,MGM_W155);
   not MGM_G203(MGM_W157,ssb_delay);
   and MGM_G204(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W157,MGM_W156);
   not MGM_G205(MGM_W158,d_delay);
   not MGM_G206(MGM_W159,si_delay);
   and MGM_G207(MGM_W160,MGM_W159,MGM_W158);
   and MGM_G208(MGM_W161,sleep,MGM_W160);
   and MGM_G209(ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W161);
   not MGM_G210(MGM_W162,d_delay);
   and MGM_G211(MGM_W163,si_delay,MGM_W162);
   not MGM_G212(MGM_W164,sleep);
   and MGM_G213(MGM_W165,MGM_W164,MGM_W163);
   not MGM_G214(MGM_W166,ssb_delay);
   and MGM_G215(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W166,MGM_W165);
   not MGM_G216(MGM_W167,d_delay);
   and MGM_G217(MGM_W168,si_delay,MGM_W167);
   not MGM_G218(MGM_W169,sleep);
   and MGM_G219(MGM_W170,MGM_W169,MGM_W168);
   and MGM_G220(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W170);
   not MGM_G221(MGM_W171,d_delay);
   and MGM_G222(MGM_W172,si_delay,MGM_W171);
   and MGM_G223(MGM_W173,sleep,MGM_W172);
   not MGM_G224(MGM_W174,ssb_delay);
   and MGM_G225(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W174,MGM_W173);
   not MGM_G226(MGM_W175,d_delay);
   and MGM_G227(MGM_W176,si_delay,MGM_W175);
   and MGM_G228(MGM_W177,sleep,MGM_W176);
   and MGM_G229(ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W177);
   not MGM_G230(MGM_W178,si_delay);
   and MGM_G231(MGM_W179,MGM_W178,d_delay);
   not MGM_G232(MGM_W180,sleep);
   and MGM_G233(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G234(MGM_W182,ssb_delay);
   and MGM_G235(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W182,MGM_W181);
   not MGM_G236(MGM_W183,si_delay);
   and MGM_G237(MGM_W184,MGM_W183,d_delay);
   not MGM_G238(MGM_W185,sleep);
   and MGM_G239(MGM_W186,MGM_W185,MGM_W184);
   and MGM_G240(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W186);
   not MGM_G241(MGM_W187,si_delay);
   and MGM_G242(MGM_W188,MGM_W187,d_delay);
   and MGM_G243(MGM_W189,sleep,MGM_W188);
   not MGM_G244(MGM_W190,ssb_delay);
   and MGM_G245(ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W190,MGM_W189);
   not MGM_G246(MGM_W191,si_delay);
   and MGM_G247(MGM_W192,MGM_W191,d_delay);
   and MGM_G248(MGM_W193,sleep,MGM_W192);
   and MGM_G249(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W193);
   and MGM_G250(MGM_W194,si_delay,d_delay);
   not MGM_G251(MGM_W195,sleep);
   and MGM_G252(MGM_W196,MGM_W195,MGM_W194);
   not MGM_G253(MGM_W197,ssb_delay);
   and MGM_G254(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W197,MGM_W196);
   and MGM_G255(MGM_W198,si_delay,d_delay);
   not MGM_G256(MGM_W199,sleep);
   and MGM_G257(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G258(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W200);
   and MGM_G259(MGM_W201,si_delay,d_delay);
   and MGM_G260(MGM_W202,sleep,MGM_W201);
   not MGM_G261(MGM_W203,ssb_delay);
   and MGM_G262(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W203,MGM_W202);
   and MGM_G263(MGM_W204,si_delay,d_delay);
   and MGM_G264(MGM_W205,sleep,MGM_W204);
   and MGM_G265(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W205);
   not MGM_G266(MGM_W206,si_delay);
   not MGM_G267(MGM_W207,sleep);
   and MGM_G268(MGM_W208,MGM_W207,MGM_W206);
   and MGM_G269(ENABLE_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W208);
   not MGM_G270(MGM_W209,si_delay);
   and MGM_G271(MGM_W210,sleep,MGM_W209);
   and MGM_G272(ENABLE_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W210);
   not MGM_G273(MGM_W211,sleep);
   and MGM_G274(MGM_W212,MGM_W211,si_delay);
   and MGM_G275(ENABLE_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   and MGM_G276(MGM_W213,sleep,si_delay);
   and MGM_G277(ENABLE_si_AND_sleep_AND_ssb,ssb_delay,MGM_W213);
   not MGM_G278(MGM_W214,d_delay);
   not MGM_G279(MGM_W215,sleep);
   and MGM_G280(MGM_W216,MGM_W215,MGM_W214);
   not MGM_G281(MGM_W217,ssb_delay);
   and MGM_G282(ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G283(MGM_W218,d_delay);
   and MGM_G284(MGM_W219,sleep,MGM_W218);
   not MGM_G285(MGM_W220,ssb_delay);
   and MGM_G286(ENABLE_NOT_d_AND_sleep_AND_NOT_ssb,MGM_W220,MGM_W219);
   not MGM_G287(MGM_W221,sleep);
   and MGM_G288(MGM_W222,MGM_W221,d_delay);
   not MGM_G289(MGM_W223,ssb_delay);
   and MGM_G290(ENABLE_d_AND_NOT_sleep_AND_NOT_ssb,MGM_W223,MGM_W222);
   and MGM_G291(MGM_W224,sleep,d_delay);
   not MGM_G292(MGM_W225,ssb_delay);
   and MGM_G293(ENABLE_d_AND_sleep_AND_NOT_ssb,MGM_W225,MGM_W224);
   not MGM_G294(MGM_W226,d_delay);
   not MGM_G295(MGM_W227,si_delay);
   and MGM_G296(MGM_W228,MGM_W227,MGM_W226);
   not MGM_G297(MGM_W229,ssb_delay);
   and MGM_G298(ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W229,MGM_W228);
   not MGM_G299(MGM_W230,d_delay);
   not MGM_G300(MGM_W231,si_delay);
   and MGM_G301(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G302(ENABLE_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W232);
   not MGM_G303(MGM_W233,d_delay);
   and MGM_G304(MGM_W234,si_delay,MGM_W233);
   not MGM_G305(MGM_W235,ssb_delay);
   and MGM_G306(ENABLE_NOT_d_AND_si_AND_NOT_ssb,MGM_W235,MGM_W234);
   not MGM_G307(MGM_W236,d_delay);
   and MGM_G308(MGM_W237,si_delay,MGM_W236);
   and MGM_G309(ENABLE_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W237);
   not MGM_G310(MGM_W238,si_delay);
   and MGM_G311(MGM_W239,MGM_W238,d_delay);
   not MGM_G312(MGM_W240,ssb_delay);
   and MGM_G313(ENABLE_d_AND_NOT_si_AND_NOT_ssb,MGM_W240,MGM_W239);
   not MGM_G314(MGM_W241,si_delay);
   and MGM_G315(MGM_W242,MGM_W241,d_delay);
   and MGM_G316(ENABLE_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W242);
   and MGM_G317(MGM_W243,si_delay,d_delay);
   not MGM_G318(MGM_W244,ssb_delay);
   and MGM_G319(ENABLE_d_AND_si_AND_NOT_ssb,MGM_W244,MGM_W243);
   and MGM_G320(MGM_W245,si_delay,d_delay);
   and MGM_G321(ENABLE_d_AND_si_AND_ssb,ssb_delay,MGM_W245);
   not MGM_G322(MGM_W246,d_delay);
   and MGM_G323(MGM_W247,MGM_W246,clk_delay);
   not MGM_G324(MGM_W248,si_delay);
   and MGM_G325(MGM_W249,MGM_W248,MGM_W247);
   not MGM_G326(MGM_W250,ssb_delay);
   and MGM_G327(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb,MGM_W250,MGM_W249);
   not MGM_G328(MGM_W251,d_delay);
   and MGM_G329(MGM_W252,MGM_W251,clk_delay);
   not MGM_G330(MGM_W253,si_delay);
   and MGM_G331(MGM_W254,MGM_W253,MGM_W252);
   and MGM_G332(ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W254);
   not MGM_G333(MGM_W255,d_delay);
   and MGM_G334(MGM_W256,MGM_W255,clk_delay);
   and MGM_G335(MGM_W257,si_delay,MGM_W256);
   not MGM_G336(MGM_W258,ssb_delay);
   and MGM_G337(ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb,MGM_W258,MGM_W257);
   not MGM_G338(MGM_W259,d_delay);
   and MGM_G339(MGM_W260,MGM_W259,clk_delay);
   and MGM_G340(MGM_W261,si_delay,MGM_W260);
   and MGM_G341(ENABLE_clk_AND_NOT_d_AND_si_AND_ssb,ssb_delay,MGM_W261);
   and MGM_G342(MGM_W262,d_delay,clk_delay);
   not MGM_G343(MGM_W263,si_delay);
   and MGM_G344(MGM_W264,MGM_W263,MGM_W262);
   not MGM_G345(MGM_W265,ssb_delay);
   and MGM_G346(ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb,MGM_W265,MGM_W264);
   and MGM_G347(MGM_W266,d_delay,clk_delay);
   not MGM_G348(MGM_W267,si_delay);
   and MGM_G349(MGM_W268,MGM_W267,MGM_W266);
   and MGM_G350(ENABLE_clk_AND_d_AND_NOT_si_AND_ssb,ssb_delay,MGM_W268);
   and MGM_G351(MGM_W269,d_delay,clk_delay);
   and MGM_G352(MGM_W270,si_delay,MGM_W269);
   not MGM_G353(MGM_W271,ssb_delay);
   and MGM_G354(ENABLE_clk_AND_d_AND_si_AND_NOT_ssb,MGM_W271,MGM_W270);
   and MGM_G355(MGM_W272,d_delay,clk_delay);
   and MGM_G356(MGM_W273,si_delay,MGM_W272);
   and MGM_G357(ENABLE_clk_AND_d_AND_si_AND_ssb,ssb_delay,MGM_W273);
   not MGM_G358(MGM_W274,d_delay);
   and MGM_G359(MGM_W275,si_delay,MGM_W274);
   not MGM_G360(MGM_W276,sleep);
   and MGM_G361(ENABLE_NOT_d_AND_si_AND_NOT_sleep,MGM_W276,MGM_W275);
   not MGM_G362(MGM_W277,d_delay);
   and MGM_G363(MGM_W278,si_delay,MGM_W277);
   and MGM_G364(ENABLE_NOT_d_AND_si_AND_sleep,sleep,MGM_W278);
   not MGM_G365(MGM_W279,si_delay);
   and MGM_G366(MGM_W280,MGM_W279,d_delay);
   not MGM_G367(MGM_W281,sleep);
   and MGM_G368(ENABLE_d_AND_NOT_si_AND_NOT_sleep,MGM_W281,MGM_W280);
   not MGM_G369(MGM_W282,si_delay);
   and MGM_G370(MGM_W283,MGM_W282,d_delay);
   and MGM_G371(ENABLE_d_AND_NOT_si_AND_sleep,sleep,MGM_W283);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_NOT_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_NOT_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep &&& (ENABLE_clk_AND_d_AND_si_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge sleep,0.0,0,notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvnr03ad1d02x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvnr03ad_delay o =  IQ2;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G21(MGM_W11,d_delay);
   and MGM_G22(MGM_W12,rb_delay,MGM_W11);
   not MGM_G23(MGM_W13,sleep);
   and MGM_G24(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W13,MGM_W12);
   not MGM_G25(MGM_W14,d_delay);
   and MGM_G26(MGM_W15,rb_delay,MGM_W14);
   and MGM_G27(ENABLE_NOT_d_AND_rb_AND_sleep,sleep,MGM_W15);
   and MGM_G28(MGM_W16,rb_delay,d_delay);
   not MGM_G29(MGM_W17,sleep);
   and MGM_G30(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W17,MGM_W16);
   and MGM_G31(MGM_W18,rb_delay,d_delay);
   and MGM_G32(ENABLE_d_AND_rb_AND_sleep,sleep,MGM_W18);
   not MGM_G33(MGM_W19,sleep);
   and MGM_G34(ENABLE_rb_AND_NOT_sleep,MGM_W19,rb_delay);
   and MGM_G35(ENABLE_rb_AND_sleep,sleep,rb_delay);
   not MGM_G36(MGM_W20,sleep);
   and MGM_G37(ENABLE_d_AND_NOT_sleep,MGM_W20,d_delay);
   and MGM_G38(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G39(MGM_W21,d_delay);
   and MGM_G40(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W21);
   and MGM_G41(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvnr03ad1d03x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvnr03ad_delay o =  IQ2;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G21(MGM_W11,d_delay);
   and MGM_G22(MGM_W12,rb_delay,MGM_W11);
   not MGM_G23(MGM_W13,sleep);
   and MGM_G24(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W13,MGM_W12);
   not MGM_G25(MGM_W14,d_delay);
   and MGM_G26(MGM_W15,rb_delay,MGM_W14);
   and MGM_G27(ENABLE_NOT_d_AND_rb_AND_sleep,sleep,MGM_W15);
   and MGM_G28(MGM_W16,rb_delay,d_delay);
   not MGM_G29(MGM_W17,sleep);
   and MGM_G30(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W17,MGM_W16);
   and MGM_G31(MGM_W18,rb_delay,d_delay);
   and MGM_G32(ENABLE_d_AND_rb_AND_sleep,sleep,MGM_W18);
   not MGM_G33(MGM_W19,sleep);
   and MGM_G34(ENABLE_rb_AND_NOT_sleep,MGM_W19,rb_delay);
   and MGM_G35(ENABLE_rb_AND_sleep,sleep,rb_delay);
   not MGM_G36(MGM_W20,sleep);
   and MGM_G37(ENABLE_d_AND_NOT_sleep,MGM_W20,d_delay);
   and MGM_G38(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G39(MGM_W21,d_delay);
   and MGM_G40(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W21);
   and MGM_G41(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvnr03ad1d06x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvnr03ad_delay o =  IQ2;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G21(MGM_W11,d_delay);
   and MGM_G22(MGM_W12,rb_delay,MGM_W11);
   not MGM_G23(MGM_W13,sleep);
   and MGM_G24(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W13,MGM_W12);
   not MGM_G25(MGM_W14,d_delay);
   and MGM_G26(MGM_W15,rb_delay,MGM_W14);
   and MGM_G27(ENABLE_NOT_d_AND_rb_AND_sleep,sleep,MGM_W15);
   and MGM_G28(MGM_W16,rb_delay,d_delay);
   not MGM_G29(MGM_W17,sleep);
   and MGM_G30(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W17,MGM_W16);
   and MGM_G31(MGM_W18,rb_delay,d_delay);
   and MGM_G32(ENABLE_d_AND_rb_AND_sleep,sleep,MGM_W18);
   not MGM_G33(MGM_W19,sleep);
   and MGM_G34(ENABLE_rb_AND_NOT_sleep,MGM_W19,rb_delay);
   and MGM_G35(ENABLE_rb_AND_sleep,sleep,rb_delay);
   not MGM_G36(MGM_W20,sleep);
   and MGM_G37(ENABLE_d_AND_NOT_sleep,MGM_W20,d_delay);
   and MGM_G38(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G39(MGM_W21,d_delay);
   and MGM_G40(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W21);
   and MGM_G41(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvnr03ad1d12x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= d;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvnr03ad_delay o =  IQ2;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `fvnr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvnr03ad_func i0sfvnr03ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G21(MGM_W11,d_delay);
   and MGM_G22(MGM_W12,rb_delay,MGM_W11);
   not MGM_G23(MGM_W13,sleep);
   and MGM_G24(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W13,MGM_W12);
   not MGM_G25(MGM_W14,d_delay);
   and MGM_G26(MGM_W15,rb_delay,MGM_W14);
   and MGM_G27(ENABLE_NOT_d_AND_rb_AND_sleep,sleep,MGM_W15);
   and MGM_G28(MGM_W16,rb_delay,d_delay);
   not MGM_G29(MGM_W17,sleep);
   and MGM_G30(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W17,MGM_W16);
   and MGM_G31(MGM_W18,rb_delay,d_delay);
   and MGM_G32(ENABLE_d_AND_rb_AND_sleep,sleep,MGM_W18);
   not MGM_G33(MGM_W19,sleep);
   and MGM_G34(ENABLE_rb_AND_NOT_sleep,MGM_W19,rb_delay);
   and MGM_G35(ENABLE_rb_AND_sleep,sleep,rb_delay);
   not MGM_G36(MGM_W20,sleep);
   and MGM_G37(ENABLE_d_AND_NOT_sleep,MGM_W20,d_delay);
   and MGM_G38(ENABLE_d_AND_sleep,sleep,d_delay);
   not MGM_G39(MGM_W21,d_delay);
   and MGM_G40(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W21);
   and MGM_G41(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_sleep == 1'b1),
      posedge clk &&& (ENABLE_d_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr03ad1d02x5( clk, d, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb or si or ssb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr03ad_delay o =  IQ2;
// assign `fvzr03ad_delay so =  IQ2;
// 

   input clk, d, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G222(MGM_W178,d_delay);
   and MGM_G223(MGM_W179,rb_delay,MGM_W178);
   not MGM_G224(MGM_W180,si_delay);
   and MGM_G225(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G226(MGM_W182,sleep);
   and MGM_G227(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G228(MGM_W184,ssb_delay);
   and MGM_G229(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W184,MGM_W183);
   not MGM_G230(MGM_W185,d_delay);
   and MGM_G231(MGM_W186,rb_delay,MGM_W185);
   not MGM_G232(MGM_W187,si_delay);
   and MGM_G233(MGM_W188,MGM_W187,MGM_W186);
   not MGM_G234(MGM_W189,sleep);
   and MGM_G235(MGM_W190,MGM_W189,MGM_W188);
   and MGM_G236(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W190);
   not MGM_G237(MGM_W191,d_delay);
   and MGM_G238(MGM_W192,rb_delay,MGM_W191);
   not MGM_G239(MGM_W193,si_delay);
   and MGM_G240(MGM_W194,MGM_W193,MGM_W192);
   and MGM_G241(MGM_W195,sleep,MGM_W194);
   not MGM_G242(MGM_W196,ssb_delay);
   and MGM_G243(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W196,MGM_W195);
   not MGM_G244(MGM_W197,d_delay);
   and MGM_G245(MGM_W198,rb_delay,MGM_W197);
   not MGM_G246(MGM_W199,si_delay);
   and MGM_G247(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G248(MGM_W201,sleep,MGM_W200);
   and MGM_G249(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W201);
   not MGM_G250(MGM_W202,d_delay);
   and MGM_G251(MGM_W203,rb_delay,MGM_W202);
   and MGM_G252(MGM_W204,si_delay,MGM_W203);
   not MGM_G253(MGM_W205,sleep);
   and MGM_G254(MGM_W206,MGM_W205,MGM_W204);
   not MGM_G255(MGM_W207,ssb_delay);
   and MGM_G256(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W207,MGM_W206);
   not MGM_G257(MGM_W208,d_delay);
   and MGM_G258(MGM_W209,rb_delay,MGM_W208);
   and MGM_G259(MGM_W210,si_delay,MGM_W209);
   not MGM_G260(MGM_W211,sleep);
   and MGM_G261(MGM_W212,MGM_W211,MGM_W210);
   and MGM_G262(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   not MGM_G263(MGM_W213,d_delay);
   and MGM_G264(MGM_W214,rb_delay,MGM_W213);
   and MGM_G265(MGM_W215,si_delay,MGM_W214);
   and MGM_G266(MGM_W216,sleep,MGM_W215);
   not MGM_G267(MGM_W217,ssb_delay);
   and MGM_G268(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G269(MGM_W218,d_delay);
   and MGM_G270(MGM_W219,rb_delay,MGM_W218);
   and MGM_G271(MGM_W220,si_delay,MGM_W219);
   and MGM_G272(MGM_W221,sleep,MGM_W220);
   and MGM_G273(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W221);
   and MGM_G274(MGM_W222,rb_delay,d_delay);
   not MGM_G275(MGM_W223,si_delay);
   and MGM_G276(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G277(MGM_W225,sleep);
   and MGM_G278(MGM_W226,MGM_W225,MGM_W224);
   not MGM_G279(MGM_W227,ssb_delay);
   and MGM_G280(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W227,MGM_W226);
   and MGM_G281(MGM_W228,rb_delay,d_delay);
   not MGM_G282(MGM_W229,si_delay);
   and MGM_G283(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G284(MGM_W231,sleep);
   and MGM_G285(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G286(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W232);
   and MGM_G287(MGM_W233,rb_delay,d_delay);
   not MGM_G288(MGM_W234,si_delay);
   and MGM_G289(MGM_W235,MGM_W234,MGM_W233);
   and MGM_G290(MGM_W236,sleep,MGM_W235);
   not MGM_G291(MGM_W237,ssb_delay);
   and MGM_G292(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W237,MGM_W236);
   and MGM_G293(MGM_W238,rb_delay,d_delay);
   not MGM_G294(MGM_W239,si_delay);
   and MGM_G295(MGM_W240,MGM_W239,MGM_W238);
   and MGM_G296(MGM_W241,sleep,MGM_W240);
   and MGM_G297(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W241);
   and MGM_G298(MGM_W242,rb_delay,d_delay);
   and MGM_G299(MGM_W243,si_delay,MGM_W242);
   not MGM_G300(MGM_W244,sleep);
   and MGM_G301(MGM_W245,MGM_W244,MGM_W243);
   not MGM_G302(MGM_W246,ssb_delay);
   and MGM_G303(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W246,MGM_W245);
   and MGM_G304(MGM_W247,rb_delay,d_delay);
   and MGM_G305(MGM_W248,si_delay,MGM_W247);
   not MGM_G306(MGM_W249,sleep);
   and MGM_G307(MGM_W250,MGM_W249,MGM_W248);
   and MGM_G308(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W250);
   and MGM_G309(MGM_W251,rb_delay,d_delay);
   and MGM_G310(MGM_W252,si_delay,MGM_W251);
   and MGM_G311(MGM_W253,sleep,MGM_W252);
   not MGM_G312(MGM_W254,ssb_delay);
   and MGM_G313(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W254,MGM_W253);
   and MGM_G314(MGM_W255,rb_delay,d_delay);
   and MGM_G315(MGM_W256,si_delay,MGM_W255);
   and MGM_G316(MGM_W257,sleep,MGM_W256);
   and MGM_G317(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W257);
   not MGM_G318(MGM_W258,si_delay);
   and MGM_G319(MGM_W259,MGM_W258,rb_delay);
   not MGM_G320(MGM_W260,sleep);
   and MGM_G321(MGM_W261,MGM_W260,MGM_W259);
   and MGM_G322(ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W261);
   not MGM_G323(MGM_W262,si_delay);
   and MGM_G324(MGM_W263,MGM_W262,rb_delay);
   and MGM_G325(MGM_W264,sleep,MGM_W263);
   and MGM_G326(ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W264);
   and MGM_G327(MGM_W265,si_delay,rb_delay);
   not MGM_G328(MGM_W266,sleep);
   and MGM_G329(MGM_W267,MGM_W266,MGM_W265);
   and MGM_G330(ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W267);
   and MGM_G331(MGM_W268,si_delay,rb_delay);
   and MGM_G332(MGM_W269,sleep,MGM_W268);
   and MGM_G333(ENABLE_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W269);
   not MGM_G334(MGM_W270,d_delay);
   and MGM_G335(MGM_W271,si_delay,MGM_W270);
   not MGM_G336(MGM_W272,sleep);
   and MGM_G337(MGM_W273,MGM_W272,MGM_W271);
   not MGM_G338(MGM_W274,ssb_delay);
   and MGM_G339(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W274,MGM_W273);
   not MGM_G340(MGM_W275,d_delay);
   and MGM_G341(MGM_W276,si_delay,MGM_W275);
   and MGM_G342(MGM_W277,sleep,MGM_W276);
   not MGM_G343(MGM_W278,ssb_delay);
   and MGM_G344(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W278,MGM_W277);
   not MGM_G345(MGM_W279,si_delay);
   and MGM_G346(MGM_W280,MGM_W279,d_delay);
   not MGM_G347(MGM_W281,sleep);
   and MGM_G348(MGM_W282,MGM_W281,MGM_W280);
   and MGM_G349(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W282);
   not MGM_G350(MGM_W283,si_delay);
   and MGM_G351(MGM_W284,MGM_W283,d_delay);
   and MGM_G352(MGM_W285,sleep,MGM_W284);
   and MGM_G353(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W285);
   and MGM_G354(MGM_W286,si_delay,d_delay);
   not MGM_G355(MGM_W287,sleep);
   and MGM_G356(MGM_W288,MGM_W287,MGM_W286);
   not MGM_G357(MGM_W289,ssb_delay);
   and MGM_G358(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W289,MGM_W288);
   and MGM_G359(MGM_W290,si_delay,d_delay);
   not MGM_G360(MGM_W291,sleep);
   and MGM_G361(MGM_W292,MGM_W291,MGM_W290);
   and MGM_G362(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W292);
   and MGM_G363(MGM_W293,si_delay,d_delay);
   and MGM_G364(MGM_W294,sleep,MGM_W293);
   not MGM_G365(MGM_W295,ssb_delay);
   and MGM_G366(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W295,MGM_W294);
   and MGM_G367(MGM_W296,si_delay,d_delay);
   and MGM_G368(MGM_W297,sleep,MGM_W296);
   and MGM_G369(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W297);
   not MGM_G370(MGM_W298,d_delay);
   and MGM_G371(MGM_W299,rb_delay,MGM_W298);
   not MGM_G372(MGM_W300,sleep);
   and MGM_G373(MGM_W301,MGM_W300,MGM_W299);
   not MGM_G374(MGM_W302,ssb_delay);
   and MGM_G375(ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W302,MGM_W301);
   not MGM_G376(MGM_W303,d_delay);
   and MGM_G377(MGM_W304,rb_delay,MGM_W303);
   and MGM_G378(MGM_W305,sleep,MGM_W304);
   not MGM_G379(MGM_W306,ssb_delay);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W306,MGM_W305);
   and MGM_G381(MGM_W307,rb_delay,d_delay);
   not MGM_G382(MGM_W308,sleep);
   and MGM_G383(MGM_W309,MGM_W308,MGM_W307);
   not MGM_G384(MGM_W310,ssb_delay);
   and MGM_G385(ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W310,MGM_W309);
   and MGM_G386(MGM_W311,rb_delay,d_delay);
   and MGM_G387(MGM_W312,sleep,MGM_W311);
   not MGM_G388(MGM_W313,ssb_delay);
   and MGM_G389(ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W313,MGM_W312);
   not MGM_G390(MGM_W314,d_delay);
   and MGM_G391(MGM_W315,rb_delay,MGM_W314);
   not MGM_G392(MGM_W316,si_delay);
   and MGM_G393(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G394(MGM_W318,ssb_delay);
   and MGM_G395(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G396(MGM_W319,d_delay);
   and MGM_G397(MGM_W320,rb_delay,MGM_W319);
   not MGM_G398(MGM_W321,si_delay);
   and MGM_G399(MGM_W322,MGM_W321,MGM_W320);
   and MGM_G400(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W322);
   not MGM_G401(MGM_W323,d_delay);
   and MGM_G402(MGM_W324,rb_delay,MGM_W323);
   and MGM_G403(MGM_W325,si_delay,MGM_W324);
   not MGM_G404(MGM_W326,ssb_delay);
   and MGM_G405(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W326,MGM_W325);
   not MGM_G406(MGM_W327,d_delay);
   and MGM_G407(MGM_W328,rb_delay,MGM_W327);
   and MGM_G408(MGM_W329,si_delay,MGM_W328);
   and MGM_G409(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W329);
   and MGM_G410(MGM_W330,rb_delay,d_delay);
   not MGM_G411(MGM_W331,si_delay);
   and MGM_G412(MGM_W332,MGM_W331,MGM_W330);
   not MGM_G413(MGM_W333,ssb_delay);
   and MGM_G414(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W333,MGM_W332);
   and MGM_G415(MGM_W334,rb_delay,d_delay);
   not MGM_G416(MGM_W335,si_delay);
   and MGM_G417(MGM_W336,MGM_W335,MGM_W334);
   and MGM_G418(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W336);
   and MGM_G419(MGM_W337,rb_delay,d_delay);
   and MGM_G420(MGM_W338,si_delay,MGM_W337);
   not MGM_G421(MGM_W339,ssb_delay);
   and MGM_G422(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W339,MGM_W338);
   and MGM_G423(MGM_W340,rb_delay,d_delay);
   and MGM_G424(MGM_W341,si_delay,MGM_W340);
   and MGM_G425(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G426(MGM_W342,d_delay);
   and MGM_G427(MGM_W343,rb_delay,MGM_W342);
   and MGM_G428(MGM_W344,si_delay,MGM_W343);
   not MGM_G429(MGM_W345,sleep);
   and MGM_G430(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep,MGM_W345,MGM_W344);
   not MGM_G431(MGM_W346,d_delay);
   and MGM_G432(MGM_W347,rb_delay,MGM_W346);
   and MGM_G433(MGM_W348,si_delay,MGM_W347);
   and MGM_G434(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep,sleep,MGM_W348);
   and MGM_G435(MGM_W349,rb_delay,d_delay);
   not MGM_G436(MGM_W350,si_delay);
   and MGM_G437(MGM_W351,MGM_W350,MGM_W349);
   not MGM_G438(MGM_W352,sleep);
   and MGM_G439(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W352,MGM_W351);
   and MGM_G440(MGM_W353,rb_delay,d_delay);
   not MGM_G441(MGM_W354,si_delay);
   and MGM_G442(MGM_W355,MGM_W354,MGM_W353);
   and MGM_G443(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W355);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr03ad1d03x5( clk, d, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb or si or ssb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr03ad_delay o =  IQ2;
// assign `fvzr03ad_delay so =  IQ2;
// 

   input clk, d, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G222(MGM_W178,d_delay);
   and MGM_G223(MGM_W179,rb_delay,MGM_W178);
   not MGM_G224(MGM_W180,si_delay);
   and MGM_G225(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G226(MGM_W182,sleep);
   and MGM_G227(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G228(MGM_W184,ssb_delay);
   and MGM_G229(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W184,MGM_W183);
   not MGM_G230(MGM_W185,d_delay);
   and MGM_G231(MGM_W186,rb_delay,MGM_W185);
   not MGM_G232(MGM_W187,si_delay);
   and MGM_G233(MGM_W188,MGM_W187,MGM_W186);
   not MGM_G234(MGM_W189,sleep);
   and MGM_G235(MGM_W190,MGM_W189,MGM_W188);
   and MGM_G236(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W190);
   not MGM_G237(MGM_W191,d_delay);
   and MGM_G238(MGM_W192,rb_delay,MGM_W191);
   not MGM_G239(MGM_W193,si_delay);
   and MGM_G240(MGM_W194,MGM_W193,MGM_W192);
   and MGM_G241(MGM_W195,sleep,MGM_W194);
   not MGM_G242(MGM_W196,ssb_delay);
   and MGM_G243(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W196,MGM_W195);
   not MGM_G244(MGM_W197,d_delay);
   and MGM_G245(MGM_W198,rb_delay,MGM_W197);
   not MGM_G246(MGM_W199,si_delay);
   and MGM_G247(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G248(MGM_W201,sleep,MGM_W200);
   and MGM_G249(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W201);
   not MGM_G250(MGM_W202,d_delay);
   and MGM_G251(MGM_W203,rb_delay,MGM_W202);
   and MGM_G252(MGM_W204,si_delay,MGM_W203);
   not MGM_G253(MGM_W205,sleep);
   and MGM_G254(MGM_W206,MGM_W205,MGM_W204);
   not MGM_G255(MGM_W207,ssb_delay);
   and MGM_G256(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W207,MGM_W206);
   not MGM_G257(MGM_W208,d_delay);
   and MGM_G258(MGM_W209,rb_delay,MGM_W208);
   and MGM_G259(MGM_W210,si_delay,MGM_W209);
   not MGM_G260(MGM_W211,sleep);
   and MGM_G261(MGM_W212,MGM_W211,MGM_W210);
   and MGM_G262(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   not MGM_G263(MGM_W213,d_delay);
   and MGM_G264(MGM_W214,rb_delay,MGM_W213);
   and MGM_G265(MGM_W215,si_delay,MGM_W214);
   and MGM_G266(MGM_W216,sleep,MGM_W215);
   not MGM_G267(MGM_W217,ssb_delay);
   and MGM_G268(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G269(MGM_W218,d_delay);
   and MGM_G270(MGM_W219,rb_delay,MGM_W218);
   and MGM_G271(MGM_W220,si_delay,MGM_W219);
   and MGM_G272(MGM_W221,sleep,MGM_W220);
   and MGM_G273(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W221);
   and MGM_G274(MGM_W222,rb_delay,d_delay);
   not MGM_G275(MGM_W223,si_delay);
   and MGM_G276(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G277(MGM_W225,sleep);
   and MGM_G278(MGM_W226,MGM_W225,MGM_W224);
   not MGM_G279(MGM_W227,ssb_delay);
   and MGM_G280(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W227,MGM_W226);
   and MGM_G281(MGM_W228,rb_delay,d_delay);
   not MGM_G282(MGM_W229,si_delay);
   and MGM_G283(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G284(MGM_W231,sleep);
   and MGM_G285(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G286(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W232);
   and MGM_G287(MGM_W233,rb_delay,d_delay);
   not MGM_G288(MGM_W234,si_delay);
   and MGM_G289(MGM_W235,MGM_W234,MGM_W233);
   and MGM_G290(MGM_W236,sleep,MGM_W235);
   not MGM_G291(MGM_W237,ssb_delay);
   and MGM_G292(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W237,MGM_W236);
   and MGM_G293(MGM_W238,rb_delay,d_delay);
   not MGM_G294(MGM_W239,si_delay);
   and MGM_G295(MGM_W240,MGM_W239,MGM_W238);
   and MGM_G296(MGM_W241,sleep,MGM_W240);
   and MGM_G297(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W241);
   and MGM_G298(MGM_W242,rb_delay,d_delay);
   and MGM_G299(MGM_W243,si_delay,MGM_W242);
   not MGM_G300(MGM_W244,sleep);
   and MGM_G301(MGM_W245,MGM_W244,MGM_W243);
   not MGM_G302(MGM_W246,ssb_delay);
   and MGM_G303(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W246,MGM_W245);
   and MGM_G304(MGM_W247,rb_delay,d_delay);
   and MGM_G305(MGM_W248,si_delay,MGM_W247);
   not MGM_G306(MGM_W249,sleep);
   and MGM_G307(MGM_W250,MGM_W249,MGM_W248);
   and MGM_G308(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W250);
   and MGM_G309(MGM_W251,rb_delay,d_delay);
   and MGM_G310(MGM_W252,si_delay,MGM_W251);
   and MGM_G311(MGM_W253,sleep,MGM_W252);
   not MGM_G312(MGM_W254,ssb_delay);
   and MGM_G313(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W254,MGM_W253);
   and MGM_G314(MGM_W255,rb_delay,d_delay);
   and MGM_G315(MGM_W256,si_delay,MGM_W255);
   and MGM_G316(MGM_W257,sleep,MGM_W256);
   and MGM_G317(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W257);
   not MGM_G318(MGM_W258,si_delay);
   and MGM_G319(MGM_W259,MGM_W258,rb_delay);
   not MGM_G320(MGM_W260,sleep);
   and MGM_G321(MGM_W261,MGM_W260,MGM_W259);
   and MGM_G322(ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W261);
   not MGM_G323(MGM_W262,si_delay);
   and MGM_G324(MGM_W263,MGM_W262,rb_delay);
   and MGM_G325(MGM_W264,sleep,MGM_W263);
   and MGM_G326(ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W264);
   and MGM_G327(MGM_W265,si_delay,rb_delay);
   not MGM_G328(MGM_W266,sleep);
   and MGM_G329(MGM_W267,MGM_W266,MGM_W265);
   and MGM_G330(ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W267);
   and MGM_G331(MGM_W268,si_delay,rb_delay);
   and MGM_G332(MGM_W269,sleep,MGM_W268);
   and MGM_G333(ENABLE_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W269);
   not MGM_G334(MGM_W270,d_delay);
   and MGM_G335(MGM_W271,si_delay,MGM_W270);
   not MGM_G336(MGM_W272,sleep);
   and MGM_G337(MGM_W273,MGM_W272,MGM_W271);
   not MGM_G338(MGM_W274,ssb_delay);
   and MGM_G339(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W274,MGM_W273);
   not MGM_G340(MGM_W275,d_delay);
   and MGM_G341(MGM_W276,si_delay,MGM_W275);
   and MGM_G342(MGM_W277,sleep,MGM_W276);
   not MGM_G343(MGM_W278,ssb_delay);
   and MGM_G344(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W278,MGM_W277);
   not MGM_G345(MGM_W279,si_delay);
   and MGM_G346(MGM_W280,MGM_W279,d_delay);
   not MGM_G347(MGM_W281,sleep);
   and MGM_G348(MGM_W282,MGM_W281,MGM_W280);
   and MGM_G349(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W282);
   not MGM_G350(MGM_W283,si_delay);
   and MGM_G351(MGM_W284,MGM_W283,d_delay);
   and MGM_G352(MGM_W285,sleep,MGM_W284);
   and MGM_G353(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W285);
   and MGM_G354(MGM_W286,si_delay,d_delay);
   not MGM_G355(MGM_W287,sleep);
   and MGM_G356(MGM_W288,MGM_W287,MGM_W286);
   not MGM_G357(MGM_W289,ssb_delay);
   and MGM_G358(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W289,MGM_W288);
   and MGM_G359(MGM_W290,si_delay,d_delay);
   not MGM_G360(MGM_W291,sleep);
   and MGM_G361(MGM_W292,MGM_W291,MGM_W290);
   and MGM_G362(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W292);
   and MGM_G363(MGM_W293,si_delay,d_delay);
   and MGM_G364(MGM_W294,sleep,MGM_W293);
   not MGM_G365(MGM_W295,ssb_delay);
   and MGM_G366(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W295,MGM_W294);
   and MGM_G367(MGM_W296,si_delay,d_delay);
   and MGM_G368(MGM_W297,sleep,MGM_W296);
   and MGM_G369(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W297);
   not MGM_G370(MGM_W298,d_delay);
   and MGM_G371(MGM_W299,rb_delay,MGM_W298);
   not MGM_G372(MGM_W300,sleep);
   and MGM_G373(MGM_W301,MGM_W300,MGM_W299);
   not MGM_G374(MGM_W302,ssb_delay);
   and MGM_G375(ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W302,MGM_W301);
   not MGM_G376(MGM_W303,d_delay);
   and MGM_G377(MGM_W304,rb_delay,MGM_W303);
   and MGM_G378(MGM_W305,sleep,MGM_W304);
   not MGM_G379(MGM_W306,ssb_delay);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W306,MGM_W305);
   and MGM_G381(MGM_W307,rb_delay,d_delay);
   not MGM_G382(MGM_W308,sleep);
   and MGM_G383(MGM_W309,MGM_W308,MGM_W307);
   not MGM_G384(MGM_W310,ssb_delay);
   and MGM_G385(ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W310,MGM_W309);
   and MGM_G386(MGM_W311,rb_delay,d_delay);
   and MGM_G387(MGM_W312,sleep,MGM_W311);
   not MGM_G388(MGM_W313,ssb_delay);
   and MGM_G389(ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W313,MGM_W312);
   not MGM_G390(MGM_W314,d_delay);
   and MGM_G391(MGM_W315,rb_delay,MGM_W314);
   not MGM_G392(MGM_W316,si_delay);
   and MGM_G393(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G394(MGM_W318,ssb_delay);
   and MGM_G395(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G396(MGM_W319,d_delay);
   and MGM_G397(MGM_W320,rb_delay,MGM_W319);
   not MGM_G398(MGM_W321,si_delay);
   and MGM_G399(MGM_W322,MGM_W321,MGM_W320);
   and MGM_G400(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W322);
   not MGM_G401(MGM_W323,d_delay);
   and MGM_G402(MGM_W324,rb_delay,MGM_W323);
   and MGM_G403(MGM_W325,si_delay,MGM_W324);
   not MGM_G404(MGM_W326,ssb_delay);
   and MGM_G405(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W326,MGM_W325);
   not MGM_G406(MGM_W327,d_delay);
   and MGM_G407(MGM_W328,rb_delay,MGM_W327);
   and MGM_G408(MGM_W329,si_delay,MGM_W328);
   and MGM_G409(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W329);
   and MGM_G410(MGM_W330,rb_delay,d_delay);
   not MGM_G411(MGM_W331,si_delay);
   and MGM_G412(MGM_W332,MGM_W331,MGM_W330);
   not MGM_G413(MGM_W333,ssb_delay);
   and MGM_G414(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W333,MGM_W332);
   and MGM_G415(MGM_W334,rb_delay,d_delay);
   not MGM_G416(MGM_W335,si_delay);
   and MGM_G417(MGM_W336,MGM_W335,MGM_W334);
   and MGM_G418(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W336);
   and MGM_G419(MGM_W337,rb_delay,d_delay);
   and MGM_G420(MGM_W338,si_delay,MGM_W337);
   not MGM_G421(MGM_W339,ssb_delay);
   and MGM_G422(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W339,MGM_W338);
   and MGM_G423(MGM_W340,rb_delay,d_delay);
   and MGM_G424(MGM_W341,si_delay,MGM_W340);
   and MGM_G425(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G426(MGM_W342,d_delay);
   and MGM_G427(MGM_W343,rb_delay,MGM_W342);
   and MGM_G428(MGM_W344,si_delay,MGM_W343);
   not MGM_G429(MGM_W345,sleep);
   and MGM_G430(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep,MGM_W345,MGM_W344);
   not MGM_G431(MGM_W346,d_delay);
   and MGM_G432(MGM_W347,rb_delay,MGM_W346);
   and MGM_G433(MGM_W348,si_delay,MGM_W347);
   and MGM_G434(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep,sleep,MGM_W348);
   and MGM_G435(MGM_W349,rb_delay,d_delay);
   not MGM_G436(MGM_W350,si_delay);
   and MGM_G437(MGM_W351,MGM_W350,MGM_W349);
   not MGM_G438(MGM_W352,sleep);
   and MGM_G439(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W352,MGM_W351);
   and MGM_G440(MGM_W353,rb_delay,d_delay);
   not MGM_G441(MGM_W354,si_delay);
   and MGM_G442(MGM_W355,MGM_W354,MGM_W353);
   and MGM_G443(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W355);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr03ad1d06x5( clk, d, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb or si or ssb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr03ad_delay o =  IQ2;
// assign `fvzr03ad_delay so =  IQ2;
// 

   input clk, d, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G222(MGM_W178,d_delay);
   and MGM_G223(MGM_W179,rb_delay,MGM_W178);
   not MGM_G224(MGM_W180,si_delay);
   and MGM_G225(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G226(MGM_W182,sleep);
   and MGM_G227(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G228(MGM_W184,ssb_delay);
   and MGM_G229(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W184,MGM_W183);
   not MGM_G230(MGM_W185,d_delay);
   and MGM_G231(MGM_W186,rb_delay,MGM_W185);
   not MGM_G232(MGM_W187,si_delay);
   and MGM_G233(MGM_W188,MGM_W187,MGM_W186);
   not MGM_G234(MGM_W189,sleep);
   and MGM_G235(MGM_W190,MGM_W189,MGM_W188);
   and MGM_G236(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W190);
   not MGM_G237(MGM_W191,d_delay);
   and MGM_G238(MGM_W192,rb_delay,MGM_W191);
   not MGM_G239(MGM_W193,si_delay);
   and MGM_G240(MGM_W194,MGM_W193,MGM_W192);
   and MGM_G241(MGM_W195,sleep,MGM_W194);
   not MGM_G242(MGM_W196,ssb_delay);
   and MGM_G243(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W196,MGM_W195);
   not MGM_G244(MGM_W197,d_delay);
   and MGM_G245(MGM_W198,rb_delay,MGM_W197);
   not MGM_G246(MGM_W199,si_delay);
   and MGM_G247(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G248(MGM_W201,sleep,MGM_W200);
   and MGM_G249(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W201);
   not MGM_G250(MGM_W202,d_delay);
   and MGM_G251(MGM_W203,rb_delay,MGM_W202);
   and MGM_G252(MGM_W204,si_delay,MGM_W203);
   not MGM_G253(MGM_W205,sleep);
   and MGM_G254(MGM_W206,MGM_W205,MGM_W204);
   not MGM_G255(MGM_W207,ssb_delay);
   and MGM_G256(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W207,MGM_W206);
   not MGM_G257(MGM_W208,d_delay);
   and MGM_G258(MGM_W209,rb_delay,MGM_W208);
   and MGM_G259(MGM_W210,si_delay,MGM_W209);
   not MGM_G260(MGM_W211,sleep);
   and MGM_G261(MGM_W212,MGM_W211,MGM_W210);
   and MGM_G262(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   not MGM_G263(MGM_W213,d_delay);
   and MGM_G264(MGM_W214,rb_delay,MGM_W213);
   and MGM_G265(MGM_W215,si_delay,MGM_W214);
   and MGM_G266(MGM_W216,sleep,MGM_W215);
   not MGM_G267(MGM_W217,ssb_delay);
   and MGM_G268(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G269(MGM_W218,d_delay);
   and MGM_G270(MGM_W219,rb_delay,MGM_W218);
   and MGM_G271(MGM_W220,si_delay,MGM_W219);
   and MGM_G272(MGM_W221,sleep,MGM_W220);
   and MGM_G273(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W221);
   and MGM_G274(MGM_W222,rb_delay,d_delay);
   not MGM_G275(MGM_W223,si_delay);
   and MGM_G276(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G277(MGM_W225,sleep);
   and MGM_G278(MGM_W226,MGM_W225,MGM_W224);
   not MGM_G279(MGM_W227,ssb_delay);
   and MGM_G280(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W227,MGM_W226);
   and MGM_G281(MGM_W228,rb_delay,d_delay);
   not MGM_G282(MGM_W229,si_delay);
   and MGM_G283(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G284(MGM_W231,sleep);
   and MGM_G285(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G286(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W232);
   and MGM_G287(MGM_W233,rb_delay,d_delay);
   not MGM_G288(MGM_W234,si_delay);
   and MGM_G289(MGM_W235,MGM_W234,MGM_W233);
   and MGM_G290(MGM_W236,sleep,MGM_W235);
   not MGM_G291(MGM_W237,ssb_delay);
   and MGM_G292(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W237,MGM_W236);
   and MGM_G293(MGM_W238,rb_delay,d_delay);
   not MGM_G294(MGM_W239,si_delay);
   and MGM_G295(MGM_W240,MGM_W239,MGM_W238);
   and MGM_G296(MGM_W241,sleep,MGM_W240);
   and MGM_G297(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W241);
   and MGM_G298(MGM_W242,rb_delay,d_delay);
   and MGM_G299(MGM_W243,si_delay,MGM_W242);
   not MGM_G300(MGM_W244,sleep);
   and MGM_G301(MGM_W245,MGM_W244,MGM_W243);
   not MGM_G302(MGM_W246,ssb_delay);
   and MGM_G303(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W246,MGM_W245);
   and MGM_G304(MGM_W247,rb_delay,d_delay);
   and MGM_G305(MGM_W248,si_delay,MGM_W247);
   not MGM_G306(MGM_W249,sleep);
   and MGM_G307(MGM_W250,MGM_W249,MGM_W248);
   and MGM_G308(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W250);
   and MGM_G309(MGM_W251,rb_delay,d_delay);
   and MGM_G310(MGM_W252,si_delay,MGM_W251);
   and MGM_G311(MGM_W253,sleep,MGM_W252);
   not MGM_G312(MGM_W254,ssb_delay);
   and MGM_G313(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W254,MGM_W253);
   and MGM_G314(MGM_W255,rb_delay,d_delay);
   and MGM_G315(MGM_W256,si_delay,MGM_W255);
   and MGM_G316(MGM_W257,sleep,MGM_W256);
   and MGM_G317(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W257);
   not MGM_G318(MGM_W258,si_delay);
   and MGM_G319(MGM_W259,MGM_W258,rb_delay);
   not MGM_G320(MGM_W260,sleep);
   and MGM_G321(MGM_W261,MGM_W260,MGM_W259);
   and MGM_G322(ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W261);
   not MGM_G323(MGM_W262,si_delay);
   and MGM_G324(MGM_W263,MGM_W262,rb_delay);
   and MGM_G325(MGM_W264,sleep,MGM_W263);
   and MGM_G326(ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W264);
   and MGM_G327(MGM_W265,si_delay,rb_delay);
   not MGM_G328(MGM_W266,sleep);
   and MGM_G329(MGM_W267,MGM_W266,MGM_W265);
   and MGM_G330(ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W267);
   and MGM_G331(MGM_W268,si_delay,rb_delay);
   and MGM_G332(MGM_W269,sleep,MGM_W268);
   and MGM_G333(ENABLE_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W269);
   not MGM_G334(MGM_W270,d_delay);
   and MGM_G335(MGM_W271,si_delay,MGM_W270);
   not MGM_G336(MGM_W272,sleep);
   and MGM_G337(MGM_W273,MGM_W272,MGM_W271);
   not MGM_G338(MGM_W274,ssb_delay);
   and MGM_G339(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W274,MGM_W273);
   not MGM_G340(MGM_W275,d_delay);
   and MGM_G341(MGM_W276,si_delay,MGM_W275);
   and MGM_G342(MGM_W277,sleep,MGM_W276);
   not MGM_G343(MGM_W278,ssb_delay);
   and MGM_G344(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W278,MGM_W277);
   not MGM_G345(MGM_W279,si_delay);
   and MGM_G346(MGM_W280,MGM_W279,d_delay);
   not MGM_G347(MGM_W281,sleep);
   and MGM_G348(MGM_W282,MGM_W281,MGM_W280);
   and MGM_G349(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W282);
   not MGM_G350(MGM_W283,si_delay);
   and MGM_G351(MGM_W284,MGM_W283,d_delay);
   and MGM_G352(MGM_W285,sleep,MGM_W284);
   and MGM_G353(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W285);
   and MGM_G354(MGM_W286,si_delay,d_delay);
   not MGM_G355(MGM_W287,sleep);
   and MGM_G356(MGM_W288,MGM_W287,MGM_W286);
   not MGM_G357(MGM_W289,ssb_delay);
   and MGM_G358(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W289,MGM_W288);
   and MGM_G359(MGM_W290,si_delay,d_delay);
   not MGM_G360(MGM_W291,sleep);
   and MGM_G361(MGM_W292,MGM_W291,MGM_W290);
   and MGM_G362(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W292);
   and MGM_G363(MGM_W293,si_delay,d_delay);
   and MGM_G364(MGM_W294,sleep,MGM_W293);
   not MGM_G365(MGM_W295,ssb_delay);
   and MGM_G366(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W295,MGM_W294);
   and MGM_G367(MGM_W296,si_delay,d_delay);
   and MGM_G368(MGM_W297,sleep,MGM_W296);
   and MGM_G369(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W297);
   not MGM_G370(MGM_W298,d_delay);
   and MGM_G371(MGM_W299,rb_delay,MGM_W298);
   not MGM_G372(MGM_W300,sleep);
   and MGM_G373(MGM_W301,MGM_W300,MGM_W299);
   not MGM_G374(MGM_W302,ssb_delay);
   and MGM_G375(ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W302,MGM_W301);
   not MGM_G376(MGM_W303,d_delay);
   and MGM_G377(MGM_W304,rb_delay,MGM_W303);
   and MGM_G378(MGM_W305,sleep,MGM_W304);
   not MGM_G379(MGM_W306,ssb_delay);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W306,MGM_W305);
   and MGM_G381(MGM_W307,rb_delay,d_delay);
   not MGM_G382(MGM_W308,sleep);
   and MGM_G383(MGM_W309,MGM_W308,MGM_W307);
   not MGM_G384(MGM_W310,ssb_delay);
   and MGM_G385(ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W310,MGM_W309);
   and MGM_G386(MGM_W311,rb_delay,d_delay);
   and MGM_G387(MGM_W312,sleep,MGM_W311);
   not MGM_G388(MGM_W313,ssb_delay);
   and MGM_G389(ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W313,MGM_W312);
   not MGM_G390(MGM_W314,d_delay);
   and MGM_G391(MGM_W315,rb_delay,MGM_W314);
   not MGM_G392(MGM_W316,si_delay);
   and MGM_G393(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G394(MGM_W318,ssb_delay);
   and MGM_G395(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G396(MGM_W319,d_delay);
   and MGM_G397(MGM_W320,rb_delay,MGM_W319);
   not MGM_G398(MGM_W321,si_delay);
   and MGM_G399(MGM_W322,MGM_W321,MGM_W320);
   and MGM_G400(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W322);
   not MGM_G401(MGM_W323,d_delay);
   and MGM_G402(MGM_W324,rb_delay,MGM_W323);
   and MGM_G403(MGM_W325,si_delay,MGM_W324);
   not MGM_G404(MGM_W326,ssb_delay);
   and MGM_G405(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W326,MGM_W325);
   not MGM_G406(MGM_W327,d_delay);
   and MGM_G407(MGM_W328,rb_delay,MGM_W327);
   and MGM_G408(MGM_W329,si_delay,MGM_W328);
   and MGM_G409(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W329);
   and MGM_G410(MGM_W330,rb_delay,d_delay);
   not MGM_G411(MGM_W331,si_delay);
   and MGM_G412(MGM_W332,MGM_W331,MGM_W330);
   not MGM_G413(MGM_W333,ssb_delay);
   and MGM_G414(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W333,MGM_W332);
   and MGM_G415(MGM_W334,rb_delay,d_delay);
   not MGM_G416(MGM_W335,si_delay);
   and MGM_G417(MGM_W336,MGM_W335,MGM_W334);
   and MGM_G418(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W336);
   and MGM_G419(MGM_W337,rb_delay,d_delay);
   and MGM_G420(MGM_W338,si_delay,MGM_W337);
   not MGM_G421(MGM_W339,ssb_delay);
   and MGM_G422(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W339,MGM_W338);
   and MGM_G423(MGM_W340,rb_delay,d_delay);
   and MGM_G424(MGM_W341,si_delay,MGM_W340);
   and MGM_G425(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G426(MGM_W342,d_delay);
   and MGM_G427(MGM_W343,rb_delay,MGM_W342);
   and MGM_G428(MGM_W344,si_delay,MGM_W343);
   not MGM_G429(MGM_W345,sleep);
   and MGM_G430(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep,MGM_W345,MGM_W344);
   not MGM_G431(MGM_W346,d_delay);
   and MGM_G432(MGM_W347,rb_delay,MGM_W346);
   and MGM_G433(MGM_W348,si_delay,MGM_W347);
   and MGM_G434(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep,sleep,MGM_W348);
   and MGM_G435(MGM_W349,rb_delay,d_delay);
   not MGM_G436(MGM_W350,si_delay);
   and MGM_G437(MGM_W351,MGM_W350,MGM_W349);
   not MGM_G438(MGM_W352,sleep);
   and MGM_G439(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W352,MGM_W351);
   and MGM_G440(MGM_W353,rb_delay,d_delay);
   not MGM_G441(MGM_W354,si_delay);
   and MGM_G442(MGM_W355,MGM_W354,MGM_W353);
   and MGM_G443(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W355);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr03ad1d12x5( clk, d, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention RPFF with async active low reset
// 
// 
// always @ (clk or d or rb or si or ssb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr03ad_delay o =  IQ2;
// assign `fvzr03ad_delay so =  IQ2;
// 

   input clk, d, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr03ad_delay o_random_init = o_tmp ;
      assign `fvzr03ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr03ad_func i0sfvzr03ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G222(MGM_W178,d_delay);
   and MGM_G223(MGM_W179,rb_delay,MGM_W178);
   not MGM_G224(MGM_W180,si_delay);
   and MGM_G225(MGM_W181,MGM_W180,MGM_W179);
   not MGM_G226(MGM_W182,sleep);
   and MGM_G227(MGM_W183,MGM_W182,MGM_W181);
   not MGM_G228(MGM_W184,ssb_delay);
   and MGM_G229(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W184,MGM_W183);
   not MGM_G230(MGM_W185,d_delay);
   and MGM_G231(MGM_W186,rb_delay,MGM_W185);
   not MGM_G232(MGM_W187,si_delay);
   and MGM_G233(MGM_W188,MGM_W187,MGM_W186);
   not MGM_G234(MGM_W189,sleep);
   and MGM_G235(MGM_W190,MGM_W189,MGM_W188);
   and MGM_G236(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W190);
   not MGM_G237(MGM_W191,d_delay);
   and MGM_G238(MGM_W192,rb_delay,MGM_W191);
   not MGM_G239(MGM_W193,si_delay);
   and MGM_G240(MGM_W194,MGM_W193,MGM_W192);
   and MGM_G241(MGM_W195,sleep,MGM_W194);
   not MGM_G242(MGM_W196,ssb_delay);
   and MGM_G243(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W196,MGM_W195);
   not MGM_G244(MGM_W197,d_delay);
   and MGM_G245(MGM_W198,rb_delay,MGM_W197);
   not MGM_G246(MGM_W199,si_delay);
   and MGM_G247(MGM_W200,MGM_W199,MGM_W198);
   and MGM_G248(MGM_W201,sleep,MGM_W200);
   and MGM_G249(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W201);
   not MGM_G250(MGM_W202,d_delay);
   and MGM_G251(MGM_W203,rb_delay,MGM_W202);
   and MGM_G252(MGM_W204,si_delay,MGM_W203);
   not MGM_G253(MGM_W205,sleep);
   and MGM_G254(MGM_W206,MGM_W205,MGM_W204);
   not MGM_G255(MGM_W207,ssb_delay);
   and MGM_G256(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W207,MGM_W206);
   not MGM_G257(MGM_W208,d_delay);
   and MGM_G258(MGM_W209,rb_delay,MGM_W208);
   and MGM_G259(MGM_W210,si_delay,MGM_W209);
   not MGM_G260(MGM_W211,sleep);
   and MGM_G261(MGM_W212,MGM_W211,MGM_W210);
   and MGM_G262(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W212);
   not MGM_G263(MGM_W213,d_delay);
   and MGM_G264(MGM_W214,rb_delay,MGM_W213);
   and MGM_G265(MGM_W215,si_delay,MGM_W214);
   and MGM_G266(MGM_W216,sleep,MGM_W215);
   not MGM_G267(MGM_W217,ssb_delay);
   and MGM_G268(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W217,MGM_W216);
   not MGM_G269(MGM_W218,d_delay);
   and MGM_G270(MGM_W219,rb_delay,MGM_W218);
   and MGM_G271(MGM_W220,si_delay,MGM_W219);
   and MGM_G272(MGM_W221,sleep,MGM_W220);
   and MGM_G273(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W221);
   and MGM_G274(MGM_W222,rb_delay,d_delay);
   not MGM_G275(MGM_W223,si_delay);
   and MGM_G276(MGM_W224,MGM_W223,MGM_W222);
   not MGM_G277(MGM_W225,sleep);
   and MGM_G278(MGM_W226,MGM_W225,MGM_W224);
   not MGM_G279(MGM_W227,ssb_delay);
   and MGM_G280(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W227,MGM_W226);
   and MGM_G281(MGM_W228,rb_delay,d_delay);
   not MGM_G282(MGM_W229,si_delay);
   and MGM_G283(MGM_W230,MGM_W229,MGM_W228);
   not MGM_G284(MGM_W231,sleep);
   and MGM_G285(MGM_W232,MGM_W231,MGM_W230);
   and MGM_G286(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W232);
   and MGM_G287(MGM_W233,rb_delay,d_delay);
   not MGM_G288(MGM_W234,si_delay);
   and MGM_G289(MGM_W235,MGM_W234,MGM_W233);
   and MGM_G290(MGM_W236,sleep,MGM_W235);
   not MGM_G291(MGM_W237,ssb_delay);
   and MGM_G292(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W237,MGM_W236);
   and MGM_G293(MGM_W238,rb_delay,d_delay);
   not MGM_G294(MGM_W239,si_delay);
   and MGM_G295(MGM_W240,MGM_W239,MGM_W238);
   and MGM_G296(MGM_W241,sleep,MGM_W240);
   and MGM_G297(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W241);
   and MGM_G298(MGM_W242,rb_delay,d_delay);
   and MGM_G299(MGM_W243,si_delay,MGM_W242);
   not MGM_G300(MGM_W244,sleep);
   and MGM_G301(MGM_W245,MGM_W244,MGM_W243);
   not MGM_G302(MGM_W246,ssb_delay);
   and MGM_G303(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W246,MGM_W245);
   and MGM_G304(MGM_W247,rb_delay,d_delay);
   and MGM_G305(MGM_W248,si_delay,MGM_W247);
   not MGM_G306(MGM_W249,sleep);
   and MGM_G307(MGM_W250,MGM_W249,MGM_W248);
   and MGM_G308(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W250);
   and MGM_G309(MGM_W251,rb_delay,d_delay);
   and MGM_G310(MGM_W252,si_delay,MGM_W251);
   and MGM_G311(MGM_W253,sleep,MGM_W252);
   not MGM_G312(MGM_W254,ssb_delay);
   and MGM_G313(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W254,MGM_W253);
   and MGM_G314(MGM_W255,rb_delay,d_delay);
   and MGM_G315(MGM_W256,si_delay,MGM_W255);
   and MGM_G316(MGM_W257,sleep,MGM_W256);
   and MGM_G317(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W257);
   not MGM_G318(MGM_W258,si_delay);
   and MGM_G319(MGM_W259,MGM_W258,rb_delay);
   not MGM_G320(MGM_W260,sleep);
   and MGM_G321(MGM_W261,MGM_W260,MGM_W259);
   and MGM_G322(ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W261);
   not MGM_G323(MGM_W262,si_delay);
   and MGM_G324(MGM_W263,MGM_W262,rb_delay);
   and MGM_G325(MGM_W264,sleep,MGM_W263);
   and MGM_G326(ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W264);
   and MGM_G327(MGM_W265,si_delay,rb_delay);
   not MGM_G328(MGM_W266,sleep);
   and MGM_G329(MGM_W267,MGM_W266,MGM_W265);
   and MGM_G330(ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W267);
   and MGM_G331(MGM_W268,si_delay,rb_delay);
   and MGM_G332(MGM_W269,sleep,MGM_W268);
   and MGM_G333(ENABLE_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W269);
   not MGM_G334(MGM_W270,d_delay);
   and MGM_G335(MGM_W271,si_delay,MGM_W270);
   not MGM_G336(MGM_W272,sleep);
   and MGM_G337(MGM_W273,MGM_W272,MGM_W271);
   not MGM_G338(MGM_W274,ssb_delay);
   and MGM_G339(ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W274,MGM_W273);
   not MGM_G340(MGM_W275,d_delay);
   and MGM_G341(MGM_W276,si_delay,MGM_W275);
   and MGM_G342(MGM_W277,sleep,MGM_W276);
   not MGM_G343(MGM_W278,ssb_delay);
   and MGM_G344(ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W278,MGM_W277);
   not MGM_G345(MGM_W279,si_delay);
   and MGM_G346(MGM_W280,MGM_W279,d_delay);
   not MGM_G347(MGM_W281,sleep);
   and MGM_G348(MGM_W282,MGM_W281,MGM_W280);
   and MGM_G349(ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W282);
   not MGM_G350(MGM_W283,si_delay);
   and MGM_G351(MGM_W284,MGM_W283,d_delay);
   and MGM_G352(MGM_W285,sleep,MGM_W284);
   and MGM_G353(ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W285);
   and MGM_G354(MGM_W286,si_delay,d_delay);
   not MGM_G355(MGM_W287,sleep);
   and MGM_G356(MGM_W288,MGM_W287,MGM_W286);
   not MGM_G357(MGM_W289,ssb_delay);
   and MGM_G358(ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W289,MGM_W288);
   and MGM_G359(MGM_W290,si_delay,d_delay);
   not MGM_G360(MGM_W291,sleep);
   and MGM_G361(MGM_W292,MGM_W291,MGM_W290);
   and MGM_G362(ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W292);
   and MGM_G363(MGM_W293,si_delay,d_delay);
   and MGM_G364(MGM_W294,sleep,MGM_W293);
   not MGM_G365(MGM_W295,ssb_delay);
   and MGM_G366(ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb,MGM_W295,MGM_W294);
   and MGM_G367(MGM_W296,si_delay,d_delay);
   and MGM_G368(MGM_W297,sleep,MGM_W296);
   and MGM_G369(ENABLE_d_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W297);
   not MGM_G370(MGM_W298,d_delay);
   and MGM_G371(MGM_W299,rb_delay,MGM_W298);
   not MGM_G372(MGM_W300,sleep);
   and MGM_G373(MGM_W301,MGM_W300,MGM_W299);
   not MGM_G374(MGM_W302,ssb_delay);
   and MGM_G375(ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W302,MGM_W301);
   not MGM_G376(MGM_W303,d_delay);
   and MGM_G377(MGM_W304,rb_delay,MGM_W303);
   and MGM_G378(MGM_W305,sleep,MGM_W304);
   not MGM_G379(MGM_W306,ssb_delay);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W306,MGM_W305);
   and MGM_G381(MGM_W307,rb_delay,d_delay);
   not MGM_G382(MGM_W308,sleep);
   and MGM_G383(MGM_W309,MGM_W308,MGM_W307);
   not MGM_G384(MGM_W310,ssb_delay);
   and MGM_G385(ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W310,MGM_W309);
   and MGM_G386(MGM_W311,rb_delay,d_delay);
   and MGM_G387(MGM_W312,sleep,MGM_W311);
   not MGM_G388(MGM_W313,ssb_delay);
   and MGM_G389(ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W313,MGM_W312);
   not MGM_G390(MGM_W314,d_delay);
   and MGM_G391(MGM_W315,rb_delay,MGM_W314);
   not MGM_G392(MGM_W316,si_delay);
   and MGM_G393(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G394(MGM_W318,ssb_delay);
   and MGM_G395(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G396(MGM_W319,d_delay);
   and MGM_G397(MGM_W320,rb_delay,MGM_W319);
   not MGM_G398(MGM_W321,si_delay);
   and MGM_G399(MGM_W322,MGM_W321,MGM_W320);
   and MGM_G400(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W322);
   not MGM_G401(MGM_W323,d_delay);
   and MGM_G402(MGM_W324,rb_delay,MGM_W323);
   and MGM_G403(MGM_W325,si_delay,MGM_W324);
   not MGM_G404(MGM_W326,ssb_delay);
   and MGM_G405(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W326,MGM_W325);
   not MGM_G406(MGM_W327,d_delay);
   and MGM_G407(MGM_W328,rb_delay,MGM_W327);
   and MGM_G408(MGM_W329,si_delay,MGM_W328);
   and MGM_G409(ENABLE_NOT_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W329);
   and MGM_G410(MGM_W330,rb_delay,d_delay);
   not MGM_G411(MGM_W331,si_delay);
   and MGM_G412(MGM_W332,MGM_W331,MGM_W330);
   not MGM_G413(MGM_W333,ssb_delay);
   and MGM_G414(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W333,MGM_W332);
   and MGM_G415(MGM_W334,rb_delay,d_delay);
   not MGM_G416(MGM_W335,si_delay);
   and MGM_G417(MGM_W336,MGM_W335,MGM_W334);
   and MGM_G418(ENABLE_d_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W336);
   and MGM_G419(MGM_W337,rb_delay,d_delay);
   and MGM_G420(MGM_W338,si_delay,MGM_W337);
   not MGM_G421(MGM_W339,ssb_delay);
   and MGM_G422(ENABLE_d_AND_rb_AND_si_AND_NOT_ssb,MGM_W339,MGM_W338);
   and MGM_G423(MGM_W340,rb_delay,d_delay);
   and MGM_G424(MGM_W341,si_delay,MGM_W340);
   and MGM_G425(ENABLE_d_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G426(MGM_W342,d_delay);
   and MGM_G427(MGM_W343,rb_delay,MGM_W342);
   and MGM_G428(MGM_W344,si_delay,MGM_W343);
   not MGM_G429(MGM_W345,sleep);
   and MGM_G430(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep,MGM_W345,MGM_W344);
   not MGM_G431(MGM_W346,d_delay);
   and MGM_G432(MGM_W347,rb_delay,MGM_W346);
   and MGM_G433(MGM_W348,si_delay,MGM_W347);
   and MGM_G434(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep,sleep,MGM_W348);
   and MGM_G435(MGM_W349,rb_delay,d_delay);
   not MGM_G436(MGM_W350,si_delay);
   and MGM_G437(MGM_W351,MGM_W350,MGM_W349);
   not MGM_G438(MGM_W352,sleep);
   and MGM_G439(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W352,MGM_W351);
   and MGM_G440(MGM_W353,rb_delay,d_delay);
   not MGM_G441(MGM_W354,si_delay);
   and MGM_G442(MGM_W355,MGM_W354,MGM_W353);
   and MGM_G443(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W355);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr0bad1d02x5( clk, d, o, rb, s, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and preset
// 
// 
// always @ (clk or d or rb or s or si or ssb)
// begin
// if ((!rb) && (s))
// begin
// IQ1 <= 1'b0 ;
// end
// else if (s)
// begin
// IQ1 <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or s or sleep)
// begin
// if ((!rb&!sleep) && (s&!sleep))
// begin
// IQ2 <= 1'b0 ;
// end
// else if (s&!sleep)
// begin
// IQ2 <= 1'b1 ;
// end
// else if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr0bad_delay o =  IQ2;
// assign `fvzr0bad_delay so =  IQ2;
// 

   input clk, d, rb, s, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G362(MGM_W310,d_delay);
   and MGM_G363(MGM_W311,rb_delay,MGM_W310);
   not MGM_G364(MGM_W312,s_delay);
   and MGM_G365(MGM_W313,MGM_W312,MGM_W311);
   not MGM_G366(MGM_W314,si_delay);
   and MGM_G367(MGM_W315,MGM_W314,MGM_W313);
   not MGM_G368(MGM_W316,sleep);
   and MGM_G369(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G370(MGM_W318,ssb_delay);
   and MGM_G371(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G372(MGM_W319,d_delay);
   and MGM_G373(MGM_W320,rb_delay,MGM_W319);
   not MGM_G374(MGM_W321,s_delay);
   and MGM_G375(MGM_W322,MGM_W321,MGM_W320);
   not MGM_G376(MGM_W323,si_delay);
   and MGM_G377(MGM_W324,MGM_W323,MGM_W322);
   not MGM_G378(MGM_W325,sleep);
   and MGM_G379(MGM_W326,MGM_W325,MGM_W324);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W326);
   not MGM_G381(MGM_W327,d_delay);
   and MGM_G382(MGM_W328,rb_delay,MGM_W327);
   not MGM_G383(MGM_W329,s_delay);
   and MGM_G384(MGM_W330,MGM_W329,MGM_W328);
   not MGM_G385(MGM_W331,si_delay);
   and MGM_G386(MGM_W332,MGM_W331,MGM_W330);
   and MGM_G387(MGM_W333,sleep,MGM_W332);
   not MGM_G388(MGM_W334,ssb_delay);
   and MGM_G389(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W334,MGM_W333);
   not MGM_G390(MGM_W335,d_delay);
   and MGM_G391(MGM_W336,rb_delay,MGM_W335);
   not MGM_G392(MGM_W337,s_delay);
   and MGM_G393(MGM_W338,MGM_W337,MGM_W336);
   not MGM_G394(MGM_W339,si_delay);
   and MGM_G395(MGM_W340,MGM_W339,MGM_W338);
   and MGM_G396(MGM_W341,sleep,MGM_W340);
   and MGM_G397(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G398(MGM_W342,d_delay);
   and MGM_G399(MGM_W343,rb_delay,MGM_W342);
   not MGM_G400(MGM_W344,s_delay);
   and MGM_G401(MGM_W345,MGM_W344,MGM_W343);
   and MGM_G402(MGM_W346,si_delay,MGM_W345);
   not MGM_G403(MGM_W347,sleep);
   and MGM_G404(MGM_W348,MGM_W347,MGM_W346);
   not MGM_G405(MGM_W349,ssb_delay);
   and MGM_G406(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W349,MGM_W348);
   not MGM_G407(MGM_W350,d_delay);
   and MGM_G408(MGM_W351,rb_delay,MGM_W350);
   not MGM_G409(MGM_W352,s_delay);
   and MGM_G410(MGM_W353,MGM_W352,MGM_W351);
   and MGM_G411(MGM_W354,si_delay,MGM_W353);
   not MGM_G412(MGM_W355,sleep);
   and MGM_G413(MGM_W356,MGM_W355,MGM_W354);
   and MGM_G414(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W356);
   not MGM_G415(MGM_W357,d_delay);
   and MGM_G416(MGM_W358,rb_delay,MGM_W357);
   not MGM_G417(MGM_W359,s_delay);
   and MGM_G418(MGM_W360,MGM_W359,MGM_W358);
   and MGM_G419(MGM_W361,si_delay,MGM_W360);
   and MGM_G420(MGM_W362,sleep,MGM_W361);
   not MGM_G421(MGM_W363,ssb_delay);
   and MGM_G422(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W363,MGM_W362);
   not MGM_G423(MGM_W364,d_delay);
   and MGM_G424(MGM_W365,rb_delay,MGM_W364);
   not MGM_G425(MGM_W366,s_delay);
   and MGM_G426(MGM_W367,MGM_W366,MGM_W365);
   and MGM_G427(MGM_W368,si_delay,MGM_W367);
   and MGM_G428(MGM_W369,sleep,MGM_W368);
   and MGM_G429(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W369);
   and MGM_G430(MGM_W370,rb_delay,d_delay);
   not MGM_G431(MGM_W371,s_delay);
   and MGM_G432(MGM_W372,MGM_W371,MGM_W370);
   not MGM_G433(MGM_W373,si_delay);
   and MGM_G434(MGM_W374,MGM_W373,MGM_W372);
   not MGM_G435(MGM_W375,sleep);
   and MGM_G436(MGM_W376,MGM_W375,MGM_W374);
   not MGM_G437(MGM_W377,ssb_delay);
   and MGM_G438(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W377,MGM_W376);
   and MGM_G439(MGM_W378,rb_delay,d_delay);
   not MGM_G440(MGM_W379,s_delay);
   and MGM_G441(MGM_W380,MGM_W379,MGM_W378);
   not MGM_G442(MGM_W381,si_delay);
   and MGM_G443(MGM_W382,MGM_W381,MGM_W380);
   not MGM_G444(MGM_W383,sleep);
   and MGM_G445(MGM_W384,MGM_W383,MGM_W382);
   and MGM_G446(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W384);
   and MGM_G447(MGM_W385,rb_delay,d_delay);
   not MGM_G448(MGM_W386,s_delay);
   and MGM_G449(MGM_W387,MGM_W386,MGM_W385);
   not MGM_G450(MGM_W388,si_delay);
   and MGM_G451(MGM_W389,MGM_W388,MGM_W387);
   and MGM_G452(MGM_W390,sleep,MGM_W389);
   not MGM_G453(MGM_W391,ssb_delay);
   and MGM_G454(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W391,MGM_W390);
   and MGM_G455(MGM_W392,rb_delay,d_delay);
   not MGM_G456(MGM_W393,s_delay);
   and MGM_G457(MGM_W394,MGM_W393,MGM_W392);
   not MGM_G458(MGM_W395,si_delay);
   and MGM_G459(MGM_W396,MGM_W395,MGM_W394);
   and MGM_G460(MGM_W397,sleep,MGM_W396);
   and MGM_G461(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W397);
   and MGM_G462(MGM_W398,rb_delay,d_delay);
   not MGM_G463(MGM_W399,s_delay);
   and MGM_G464(MGM_W400,MGM_W399,MGM_W398);
   and MGM_G465(MGM_W401,si_delay,MGM_W400);
   not MGM_G466(MGM_W402,sleep);
   and MGM_G467(MGM_W403,MGM_W402,MGM_W401);
   not MGM_G468(MGM_W404,ssb_delay);
   and MGM_G469(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W404,MGM_W403);
   and MGM_G470(MGM_W405,rb_delay,d_delay);
   not MGM_G471(MGM_W406,s_delay);
   and MGM_G472(MGM_W407,MGM_W406,MGM_W405);
   and MGM_G473(MGM_W408,si_delay,MGM_W407);
   not MGM_G474(MGM_W409,sleep);
   and MGM_G475(MGM_W410,MGM_W409,MGM_W408);
   and MGM_G476(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W410);
   and MGM_G477(MGM_W411,rb_delay,d_delay);
   not MGM_G478(MGM_W412,s_delay);
   and MGM_G479(MGM_W413,MGM_W412,MGM_W411);
   and MGM_G480(MGM_W414,si_delay,MGM_W413);
   and MGM_G481(MGM_W415,sleep,MGM_W414);
   not MGM_G482(MGM_W416,ssb_delay);
   and MGM_G483(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W416,MGM_W415);
   and MGM_G484(MGM_W417,rb_delay,d_delay);
   not MGM_G485(MGM_W418,s_delay);
   and MGM_G486(MGM_W419,MGM_W418,MGM_W417);
   and MGM_G487(MGM_W420,si_delay,MGM_W419);
   and MGM_G488(MGM_W421,sleep,MGM_W420);
   and MGM_G489(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W421);
   not MGM_G490(MGM_W422,s_delay);
   and MGM_G491(MGM_W423,MGM_W422,rb_delay);
   not MGM_G492(MGM_W424,si_delay);
   and MGM_G493(MGM_W425,MGM_W424,MGM_W423);
   not MGM_G494(MGM_W426,sleep);
   and MGM_G495(MGM_W427,MGM_W426,MGM_W425);
   and MGM_G496(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W427);
   not MGM_G497(MGM_W428,s_delay);
   and MGM_G498(MGM_W429,MGM_W428,rb_delay);
   not MGM_G499(MGM_W430,si_delay);
   and MGM_G500(MGM_W431,MGM_W430,MGM_W429);
   and MGM_G501(MGM_W432,sleep,MGM_W431);
   and MGM_G502(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W432);
   not MGM_G503(MGM_W433,s_delay);
   and MGM_G504(MGM_W434,MGM_W433,rb_delay);
   and MGM_G505(MGM_W435,si_delay,MGM_W434);
   not MGM_G506(MGM_W436,sleep);
   and MGM_G507(MGM_W437,MGM_W436,MGM_W435);
   and MGM_G508(ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W437);
   not MGM_G509(MGM_W438,s_delay);
   and MGM_G510(MGM_W439,MGM_W438,rb_delay);
   and MGM_G511(MGM_W440,si_delay,MGM_W439);
   and MGM_G512(MGM_W441,sleep,MGM_W440);
   and MGM_G513(ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W441);
   not MGM_G514(MGM_W442,d_delay);
   not MGM_G515(MGM_W443,s_delay);
   and MGM_G516(MGM_W444,MGM_W443,MGM_W442);
   and MGM_G517(MGM_W445,si_delay,MGM_W444);
   not MGM_G518(MGM_W446,sleep);
   and MGM_G519(MGM_W447,MGM_W446,MGM_W445);
   not MGM_G520(MGM_W448,ssb_delay);
   and MGM_G521(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W448,MGM_W447);
   not MGM_G522(MGM_W449,d_delay);
   not MGM_G523(MGM_W450,s_delay);
   and MGM_G524(MGM_W451,MGM_W450,MGM_W449);
   and MGM_G525(MGM_W452,si_delay,MGM_W451);
   and MGM_G526(MGM_W453,sleep,MGM_W452);
   not MGM_G527(MGM_W454,ssb_delay);
   and MGM_G528(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W454,MGM_W453);
   not MGM_G529(MGM_W455,s_delay);
   and MGM_G530(MGM_W456,MGM_W455,d_delay);
   not MGM_G531(MGM_W457,si_delay);
   and MGM_G532(MGM_W458,MGM_W457,MGM_W456);
   not MGM_G533(MGM_W459,sleep);
   and MGM_G534(MGM_W460,MGM_W459,MGM_W458);
   and MGM_G535(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W460);
   not MGM_G536(MGM_W461,s_delay);
   and MGM_G537(MGM_W462,MGM_W461,d_delay);
   not MGM_G538(MGM_W463,si_delay);
   and MGM_G539(MGM_W464,MGM_W463,MGM_W462);
   and MGM_G540(MGM_W465,sleep,MGM_W464);
   and MGM_G541(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W465);
   not MGM_G542(MGM_W466,s_delay);
   and MGM_G543(MGM_W467,MGM_W466,d_delay);
   and MGM_G544(MGM_W468,si_delay,MGM_W467);
   not MGM_G545(MGM_W469,sleep);
   and MGM_G546(MGM_W470,MGM_W469,MGM_W468);
   not MGM_G547(MGM_W471,ssb_delay);
   and MGM_G548(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W471,MGM_W470);
   not MGM_G549(MGM_W472,s_delay);
   and MGM_G550(MGM_W473,MGM_W472,d_delay);
   and MGM_G551(MGM_W474,si_delay,MGM_W473);
   not MGM_G552(MGM_W475,sleep);
   and MGM_G553(MGM_W476,MGM_W475,MGM_W474);
   and MGM_G554(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W476);
   not MGM_G555(MGM_W477,s_delay);
   and MGM_G556(MGM_W478,MGM_W477,d_delay);
   and MGM_G557(MGM_W479,si_delay,MGM_W478);
   and MGM_G558(MGM_W480,sleep,MGM_W479);
   not MGM_G559(MGM_W481,ssb_delay);
   and MGM_G560(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W481,MGM_W480);
   not MGM_G561(MGM_W482,s_delay);
   and MGM_G562(MGM_W483,MGM_W482,d_delay);
   and MGM_G563(MGM_W484,si_delay,MGM_W483);
   and MGM_G564(MGM_W485,sleep,MGM_W484);
   and MGM_G565(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W485);
   not MGM_G566(MGM_W486,d_delay);
   and MGM_G567(MGM_W487,rb_delay,MGM_W486);
   not MGM_G568(MGM_W488,si_delay);
   and MGM_G569(MGM_W489,MGM_W488,MGM_W487);
   not MGM_G570(MGM_W490,sleep);
   and MGM_G571(MGM_W491,MGM_W490,MGM_W489);
   not MGM_G572(MGM_W492,ssb_delay);
   and MGM_G573(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W492,MGM_W491);
   not MGM_G574(MGM_W493,d_delay);
   and MGM_G575(MGM_W494,rb_delay,MGM_W493);
   not MGM_G576(MGM_W495,si_delay);
   and MGM_G577(MGM_W496,MGM_W495,MGM_W494);
   not MGM_G578(MGM_W497,sleep);
   and MGM_G579(MGM_W498,MGM_W497,MGM_W496);
   and MGM_G580(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W498);
   not MGM_G581(MGM_W499,d_delay);
   and MGM_G582(MGM_W500,rb_delay,MGM_W499);
   not MGM_G583(MGM_W501,si_delay);
   and MGM_G584(MGM_W502,MGM_W501,MGM_W500);
   and MGM_G585(MGM_W503,sleep,MGM_W502);
   not MGM_G586(MGM_W504,ssb_delay);
   and MGM_G587(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W504,MGM_W503);
   not MGM_G588(MGM_W505,d_delay);
   and MGM_G589(MGM_W506,rb_delay,MGM_W505);
   not MGM_G590(MGM_W507,si_delay);
   and MGM_G591(MGM_W508,MGM_W507,MGM_W506);
   and MGM_G592(MGM_W509,sleep,MGM_W508);
   and MGM_G593(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W509);
   not MGM_G594(MGM_W510,d_delay);
   and MGM_G595(MGM_W511,rb_delay,MGM_W510);
   and MGM_G596(MGM_W512,si_delay,MGM_W511);
   not MGM_G597(MGM_W513,sleep);
   and MGM_G598(MGM_W514,MGM_W513,MGM_W512);
   and MGM_G599(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W514);
   not MGM_G600(MGM_W515,d_delay);
   and MGM_G601(MGM_W516,rb_delay,MGM_W515);
   and MGM_G602(MGM_W517,si_delay,MGM_W516);
   and MGM_G603(MGM_W518,sleep,MGM_W517);
   and MGM_G604(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W518);
   and MGM_G605(MGM_W519,rb_delay,d_delay);
   not MGM_G606(MGM_W520,si_delay);
   and MGM_G607(MGM_W521,MGM_W520,MGM_W519);
   not MGM_G608(MGM_W522,sleep);
   and MGM_G609(MGM_W523,MGM_W522,MGM_W521);
   not MGM_G610(MGM_W524,ssb_delay);
   and MGM_G611(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W524,MGM_W523);
   and MGM_G612(MGM_W525,rb_delay,d_delay);
   not MGM_G613(MGM_W526,si_delay);
   and MGM_G614(MGM_W527,MGM_W526,MGM_W525);
   and MGM_G615(MGM_W528,sleep,MGM_W527);
   not MGM_G616(MGM_W529,ssb_delay);
   and MGM_G617(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G618(MGM_W530,d_delay);
   and MGM_G619(MGM_W531,rb_delay,MGM_W530);
   not MGM_G620(MGM_W532,s_delay);
   and MGM_G621(MGM_W533,MGM_W532,MGM_W531);
   not MGM_G622(MGM_W534,sleep);
   and MGM_G623(MGM_W535,MGM_W534,MGM_W533);
   not MGM_G624(MGM_W536,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G626(MGM_W537,d_delay);
   and MGM_G627(MGM_W538,rb_delay,MGM_W537);
   not MGM_G628(MGM_W539,s_delay);
   and MGM_G629(MGM_W540,MGM_W539,MGM_W538);
   and MGM_G630(MGM_W541,sleep,MGM_W540);
   not MGM_G631(MGM_W542,ssb_delay);
   and MGM_G632(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W542,MGM_W541);
   and MGM_G633(MGM_W543,rb_delay,d_delay);
   not MGM_G634(MGM_W544,s_delay);
   and MGM_G635(MGM_W545,MGM_W544,MGM_W543);
   not MGM_G636(MGM_W546,sleep);
   and MGM_G637(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G638(MGM_W548,ssb_delay);
   and MGM_G639(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W548,MGM_W547);
   and MGM_G640(MGM_W549,rb_delay,d_delay);
   not MGM_G641(MGM_W550,s_delay);
   and MGM_G642(MGM_W551,MGM_W550,MGM_W549);
   and MGM_G643(MGM_W552,sleep,MGM_W551);
   not MGM_G644(MGM_W553,ssb_delay);
   and MGM_G645(ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W553,MGM_W552);
   not MGM_G646(MGM_W554,d_delay);
   and MGM_G647(MGM_W555,rb_delay,MGM_W554);
   not MGM_G648(MGM_W556,s_delay);
   and MGM_G649(MGM_W557,MGM_W556,MGM_W555);
   not MGM_G650(MGM_W558,si_delay);
   and MGM_G651(MGM_W559,MGM_W558,MGM_W557);
   not MGM_G652(MGM_W560,ssb_delay);
   and MGM_G653(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W560,MGM_W559);
   not MGM_G654(MGM_W561,d_delay);
   and MGM_G655(MGM_W562,rb_delay,MGM_W561);
   not MGM_G656(MGM_W563,s_delay);
   and MGM_G657(MGM_W564,MGM_W563,MGM_W562);
   not MGM_G658(MGM_W565,si_delay);
   and MGM_G659(MGM_W566,MGM_W565,MGM_W564);
   and MGM_G660(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W566);
   not MGM_G661(MGM_W567,d_delay);
   and MGM_G662(MGM_W568,rb_delay,MGM_W567);
   not MGM_G663(MGM_W569,s_delay);
   and MGM_G664(MGM_W570,MGM_W569,MGM_W568);
   and MGM_G665(MGM_W571,si_delay,MGM_W570);
   not MGM_G666(MGM_W572,ssb_delay);
   and MGM_G667(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W572,MGM_W571);
   not MGM_G668(MGM_W573,d_delay);
   and MGM_G669(MGM_W574,rb_delay,MGM_W573);
   not MGM_G670(MGM_W575,s_delay);
   and MGM_G671(MGM_W576,MGM_W575,MGM_W574);
   and MGM_G672(MGM_W577,si_delay,MGM_W576);
   and MGM_G673(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W577);
   and MGM_G674(MGM_W578,rb_delay,d_delay);
   not MGM_G675(MGM_W579,s_delay);
   and MGM_G676(MGM_W580,MGM_W579,MGM_W578);
   not MGM_G677(MGM_W581,si_delay);
   and MGM_G678(MGM_W582,MGM_W581,MGM_W580);
   not MGM_G679(MGM_W583,ssb_delay);
   and MGM_G680(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W583,MGM_W582);
   and MGM_G681(MGM_W584,rb_delay,d_delay);
   not MGM_G682(MGM_W585,s_delay);
   and MGM_G683(MGM_W586,MGM_W585,MGM_W584);
   not MGM_G684(MGM_W587,si_delay);
   and MGM_G685(MGM_W588,MGM_W587,MGM_W586);
   and MGM_G686(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W588);
   and MGM_G687(MGM_W589,rb_delay,d_delay);
   not MGM_G688(MGM_W590,s_delay);
   and MGM_G689(MGM_W591,MGM_W590,MGM_W589);
   and MGM_G690(MGM_W592,si_delay,MGM_W591);
   not MGM_G691(MGM_W593,ssb_delay);
   and MGM_G692(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W593,MGM_W592);
   and MGM_G693(MGM_W594,rb_delay,d_delay);
   not MGM_G694(MGM_W595,s_delay);
   and MGM_G695(MGM_W596,MGM_W595,MGM_W594);
   and MGM_G696(MGM_W597,si_delay,MGM_W596);
   and MGM_G697(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W597);
   not MGM_G698(MGM_W598,d_delay);
   and MGM_G699(MGM_W599,rb_delay,MGM_W598);
   not MGM_G700(MGM_W600,s_delay);
   and MGM_G701(MGM_W601,MGM_W600,MGM_W599);
   and MGM_G702(MGM_W602,si_delay,MGM_W601);
   not MGM_G703(MGM_W603,sleep);
   and MGM_G704(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep,MGM_W603,MGM_W602);
   not MGM_G705(MGM_W604,d_delay);
   and MGM_G706(MGM_W605,rb_delay,MGM_W604);
   not MGM_G707(MGM_W606,s_delay);
   and MGM_G708(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G709(MGM_W608,si_delay,MGM_W607);
   and MGM_G710(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep,sleep,MGM_W608);
   and MGM_G711(MGM_W609,rb_delay,d_delay);
   not MGM_G712(MGM_W610,s_delay);
   and MGM_G713(MGM_W611,MGM_W610,MGM_W609);
   not MGM_G714(MGM_W612,si_delay);
   and MGM_G715(MGM_W613,MGM_W612,MGM_W611);
   not MGM_G716(MGM_W614,sleep);
   and MGM_G717(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep,MGM_W614,MGM_W613);
   and MGM_G718(MGM_W615,rb_delay,d_delay);
   not MGM_G719(MGM_W616,s_delay);
   and MGM_G720(MGM_W617,MGM_W616,MGM_W615);
   not MGM_G721(MGM_W618,si_delay);
   and MGM_G722(MGM_W619,MGM_W618,MGM_W617);
   and MGM_G723(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep,sleep,MGM_W619);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr0bad1d03x5( clk, d, o, rb, s, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and preset
// 
// 
// always @ (clk or d or rb or s or si or ssb)
// begin
// if ((!rb) && (s))
// begin
// IQ1 <= 1'b0 ;
// end
// else if (s)
// begin
// IQ1 <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or s or sleep)
// begin
// if ((!rb&!sleep) && (s&!sleep))
// begin
// IQ2 <= 1'b0 ;
// end
// else if (s&!sleep)
// begin
// IQ2 <= 1'b1 ;
// end
// else if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr0bad_delay o =  IQ2;
// assign `fvzr0bad_delay so =  IQ2;
// 

   input clk, d, rb, s, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G362(MGM_W310,d_delay);
   and MGM_G363(MGM_W311,rb_delay,MGM_W310);
   not MGM_G364(MGM_W312,s_delay);
   and MGM_G365(MGM_W313,MGM_W312,MGM_W311);
   not MGM_G366(MGM_W314,si_delay);
   and MGM_G367(MGM_W315,MGM_W314,MGM_W313);
   not MGM_G368(MGM_W316,sleep);
   and MGM_G369(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G370(MGM_W318,ssb_delay);
   and MGM_G371(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G372(MGM_W319,d_delay);
   and MGM_G373(MGM_W320,rb_delay,MGM_W319);
   not MGM_G374(MGM_W321,s_delay);
   and MGM_G375(MGM_W322,MGM_W321,MGM_W320);
   not MGM_G376(MGM_W323,si_delay);
   and MGM_G377(MGM_W324,MGM_W323,MGM_W322);
   not MGM_G378(MGM_W325,sleep);
   and MGM_G379(MGM_W326,MGM_W325,MGM_W324);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W326);
   not MGM_G381(MGM_W327,d_delay);
   and MGM_G382(MGM_W328,rb_delay,MGM_W327);
   not MGM_G383(MGM_W329,s_delay);
   and MGM_G384(MGM_W330,MGM_W329,MGM_W328);
   not MGM_G385(MGM_W331,si_delay);
   and MGM_G386(MGM_W332,MGM_W331,MGM_W330);
   and MGM_G387(MGM_W333,sleep,MGM_W332);
   not MGM_G388(MGM_W334,ssb_delay);
   and MGM_G389(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W334,MGM_W333);
   not MGM_G390(MGM_W335,d_delay);
   and MGM_G391(MGM_W336,rb_delay,MGM_W335);
   not MGM_G392(MGM_W337,s_delay);
   and MGM_G393(MGM_W338,MGM_W337,MGM_W336);
   not MGM_G394(MGM_W339,si_delay);
   and MGM_G395(MGM_W340,MGM_W339,MGM_W338);
   and MGM_G396(MGM_W341,sleep,MGM_W340);
   and MGM_G397(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G398(MGM_W342,d_delay);
   and MGM_G399(MGM_W343,rb_delay,MGM_W342);
   not MGM_G400(MGM_W344,s_delay);
   and MGM_G401(MGM_W345,MGM_W344,MGM_W343);
   and MGM_G402(MGM_W346,si_delay,MGM_W345);
   not MGM_G403(MGM_W347,sleep);
   and MGM_G404(MGM_W348,MGM_W347,MGM_W346);
   not MGM_G405(MGM_W349,ssb_delay);
   and MGM_G406(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W349,MGM_W348);
   not MGM_G407(MGM_W350,d_delay);
   and MGM_G408(MGM_W351,rb_delay,MGM_W350);
   not MGM_G409(MGM_W352,s_delay);
   and MGM_G410(MGM_W353,MGM_W352,MGM_W351);
   and MGM_G411(MGM_W354,si_delay,MGM_W353);
   not MGM_G412(MGM_W355,sleep);
   and MGM_G413(MGM_W356,MGM_W355,MGM_W354);
   and MGM_G414(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W356);
   not MGM_G415(MGM_W357,d_delay);
   and MGM_G416(MGM_W358,rb_delay,MGM_W357);
   not MGM_G417(MGM_W359,s_delay);
   and MGM_G418(MGM_W360,MGM_W359,MGM_W358);
   and MGM_G419(MGM_W361,si_delay,MGM_W360);
   and MGM_G420(MGM_W362,sleep,MGM_W361);
   not MGM_G421(MGM_W363,ssb_delay);
   and MGM_G422(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W363,MGM_W362);
   not MGM_G423(MGM_W364,d_delay);
   and MGM_G424(MGM_W365,rb_delay,MGM_W364);
   not MGM_G425(MGM_W366,s_delay);
   and MGM_G426(MGM_W367,MGM_W366,MGM_W365);
   and MGM_G427(MGM_W368,si_delay,MGM_W367);
   and MGM_G428(MGM_W369,sleep,MGM_W368);
   and MGM_G429(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W369);
   and MGM_G430(MGM_W370,rb_delay,d_delay);
   not MGM_G431(MGM_W371,s_delay);
   and MGM_G432(MGM_W372,MGM_W371,MGM_W370);
   not MGM_G433(MGM_W373,si_delay);
   and MGM_G434(MGM_W374,MGM_W373,MGM_W372);
   not MGM_G435(MGM_W375,sleep);
   and MGM_G436(MGM_W376,MGM_W375,MGM_W374);
   not MGM_G437(MGM_W377,ssb_delay);
   and MGM_G438(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W377,MGM_W376);
   and MGM_G439(MGM_W378,rb_delay,d_delay);
   not MGM_G440(MGM_W379,s_delay);
   and MGM_G441(MGM_W380,MGM_W379,MGM_W378);
   not MGM_G442(MGM_W381,si_delay);
   and MGM_G443(MGM_W382,MGM_W381,MGM_W380);
   not MGM_G444(MGM_W383,sleep);
   and MGM_G445(MGM_W384,MGM_W383,MGM_W382);
   and MGM_G446(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W384);
   and MGM_G447(MGM_W385,rb_delay,d_delay);
   not MGM_G448(MGM_W386,s_delay);
   and MGM_G449(MGM_W387,MGM_W386,MGM_W385);
   not MGM_G450(MGM_W388,si_delay);
   and MGM_G451(MGM_W389,MGM_W388,MGM_W387);
   and MGM_G452(MGM_W390,sleep,MGM_W389);
   not MGM_G453(MGM_W391,ssb_delay);
   and MGM_G454(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W391,MGM_W390);
   and MGM_G455(MGM_W392,rb_delay,d_delay);
   not MGM_G456(MGM_W393,s_delay);
   and MGM_G457(MGM_W394,MGM_W393,MGM_W392);
   not MGM_G458(MGM_W395,si_delay);
   and MGM_G459(MGM_W396,MGM_W395,MGM_W394);
   and MGM_G460(MGM_W397,sleep,MGM_W396);
   and MGM_G461(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W397);
   and MGM_G462(MGM_W398,rb_delay,d_delay);
   not MGM_G463(MGM_W399,s_delay);
   and MGM_G464(MGM_W400,MGM_W399,MGM_W398);
   and MGM_G465(MGM_W401,si_delay,MGM_W400);
   not MGM_G466(MGM_W402,sleep);
   and MGM_G467(MGM_W403,MGM_W402,MGM_W401);
   not MGM_G468(MGM_W404,ssb_delay);
   and MGM_G469(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W404,MGM_W403);
   and MGM_G470(MGM_W405,rb_delay,d_delay);
   not MGM_G471(MGM_W406,s_delay);
   and MGM_G472(MGM_W407,MGM_W406,MGM_W405);
   and MGM_G473(MGM_W408,si_delay,MGM_W407);
   not MGM_G474(MGM_W409,sleep);
   and MGM_G475(MGM_W410,MGM_W409,MGM_W408);
   and MGM_G476(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W410);
   and MGM_G477(MGM_W411,rb_delay,d_delay);
   not MGM_G478(MGM_W412,s_delay);
   and MGM_G479(MGM_W413,MGM_W412,MGM_W411);
   and MGM_G480(MGM_W414,si_delay,MGM_W413);
   and MGM_G481(MGM_W415,sleep,MGM_W414);
   not MGM_G482(MGM_W416,ssb_delay);
   and MGM_G483(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W416,MGM_W415);
   and MGM_G484(MGM_W417,rb_delay,d_delay);
   not MGM_G485(MGM_W418,s_delay);
   and MGM_G486(MGM_W419,MGM_W418,MGM_W417);
   and MGM_G487(MGM_W420,si_delay,MGM_W419);
   and MGM_G488(MGM_W421,sleep,MGM_W420);
   and MGM_G489(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W421);
   not MGM_G490(MGM_W422,s_delay);
   and MGM_G491(MGM_W423,MGM_W422,rb_delay);
   not MGM_G492(MGM_W424,si_delay);
   and MGM_G493(MGM_W425,MGM_W424,MGM_W423);
   not MGM_G494(MGM_W426,sleep);
   and MGM_G495(MGM_W427,MGM_W426,MGM_W425);
   and MGM_G496(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W427);
   not MGM_G497(MGM_W428,s_delay);
   and MGM_G498(MGM_W429,MGM_W428,rb_delay);
   not MGM_G499(MGM_W430,si_delay);
   and MGM_G500(MGM_W431,MGM_W430,MGM_W429);
   and MGM_G501(MGM_W432,sleep,MGM_W431);
   and MGM_G502(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W432);
   not MGM_G503(MGM_W433,s_delay);
   and MGM_G504(MGM_W434,MGM_W433,rb_delay);
   and MGM_G505(MGM_W435,si_delay,MGM_W434);
   not MGM_G506(MGM_W436,sleep);
   and MGM_G507(MGM_W437,MGM_W436,MGM_W435);
   and MGM_G508(ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W437);
   not MGM_G509(MGM_W438,s_delay);
   and MGM_G510(MGM_W439,MGM_W438,rb_delay);
   and MGM_G511(MGM_W440,si_delay,MGM_W439);
   and MGM_G512(MGM_W441,sleep,MGM_W440);
   and MGM_G513(ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W441);
   not MGM_G514(MGM_W442,d_delay);
   not MGM_G515(MGM_W443,s_delay);
   and MGM_G516(MGM_W444,MGM_W443,MGM_W442);
   and MGM_G517(MGM_W445,si_delay,MGM_W444);
   not MGM_G518(MGM_W446,sleep);
   and MGM_G519(MGM_W447,MGM_W446,MGM_W445);
   not MGM_G520(MGM_W448,ssb_delay);
   and MGM_G521(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W448,MGM_W447);
   not MGM_G522(MGM_W449,d_delay);
   not MGM_G523(MGM_W450,s_delay);
   and MGM_G524(MGM_W451,MGM_W450,MGM_W449);
   and MGM_G525(MGM_W452,si_delay,MGM_W451);
   and MGM_G526(MGM_W453,sleep,MGM_W452);
   not MGM_G527(MGM_W454,ssb_delay);
   and MGM_G528(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W454,MGM_W453);
   not MGM_G529(MGM_W455,s_delay);
   and MGM_G530(MGM_W456,MGM_W455,d_delay);
   not MGM_G531(MGM_W457,si_delay);
   and MGM_G532(MGM_W458,MGM_W457,MGM_W456);
   not MGM_G533(MGM_W459,sleep);
   and MGM_G534(MGM_W460,MGM_W459,MGM_W458);
   and MGM_G535(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W460);
   not MGM_G536(MGM_W461,s_delay);
   and MGM_G537(MGM_W462,MGM_W461,d_delay);
   not MGM_G538(MGM_W463,si_delay);
   and MGM_G539(MGM_W464,MGM_W463,MGM_W462);
   and MGM_G540(MGM_W465,sleep,MGM_W464);
   and MGM_G541(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W465);
   not MGM_G542(MGM_W466,s_delay);
   and MGM_G543(MGM_W467,MGM_W466,d_delay);
   and MGM_G544(MGM_W468,si_delay,MGM_W467);
   not MGM_G545(MGM_W469,sleep);
   and MGM_G546(MGM_W470,MGM_W469,MGM_W468);
   not MGM_G547(MGM_W471,ssb_delay);
   and MGM_G548(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W471,MGM_W470);
   not MGM_G549(MGM_W472,s_delay);
   and MGM_G550(MGM_W473,MGM_W472,d_delay);
   and MGM_G551(MGM_W474,si_delay,MGM_W473);
   not MGM_G552(MGM_W475,sleep);
   and MGM_G553(MGM_W476,MGM_W475,MGM_W474);
   and MGM_G554(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W476);
   not MGM_G555(MGM_W477,s_delay);
   and MGM_G556(MGM_W478,MGM_W477,d_delay);
   and MGM_G557(MGM_W479,si_delay,MGM_W478);
   and MGM_G558(MGM_W480,sleep,MGM_W479);
   not MGM_G559(MGM_W481,ssb_delay);
   and MGM_G560(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W481,MGM_W480);
   not MGM_G561(MGM_W482,s_delay);
   and MGM_G562(MGM_W483,MGM_W482,d_delay);
   and MGM_G563(MGM_W484,si_delay,MGM_W483);
   and MGM_G564(MGM_W485,sleep,MGM_W484);
   and MGM_G565(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W485);
   not MGM_G566(MGM_W486,d_delay);
   and MGM_G567(MGM_W487,rb_delay,MGM_W486);
   not MGM_G568(MGM_W488,si_delay);
   and MGM_G569(MGM_W489,MGM_W488,MGM_W487);
   not MGM_G570(MGM_W490,sleep);
   and MGM_G571(MGM_W491,MGM_W490,MGM_W489);
   not MGM_G572(MGM_W492,ssb_delay);
   and MGM_G573(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W492,MGM_W491);
   not MGM_G574(MGM_W493,d_delay);
   and MGM_G575(MGM_W494,rb_delay,MGM_W493);
   not MGM_G576(MGM_W495,si_delay);
   and MGM_G577(MGM_W496,MGM_W495,MGM_W494);
   not MGM_G578(MGM_W497,sleep);
   and MGM_G579(MGM_W498,MGM_W497,MGM_W496);
   and MGM_G580(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W498);
   not MGM_G581(MGM_W499,d_delay);
   and MGM_G582(MGM_W500,rb_delay,MGM_W499);
   not MGM_G583(MGM_W501,si_delay);
   and MGM_G584(MGM_W502,MGM_W501,MGM_W500);
   and MGM_G585(MGM_W503,sleep,MGM_W502);
   not MGM_G586(MGM_W504,ssb_delay);
   and MGM_G587(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W504,MGM_W503);
   not MGM_G588(MGM_W505,d_delay);
   and MGM_G589(MGM_W506,rb_delay,MGM_W505);
   not MGM_G590(MGM_W507,si_delay);
   and MGM_G591(MGM_W508,MGM_W507,MGM_W506);
   and MGM_G592(MGM_W509,sleep,MGM_W508);
   and MGM_G593(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W509);
   not MGM_G594(MGM_W510,d_delay);
   and MGM_G595(MGM_W511,rb_delay,MGM_W510);
   and MGM_G596(MGM_W512,si_delay,MGM_W511);
   not MGM_G597(MGM_W513,sleep);
   and MGM_G598(MGM_W514,MGM_W513,MGM_W512);
   and MGM_G599(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W514);
   not MGM_G600(MGM_W515,d_delay);
   and MGM_G601(MGM_W516,rb_delay,MGM_W515);
   and MGM_G602(MGM_W517,si_delay,MGM_W516);
   and MGM_G603(MGM_W518,sleep,MGM_W517);
   and MGM_G604(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W518);
   and MGM_G605(MGM_W519,rb_delay,d_delay);
   not MGM_G606(MGM_W520,si_delay);
   and MGM_G607(MGM_W521,MGM_W520,MGM_W519);
   not MGM_G608(MGM_W522,sleep);
   and MGM_G609(MGM_W523,MGM_W522,MGM_W521);
   not MGM_G610(MGM_W524,ssb_delay);
   and MGM_G611(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W524,MGM_W523);
   and MGM_G612(MGM_W525,rb_delay,d_delay);
   not MGM_G613(MGM_W526,si_delay);
   and MGM_G614(MGM_W527,MGM_W526,MGM_W525);
   and MGM_G615(MGM_W528,sleep,MGM_W527);
   not MGM_G616(MGM_W529,ssb_delay);
   and MGM_G617(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G618(MGM_W530,d_delay);
   and MGM_G619(MGM_W531,rb_delay,MGM_W530);
   not MGM_G620(MGM_W532,s_delay);
   and MGM_G621(MGM_W533,MGM_W532,MGM_W531);
   not MGM_G622(MGM_W534,sleep);
   and MGM_G623(MGM_W535,MGM_W534,MGM_W533);
   not MGM_G624(MGM_W536,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G626(MGM_W537,d_delay);
   and MGM_G627(MGM_W538,rb_delay,MGM_W537);
   not MGM_G628(MGM_W539,s_delay);
   and MGM_G629(MGM_W540,MGM_W539,MGM_W538);
   and MGM_G630(MGM_W541,sleep,MGM_W540);
   not MGM_G631(MGM_W542,ssb_delay);
   and MGM_G632(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W542,MGM_W541);
   and MGM_G633(MGM_W543,rb_delay,d_delay);
   not MGM_G634(MGM_W544,s_delay);
   and MGM_G635(MGM_W545,MGM_W544,MGM_W543);
   not MGM_G636(MGM_W546,sleep);
   and MGM_G637(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G638(MGM_W548,ssb_delay);
   and MGM_G639(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W548,MGM_W547);
   and MGM_G640(MGM_W549,rb_delay,d_delay);
   not MGM_G641(MGM_W550,s_delay);
   and MGM_G642(MGM_W551,MGM_W550,MGM_W549);
   and MGM_G643(MGM_W552,sleep,MGM_W551);
   not MGM_G644(MGM_W553,ssb_delay);
   and MGM_G645(ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W553,MGM_W552);
   not MGM_G646(MGM_W554,d_delay);
   and MGM_G647(MGM_W555,rb_delay,MGM_W554);
   not MGM_G648(MGM_W556,s_delay);
   and MGM_G649(MGM_W557,MGM_W556,MGM_W555);
   not MGM_G650(MGM_W558,si_delay);
   and MGM_G651(MGM_W559,MGM_W558,MGM_W557);
   not MGM_G652(MGM_W560,ssb_delay);
   and MGM_G653(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W560,MGM_W559);
   not MGM_G654(MGM_W561,d_delay);
   and MGM_G655(MGM_W562,rb_delay,MGM_W561);
   not MGM_G656(MGM_W563,s_delay);
   and MGM_G657(MGM_W564,MGM_W563,MGM_W562);
   not MGM_G658(MGM_W565,si_delay);
   and MGM_G659(MGM_W566,MGM_W565,MGM_W564);
   and MGM_G660(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W566);
   not MGM_G661(MGM_W567,d_delay);
   and MGM_G662(MGM_W568,rb_delay,MGM_W567);
   not MGM_G663(MGM_W569,s_delay);
   and MGM_G664(MGM_W570,MGM_W569,MGM_W568);
   and MGM_G665(MGM_W571,si_delay,MGM_W570);
   not MGM_G666(MGM_W572,ssb_delay);
   and MGM_G667(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W572,MGM_W571);
   not MGM_G668(MGM_W573,d_delay);
   and MGM_G669(MGM_W574,rb_delay,MGM_W573);
   not MGM_G670(MGM_W575,s_delay);
   and MGM_G671(MGM_W576,MGM_W575,MGM_W574);
   and MGM_G672(MGM_W577,si_delay,MGM_W576);
   and MGM_G673(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W577);
   and MGM_G674(MGM_W578,rb_delay,d_delay);
   not MGM_G675(MGM_W579,s_delay);
   and MGM_G676(MGM_W580,MGM_W579,MGM_W578);
   not MGM_G677(MGM_W581,si_delay);
   and MGM_G678(MGM_W582,MGM_W581,MGM_W580);
   not MGM_G679(MGM_W583,ssb_delay);
   and MGM_G680(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W583,MGM_W582);
   and MGM_G681(MGM_W584,rb_delay,d_delay);
   not MGM_G682(MGM_W585,s_delay);
   and MGM_G683(MGM_W586,MGM_W585,MGM_W584);
   not MGM_G684(MGM_W587,si_delay);
   and MGM_G685(MGM_W588,MGM_W587,MGM_W586);
   and MGM_G686(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W588);
   and MGM_G687(MGM_W589,rb_delay,d_delay);
   not MGM_G688(MGM_W590,s_delay);
   and MGM_G689(MGM_W591,MGM_W590,MGM_W589);
   and MGM_G690(MGM_W592,si_delay,MGM_W591);
   not MGM_G691(MGM_W593,ssb_delay);
   and MGM_G692(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W593,MGM_W592);
   and MGM_G693(MGM_W594,rb_delay,d_delay);
   not MGM_G694(MGM_W595,s_delay);
   and MGM_G695(MGM_W596,MGM_W595,MGM_W594);
   and MGM_G696(MGM_W597,si_delay,MGM_W596);
   and MGM_G697(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W597);
   not MGM_G698(MGM_W598,d_delay);
   and MGM_G699(MGM_W599,rb_delay,MGM_W598);
   not MGM_G700(MGM_W600,s_delay);
   and MGM_G701(MGM_W601,MGM_W600,MGM_W599);
   and MGM_G702(MGM_W602,si_delay,MGM_W601);
   not MGM_G703(MGM_W603,sleep);
   and MGM_G704(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep,MGM_W603,MGM_W602);
   not MGM_G705(MGM_W604,d_delay);
   and MGM_G706(MGM_W605,rb_delay,MGM_W604);
   not MGM_G707(MGM_W606,s_delay);
   and MGM_G708(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G709(MGM_W608,si_delay,MGM_W607);
   and MGM_G710(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep,sleep,MGM_W608);
   and MGM_G711(MGM_W609,rb_delay,d_delay);
   not MGM_G712(MGM_W610,s_delay);
   and MGM_G713(MGM_W611,MGM_W610,MGM_W609);
   not MGM_G714(MGM_W612,si_delay);
   and MGM_G715(MGM_W613,MGM_W612,MGM_W611);
   not MGM_G716(MGM_W614,sleep);
   and MGM_G717(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep,MGM_W614,MGM_W613);
   and MGM_G718(MGM_W615,rb_delay,d_delay);
   not MGM_G719(MGM_W616,s_delay);
   and MGM_G720(MGM_W617,MGM_W616,MGM_W615);
   not MGM_G721(MGM_W618,si_delay);
   and MGM_G722(MGM_W619,MGM_W618,MGM_W617);
   and MGM_G723(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep,sleep,MGM_W619);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr0bad1d06x5( clk, d, o, rb, s, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and preset
// 
// 
// always @ (clk or d or rb or s or si or ssb)
// begin
// if ((!rb) && (s))
// begin
// IQ1 <= 1'b0 ;
// end
// else if (s)
// begin
// IQ1 <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or s or sleep)
// begin
// if ((!rb&!sleep) && (s&!sleep))
// begin
// IQ2 <= 1'b0 ;
// end
// else if (s&!sleep)
// begin
// IQ2 <= 1'b1 ;
// end
// else if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr0bad_delay o =  IQ2;
// assign `fvzr0bad_delay so =  IQ2;
// 

   input clk, d, rb, s, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G362(MGM_W310,d_delay);
   and MGM_G363(MGM_W311,rb_delay,MGM_W310);
   not MGM_G364(MGM_W312,s_delay);
   and MGM_G365(MGM_W313,MGM_W312,MGM_W311);
   not MGM_G366(MGM_W314,si_delay);
   and MGM_G367(MGM_W315,MGM_W314,MGM_W313);
   not MGM_G368(MGM_W316,sleep);
   and MGM_G369(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G370(MGM_W318,ssb_delay);
   and MGM_G371(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G372(MGM_W319,d_delay);
   and MGM_G373(MGM_W320,rb_delay,MGM_W319);
   not MGM_G374(MGM_W321,s_delay);
   and MGM_G375(MGM_W322,MGM_W321,MGM_W320);
   not MGM_G376(MGM_W323,si_delay);
   and MGM_G377(MGM_W324,MGM_W323,MGM_W322);
   not MGM_G378(MGM_W325,sleep);
   and MGM_G379(MGM_W326,MGM_W325,MGM_W324);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W326);
   not MGM_G381(MGM_W327,d_delay);
   and MGM_G382(MGM_W328,rb_delay,MGM_W327);
   not MGM_G383(MGM_W329,s_delay);
   and MGM_G384(MGM_W330,MGM_W329,MGM_W328);
   not MGM_G385(MGM_W331,si_delay);
   and MGM_G386(MGM_W332,MGM_W331,MGM_W330);
   and MGM_G387(MGM_W333,sleep,MGM_W332);
   not MGM_G388(MGM_W334,ssb_delay);
   and MGM_G389(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W334,MGM_W333);
   not MGM_G390(MGM_W335,d_delay);
   and MGM_G391(MGM_W336,rb_delay,MGM_W335);
   not MGM_G392(MGM_W337,s_delay);
   and MGM_G393(MGM_W338,MGM_W337,MGM_W336);
   not MGM_G394(MGM_W339,si_delay);
   and MGM_G395(MGM_W340,MGM_W339,MGM_W338);
   and MGM_G396(MGM_W341,sleep,MGM_W340);
   and MGM_G397(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G398(MGM_W342,d_delay);
   and MGM_G399(MGM_W343,rb_delay,MGM_W342);
   not MGM_G400(MGM_W344,s_delay);
   and MGM_G401(MGM_W345,MGM_W344,MGM_W343);
   and MGM_G402(MGM_W346,si_delay,MGM_W345);
   not MGM_G403(MGM_W347,sleep);
   and MGM_G404(MGM_W348,MGM_W347,MGM_W346);
   not MGM_G405(MGM_W349,ssb_delay);
   and MGM_G406(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W349,MGM_W348);
   not MGM_G407(MGM_W350,d_delay);
   and MGM_G408(MGM_W351,rb_delay,MGM_W350);
   not MGM_G409(MGM_W352,s_delay);
   and MGM_G410(MGM_W353,MGM_W352,MGM_W351);
   and MGM_G411(MGM_W354,si_delay,MGM_W353);
   not MGM_G412(MGM_W355,sleep);
   and MGM_G413(MGM_W356,MGM_W355,MGM_W354);
   and MGM_G414(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W356);
   not MGM_G415(MGM_W357,d_delay);
   and MGM_G416(MGM_W358,rb_delay,MGM_W357);
   not MGM_G417(MGM_W359,s_delay);
   and MGM_G418(MGM_W360,MGM_W359,MGM_W358);
   and MGM_G419(MGM_W361,si_delay,MGM_W360);
   and MGM_G420(MGM_W362,sleep,MGM_W361);
   not MGM_G421(MGM_W363,ssb_delay);
   and MGM_G422(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W363,MGM_W362);
   not MGM_G423(MGM_W364,d_delay);
   and MGM_G424(MGM_W365,rb_delay,MGM_W364);
   not MGM_G425(MGM_W366,s_delay);
   and MGM_G426(MGM_W367,MGM_W366,MGM_W365);
   and MGM_G427(MGM_W368,si_delay,MGM_W367);
   and MGM_G428(MGM_W369,sleep,MGM_W368);
   and MGM_G429(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W369);
   and MGM_G430(MGM_W370,rb_delay,d_delay);
   not MGM_G431(MGM_W371,s_delay);
   and MGM_G432(MGM_W372,MGM_W371,MGM_W370);
   not MGM_G433(MGM_W373,si_delay);
   and MGM_G434(MGM_W374,MGM_W373,MGM_W372);
   not MGM_G435(MGM_W375,sleep);
   and MGM_G436(MGM_W376,MGM_W375,MGM_W374);
   not MGM_G437(MGM_W377,ssb_delay);
   and MGM_G438(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W377,MGM_W376);
   and MGM_G439(MGM_W378,rb_delay,d_delay);
   not MGM_G440(MGM_W379,s_delay);
   and MGM_G441(MGM_W380,MGM_W379,MGM_W378);
   not MGM_G442(MGM_W381,si_delay);
   and MGM_G443(MGM_W382,MGM_W381,MGM_W380);
   not MGM_G444(MGM_W383,sleep);
   and MGM_G445(MGM_W384,MGM_W383,MGM_W382);
   and MGM_G446(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W384);
   and MGM_G447(MGM_W385,rb_delay,d_delay);
   not MGM_G448(MGM_W386,s_delay);
   and MGM_G449(MGM_W387,MGM_W386,MGM_W385);
   not MGM_G450(MGM_W388,si_delay);
   and MGM_G451(MGM_W389,MGM_W388,MGM_W387);
   and MGM_G452(MGM_W390,sleep,MGM_W389);
   not MGM_G453(MGM_W391,ssb_delay);
   and MGM_G454(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W391,MGM_W390);
   and MGM_G455(MGM_W392,rb_delay,d_delay);
   not MGM_G456(MGM_W393,s_delay);
   and MGM_G457(MGM_W394,MGM_W393,MGM_W392);
   not MGM_G458(MGM_W395,si_delay);
   and MGM_G459(MGM_W396,MGM_W395,MGM_W394);
   and MGM_G460(MGM_W397,sleep,MGM_W396);
   and MGM_G461(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W397);
   and MGM_G462(MGM_W398,rb_delay,d_delay);
   not MGM_G463(MGM_W399,s_delay);
   and MGM_G464(MGM_W400,MGM_W399,MGM_W398);
   and MGM_G465(MGM_W401,si_delay,MGM_W400);
   not MGM_G466(MGM_W402,sleep);
   and MGM_G467(MGM_W403,MGM_W402,MGM_W401);
   not MGM_G468(MGM_W404,ssb_delay);
   and MGM_G469(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W404,MGM_W403);
   and MGM_G470(MGM_W405,rb_delay,d_delay);
   not MGM_G471(MGM_W406,s_delay);
   and MGM_G472(MGM_W407,MGM_W406,MGM_W405);
   and MGM_G473(MGM_W408,si_delay,MGM_W407);
   not MGM_G474(MGM_W409,sleep);
   and MGM_G475(MGM_W410,MGM_W409,MGM_W408);
   and MGM_G476(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W410);
   and MGM_G477(MGM_W411,rb_delay,d_delay);
   not MGM_G478(MGM_W412,s_delay);
   and MGM_G479(MGM_W413,MGM_W412,MGM_W411);
   and MGM_G480(MGM_W414,si_delay,MGM_W413);
   and MGM_G481(MGM_W415,sleep,MGM_W414);
   not MGM_G482(MGM_W416,ssb_delay);
   and MGM_G483(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W416,MGM_W415);
   and MGM_G484(MGM_W417,rb_delay,d_delay);
   not MGM_G485(MGM_W418,s_delay);
   and MGM_G486(MGM_W419,MGM_W418,MGM_W417);
   and MGM_G487(MGM_W420,si_delay,MGM_W419);
   and MGM_G488(MGM_W421,sleep,MGM_W420);
   and MGM_G489(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W421);
   not MGM_G490(MGM_W422,s_delay);
   and MGM_G491(MGM_W423,MGM_W422,rb_delay);
   not MGM_G492(MGM_W424,si_delay);
   and MGM_G493(MGM_W425,MGM_W424,MGM_W423);
   not MGM_G494(MGM_W426,sleep);
   and MGM_G495(MGM_W427,MGM_W426,MGM_W425);
   and MGM_G496(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W427);
   not MGM_G497(MGM_W428,s_delay);
   and MGM_G498(MGM_W429,MGM_W428,rb_delay);
   not MGM_G499(MGM_W430,si_delay);
   and MGM_G500(MGM_W431,MGM_W430,MGM_W429);
   and MGM_G501(MGM_W432,sleep,MGM_W431);
   and MGM_G502(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W432);
   not MGM_G503(MGM_W433,s_delay);
   and MGM_G504(MGM_W434,MGM_W433,rb_delay);
   and MGM_G505(MGM_W435,si_delay,MGM_W434);
   not MGM_G506(MGM_W436,sleep);
   and MGM_G507(MGM_W437,MGM_W436,MGM_W435);
   and MGM_G508(ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W437);
   not MGM_G509(MGM_W438,s_delay);
   and MGM_G510(MGM_W439,MGM_W438,rb_delay);
   and MGM_G511(MGM_W440,si_delay,MGM_W439);
   and MGM_G512(MGM_W441,sleep,MGM_W440);
   and MGM_G513(ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W441);
   not MGM_G514(MGM_W442,d_delay);
   not MGM_G515(MGM_W443,s_delay);
   and MGM_G516(MGM_W444,MGM_W443,MGM_W442);
   and MGM_G517(MGM_W445,si_delay,MGM_W444);
   not MGM_G518(MGM_W446,sleep);
   and MGM_G519(MGM_W447,MGM_W446,MGM_W445);
   not MGM_G520(MGM_W448,ssb_delay);
   and MGM_G521(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W448,MGM_W447);
   not MGM_G522(MGM_W449,d_delay);
   not MGM_G523(MGM_W450,s_delay);
   and MGM_G524(MGM_W451,MGM_W450,MGM_W449);
   and MGM_G525(MGM_W452,si_delay,MGM_W451);
   and MGM_G526(MGM_W453,sleep,MGM_W452);
   not MGM_G527(MGM_W454,ssb_delay);
   and MGM_G528(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W454,MGM_W453);
   not MGM_G529(MGM_W455,s_delay);
   and MGM_G530(MGM_W456,MGM_W455,d_delay);
   not MGM_G531(MGM_W457,si_delay);
   and MGM_G532(MGM_W458,MGM_W457,MGM_W456);
   not MGM_G533(MGM_W459,sleep);
   and MGM_G534(MGM_W460,MGM_W459,MGM_W458);
   and MGM_G535(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W460);
   not MGM_G536(MGM_W461,s_delay);
   and MGM_G537(MGM_W462,MGM_W461,d_delay);
   not MGM_G538(MGM_W463,si_delay);
   and MGM_G539(MGM_W464,MGM_W463,MGM_W462);
   and MGM_G540(MGM_W465,sleep,MGM_W464);
   and MGM_G541(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W465);
   not MGM_G542(MGM_W466,s_delay);
   and MGM_G543(MGM_W467,MGM_W466,d_delay);
   and MGM_G544(MGM_W468,si_delay,MGM_W467);
   not MGM_G545(MGM_W469,sleep);
   and MGM_G546(MGM_W470,MGM_W469,MGM_W468);
   not MGM_G547(MGM_W471,ssb_delay);
   and MGM_G548(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W471,MGM_W470);
   not MGM_G549(MGM_W472,s_delay);
   and MGM_G550(MGM_W473,MGM_W472,d_delay);
   and MGM_G551(MGM_W474,si_delay,MGM_W473);
   not MGM_G552(MGM_W475,sleep);
   and MGM_G553(MGM_W476,MGM_W475,MGM_W474);
   and MGM_G554(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W476);
   not MGM_G555(MGM_W477,s_delay);
   and MGM_G556(MGM_W478,MGM_W477,d_delay);
   and MGM_G557(MGM_W479,si_delay,MGM_W478);
   and MGM_G558(MGM_W480,sleep,MGM_W479);
   not MGM_G559(MGM_W481,ssb_delay);
   and MGM_G560(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W481,MGM_W480);
   not MGM_G561(MGM_W482,s_delay);
   and MGM_G562(MGM_W483,MGM_W482,d_delay);
   and MGM_G563(MGM_W484,si_delay,MGM_W483);
   and MGM_G564(MGM_W485,sleep,MGM_W484);
   and MGM_G565(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W485);
   not MGM_G566(MGM_W486,d_delay);
   and MGM_G567(MGM_W487,rb_delay,MGM_W486);
   not MGM_G568(MGM_W488,si_delay);
   and MGM_G569(MGM_W489,MGM_W488,MGM_W487);
   not MGM_G570(MGM_W490,sleep);
   and MGM_G571(MGM_W491,MGM_W490,MGM_W489);
   not MGM_G572(MGM_W492,ssb_delay);
   and MGM_G573(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W492,MGM_W491);
   not MGM_G574(MGM_W493,d_delay);
   and MGM_G575(MGM_W494,rb_delay,MGM_W493);
   not MGM_G576(MGM_W495,si_delay);
   and MGM_G577(MGM_W496,MGM_W495,MGM_W494);
   not MGM_G578(MGM_W497,sleep);
   and MGM_G579(MGM_W498,MGM_W497,MGM_W496);
   and MGM_G580(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W498);
   not MGM_G581(MGM_W499,d_delay);
   and MGM_G582(MGM_W500,rb_delay,MGM_W499);
   not MGM_G583(MGM_W501,si_delay);
   and MGM_G584(MGM_W502,MGM_W501,MGM_W500);
   and MGM_G585(MGM_W503,sleep,MGM_W502);
   not MGM_G586(MGM_W504,ssb_delay);
   and MGM_G587(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W504,MGM_W503);
   not MGM_G588(MGM_W505,d_delay);
   and MGM_G589(MGM_W506,rb_delay,MGM_W505);
   not MGM_G590(MGM_W507,si_delay);
   and MGM_G591(MGM_W508,MGM_W507,MGM_W506);
   and MGM_G592(MGM_W509,sleep,MGM_W508);
   and MGM_G593(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W509);
   not MGM_G594(MGM_W510,d_delay);
   and MGM_G595(MGM_W511,rb_delay,MGM_W510);
   and MGM_G596(MGM_W512,si_delay,MGM_W511);
   not MGM_G597(MGM_W513,sleep);
   and MGM_G598(MGM_W514,MGM_W513,MGM_W512);
   and MGM_G599(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W514);
   not MGM_G600(MGM_W515,d_delay);
   and MGM_G601(MGM_W516,rb_delay,MGM_W515);
   and MGM_G602(MGM_W517,si_delay,MGM_W516);
   and MGM_G603(MGM_W518,sleep,MGM_W517);
   and MGM_G604(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W518);
   and MGM_G605(MGM_W519,rb_delay,d_delay);
   not MGM_G606(MGM_W520,si_delay);
   and MGM_G607(MGM_W521,MGM_W520,MGM_W519);
   not MGM_G608(MGM_W522,sleep);
   and MGM_G609(MGM_W523,MGM_W522,MGM_W521);
   not MGM_G610(MGM_W524,ssb_delay);
   and MGM_G611(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W524,MGM_W523);
   and MGM_G612(MGM_W525,rb_delay,d_delay);
   not MGM_G613(MGM_W526,si_delay);
   and MGM_G614(MGM_W527,MGM_W526,MGM_W525);
   and MGM_G615(MGM_W528,sleep,MGM_W527);
   not MGM_G616(MGM_W529,ssb_delay);
   and MGM_G617(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G618(MGM_W530,d_delay);
   and MGM_G619(MGM_W531,rb_delay,MGM_W530);
   not MGM_G620(MGM_W532,s_delay);
   and MGM_G621(MGM_W533,MGM_W532,MGM_W531);
   not MGM_G622(MGM_W534,sleep);
   and MGM_G623(MGM_W535,MGM_W534,MGM_W533);
   not MGM_G624(MGM_W536,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G626(MGM_W537,d_delay);
   and MGM_G627(MGM_W538,rb_delay,MGM_W537);
   not MGM_G628(MGM_W539,s_delay);
   and MGM_G629(MGM_W540,MGM_W539,MGM_W538);
   and MGM_G630(MGM_W541,sleep,MGM_W540);
   not MGM_G631(MGM_W542,ssb_delay);
   and MGM_G632(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W542,MGM_W541);
   and MGM_G633(MGM_W543,rb_delay,d_delay);
   not MGM_G634(MGM_W544,s_delay);
   and MGM_G635(MGM_W545,MGM_W544,MGM_W543);
   not MGM_G636(MGM_W546,sleep);
   and MGM_G637(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G638(MGM_W548,ssb_delay);
   and MGM_G639(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W548,MGM_W547);
   and MGM_G640(MGM_W549,rb_delay,d_delay);
   not MGM_G641(MGM_W550,s_delay);
   and MGM_G642(MGM_W551,MGM_W550,MGM_W549);
   and MGM_G643(MGM_W552,sleep,MGM_W551);
   not MGM_G644(MGM_W553,ssb_delay);
   and MGM_G645(ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W553,MGM_W552);
   not MGM_G646(MGM_W554,d_delay);
   and MGM_G647(MGM_W555,rb_delay,MGM_W554);
   not MGM_G648(MGM_W556,s_delay);
   and MGM_G649(MGM_W557,MGM_W556,MGM_W555);
   not MGM_G650(MGM_W558,si_delay);
   and MGM_G651(MGM_W559,MGM_W558,MGM_W557);
   not MGM_G652(MGM_W560,ssb_delay);
   and MGM_G653(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W560,MGM_W559);
   not MGM_G654(MGM_W561,d_delay);
   and MGM_G655(MGM_W562,rb_delay,MGM_W561);
   not MGM_G656(MGM_W563,s_delay);
   and MGM_G657(MGM_W564,MGM_W563,MGM_W562);
   not MGM_G658(MGM_W565,si_delay);
   and MGM_G659(MGM_W566,MGM_W565,MGM_W564);
   and MGM_G660(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W566);
   not MGM_G661(MGM_W567,d_delay);
   and MGM_G662(MGM_W568,rb_delay,MGM_W567);
   not MGM_G663(MGM_W569,s_delay);
   and MGM_G664(MGM_W570,MGM_W569,MGM_W568);
   and MGM_G665(MGM_W571,si_delay,MGM_W570);
   not MGM_G666(MGM_W572,ssb_delay);
   and MGM_G667(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W572,MGM_W571);
   not MGM_G668(MGM_W573,d_delay);
   and MGM_G669(MGM_W574,rb_delay,MGM_W573);
   not MGM_G670(MGM_W575,s_delay);
   and MGM_G671(MGM_W576,MGM_W575,MGM_W574);
   and MGM_G672(MGM_W577,si_delay,MGM_W576);
   and MGM_G673(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W577);
   and MGM_G674(MGM_W578,rb_delay,d_delay);
   not MGM_G675(MGM_W579,s_delay);
   and MGM_G676(MGM_W580,MGM_W579,MGM_W578);
   not MGM_G677(MGM_W581,si_delay);
   and MGM_G678(MGM_W582,MGM_W581,MGM_W580);
   not MGM_G679(MGM_W583,ssb_delay);
   and MGM_G680(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W583,MGM_W582);
   and MGM_G681(MGM_W584,rb_delay,d_delay);
   not MGM_G682(MGM_W585,s_delay);
   and MGM_G683(MGM_W586,MGM_W585,MGM_W584);
   not MGM_G684(MGM_W587,si_delay);
   and MGM_G685(MGM_W588,MGM_W587,MGM_W586);
   and MGM_G686(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W588);
   and MGM_G687(MGM_W589,rb_delay,d_delay);
   not MGM_G688(MGM_W590,s_delay);
   and MGM_G689(MGM_W591,MGM_W590,MGM_W589);
   and MGM_G690(MGM_W592,si_delay,MGM_W591);
   not MGM_G691(MGM_W593,ssb_delay);
   and MGM_G692(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W593,MGM_W592);
   and MGM_G693(MGM_W594,rb_delay,d_delay);
   not MGM_G694(MGM_W595,s_delay);
   and MGM_G695(MGM_W596,MGM_W595,MGM_W594);
   and MGM_G696(MGM_W597,si_delay,MGM_W596);
   and MGM_G697(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W597);
   not MGM_G698(MGM_W598,d_delay);
   and MGM_G699(MGM_W599,rb_delay,MGM_W598);
   not MGM_G700(MGM_W600,s_delay);
   and MGM_G701(MGM_W601,MGM_W600,MGM_W599);
   and MGM_G702(MGM_W602,si_delay,MGM_W601);
   not MGM_G703(MGM_W603,sleep);
   and MGM_G704(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep,MGM_W603,MGM_W602);
   not MGM_G705(MGM_W604,d_delay);
   and MGM_G706(MGM_W605,rb_delay,MGM_W604);
   not MGM_G707(MGM_W606,s_delay);
   and MGM_G708(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G709(MGM_W608,si_delay,MGM_W607);
   and MGM_G710(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep,sleep,MGM_W608);
   and MGM_G711(MGM_W609,rb_delay,d_delay);
   not MGM_G712(MGM_W610,s_delay);
   and MGM_G713(MGM_W611,MGM_W610,MGM_W609);
   not MGM_G714(MGM_W612,si_delay);
   and MGM_G715(MGM_W613,MGM_W612,MGM_W611);
   not MGM_G716(MGM_W614,sleep);
   and MGM_G717(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep,MGM_W614,MGM_W613);
   and MGM_G718(MGM_W615,rb_delay,d_delay);
   not MGM_G719(MGM_W616,s_delay);
   and MGM_G720(MGM_W617,MGM_W616,MGM_W615);
   not MGM_G721(MGM_W618,si_delay);
   and MGM_G722(MGM_W619,MGM_W618,MGM_W617);
   and MGM_G723(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep,sleep,MGM_W619);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr0bad1d12x5( clk, d, o, rb, s, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and preset
// 
// 
// always @ (clk or d or rb or s or si or ssb)
// begin
// if ((!rb) && (s))
// begin
// IQ1 <= 1'b0 ;
// end
// else if (s)
// begin
// IQ1 <= 1'b1 ;
// end
// else if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= ssb ? d : si;
// end
// end
// always @ (IQ1 or clk or rb or s or sleep)
// begin
// if ((!rb&!sleep) && (s&!sleep))
// begin
// IQ2 <= 1'b0 ;
// end
// else if (s&!sleep)
// begin
// IQ2 <= 1'b1 ;
// end
// else if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr0bad_delay o =  IQ2;
// assign `fvzr0bad_delay so =  IQ2;
// 

   input clk, d, rb, s, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.s(s),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr0bad_delay o_random_init = o_tmp ;
      assign `fvzr0bad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   wire s_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr0bad_func i0sfvzr0bad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.s(s_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G362(MGM_W310,d_delay);
   and MGM_G363(MGM_W311,rb_delay,MGM_W310);
   not MGM_G364(MGM_W312,s_delay);
   and MGM_G365(MGM_W313,MGM_W312,MGM_W311);
   not MGM_G366(MGM_W314,si_delay);
   and MGM_G367(MGM_W315,MGM_W314,MGM_W313);
   not MGM_G368(MGM_W316,sleep);
   and MGM_G369(MGM_W317,MGM_W316,MGM_W315);
   not MGM_G370(MGM_W318,ssb_delay);
   and MGM_G371(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W318,MGM_W317);
   not MGM_G372(MGM_W319,d_delay);
   and MGM_G373(MGM_W320,rb_delay,MGM_W319);
   not MGM_G374(MGM_W321,s_delay);
   and MGM_G375(MGM_W322,MGM_W321,MGM_W320);
   not MGM_G376(MGM_W323,si_delay);
   and MGM_G377(MGM_W324,MGM_W323,MGM_W322);
   not MGM_G378(MGM_W325,sleep);
   and MGM_G379(MGM_W326,MGM_W325,MGM_W324);
   and MGM_G380(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W326);
   not MGM_G381(MGM_W327,d_delay);
   and MGM_G382(MGM_W328,rb_delay,MGM_W327);
   not MGM_G383(MGM_W329,s_delay);
   and MGM_G384(MGM_W330,MGM_W329,MGM_W328);
   not MGM_G385(MGM_W331,si_delay);
   and MGM_G386(MGM_W332,MGM_W331,MGM_W330);
   and MGM_G387(MGM_W333,sleep,MGM_W332);
   not MGM_G388(MGM_W334,ssb_delay);
   and MGM_G389(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W334,MGM_W333);
   not MGM_G390(MGM_W335,d_delay);
   and MGM_G391(MGM_W336,rb_delay,MGM_W335);
   not MGM_G392(MGM_W337,s_delay);
   and MGM_G393(MGM_W338,MGM_W337,MGM_W336);
   not MGM_G394(MGM_W339,si_delay);
   and MGM_G395(MGM_W340,MGM_W339,MGM_W338);
   and MGM_G396(MGM_W341,sleep,MGM_W340);
   and MGM_G397(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W341);
   not MGM_G398(MGM_W342,d_delay);
   and MGM_G399(MGM_W343,rb_delay,MGM_W342);
   not MGM_G400(MGM_W344,s_delay);
   and MGM_G401(MGM_W345,MGM_W344,MGM_W343);
   and MGM_G402(MGM_W346,si_delay,MGM_W345);
   not MGM_G403(MGM_W347,sleep);
   and MGM_G404(MGM_W348,MGM_W347,MGM_W346);
   not MGM_G405(MGM_W349,ssb_delay);
   and MGM_G406(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W349,MGM_W348);
   not MGM_G407(MGM_W350,d_delay);
   and MGM_G408(MGM_W351,rb_delay,MGM_W350);
   not MGM_G409(MGM_W352,s_delay);
   and MGM_G410(MGM_W353,MGM_W352,MGM_W351);
   and MGM_G411(MGM_W354,si_delay,MGM_W353);
   not MGM_G412(MGM_W355,sleep);
   and MGM_G413(MGM_W356,MGM_W355,MGM_W354);
   and MGM_G414(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W356);
   not MGM_G415(MGM_W357,d_delay);
   and MGM_G416(MGM_W358,rb_delay,MGM_W357);
   not MGM_G417(MGM_W359,s_delay);
   and MGM_G418(MGM_W360,MGM_W359,MGM_W358);
   and MGM_G419(MGM_W361,si_delay,MGM_W360);
   and MGM_G420(MGM_W362,sleep,MGM_W361);
   not MGM_G421(MGM_W363,ssb_delay);
   and MGM_G422(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W363,MGM_W362);
   not MGM_G423(MGM_W364,d_delay);
   and MGM_G424(MGM_W365,rb_delay,MGM_W364);
   not MGM_G425(MGM_W366,s_delay);
   and MGM_G426(MGM_W367,MGM_W366,MGM_W365);
   and MGM_G427(MGM_W368,si_delay,MGM_W367);
   and MGM_G428(MGM_W369,sleep,MGM_W368);
   and MGM_G429(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W369);
   and MGM_G430(MGM_W370,rb_delay,d_delay);
   not MGM_G431(MGM_W371,s_delay);
   and MGM_G432(MGM_W372,MGM_W371,MGM_W370);
   not MGM_G433(MGM_W373,si_delay);
   and MGM_G434(MGM_W374,MGM_W373,MGM_W372);
   not MGM_G435(MGM_W375,sleep);
   and MGM_G436(MGM_W376,MGM_W375,MGM_W374);
   not MGM_G437(MGM_W377,ssb_delay);
   and MGM_G438(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W377,MGM_W376);
   and MGM_G439(MGM_W378,rb_delay,d_delay);
   not MGM_G440(MGM_W379,s_delay);
   and MGM_G441(MGM_W380,MGM_W379,MGM_W378);
   not MGM_G442(MGM_W381,si_delay);
   and MGM_G443(MGM_W382,MGM_W381,MGM_W380);
   not MGM_G444(MGM_W383,sleep);
   and MGM_G445(MGM_W384,MGM_W383,MGM_W382);
   and MGM_G446(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W384);
   and MGM_G447(MGM_W385,rb_delay,d_delay);
   not MGM_G448(MGM_W386,s_delay);
   and MGM_G449(MGM_W387,MGM_W386,MGM_W385);
   not MGM_G450(MGM_W388,si_delay);
   and MGM_G451(MGM_W389,MGM_W388,MGM_W387);
   and MGM_G452(MGM_W390,sleep,MGM_W389);
   not MGM_G453(MGM_W391,ssb_delay);
   and MGM_G454(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W391,MGM_W390);
   and MGM_G455(MGM_W392,rb_delay,d_delay);
   not MGM_G456(MGM_W393,s_delay);
   and MGM_G457(MGM_W394,MGM_W393,MGM_W392);
   not MGM_G458(MGM_W395,si_delay);
   and MGM_G459(MGM_W396,MGM_W395,MGM_W394);
   and MGM_G460(MGM_W397,sleep,MGM_W396);
   and MGM_G461(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W397);
   and MGM_G462(MGM_W398,rb_delay,d_delay);
   not MGM_G463(MGM_W399,s_delay);
   and MGM_G464(MGM_W400,MGM_W399,MGM_W398);
   and MGM_G465(MGM_W401,si_delay,MGM_W400);
   not MGM_G466(MGM_W402,sleep);
   and MGM_G467(MGM_W403,MGM_W402,MGM_W401);
   not MGM_G468(MGM_W404,ssb_delay);
   and MGM_G469(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W404,MGM_W403);
   and MGM_G470(MGM_W405,rb_delay,d_delay);
   not MGM_G471(MGM_W406,s_delay);
   and MGM_G472(MGM_W407,MGM_W406,MGM_W405);
   and MGM_G473(MGM_W408,si_delay,MGM_W407);
   not MGM_G474(MGM_W409,sleep);
   and MGM_G475(MGM_W410,MGM_W409,MGM_W408);
   and MGM_G476(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W410);
   and MGM_G477(MGM_W411,rb_delay,d_delay);
   not MGM_G478(MGM_W412,s_delay);
   and MGM_G479(MGM_W413,MGM_W412,MGM_W411);
   and MGM_G480(MGM_W414,si_delay,MGM_W413);
   and MGM_G481(MGM_W415,sleep,MGM_W414);
   not MGM_G482(MGM_W416,ssb_delay);
   and MGM_G483(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W416,MGM_W415);
   and MGM_G484(MGM_W417,rb_delay,d_delay);
   not MGM_G485(MGM_W418,s_delay);
   and MGM_G486(MGM_W419,MGM_W418,MGM_W417);
   and MGM_G487(MGM_W420,si_delay,MGM_W419);
   and MGM_G488(MGM_W421,sleep,MGM_W420);
   and MGM_G489(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W421);
   not MGM_G490(MGM_W422,s_delay);
   and MGM_G491(MGM_W423,MGM_W422,rb_delay);
   not MGM_G492(MGM_W424,si_delay);
   and MGM_G493(MGM_W425,MGM_W424,MGM_W423);
   not MGM_G494(MGM_W426,sleep);
   and MGM_G495(MGM_W427,MGM_W426,MGM_W425);
   and MGM_G496(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W427);
   not MGM_G497(MGM_W428,s_delay);
   and MGM_G498(MGM_W429,MGM_W428,rb_delay);
   not MGM_G499(MGM_W430,si_delay);
   and MGM_G500(MGM_W431,MGM_W430,MGM_W429);
   and MGM_G501(MGM_W432,sleep,MGM_W431);
   and MGM_G502(ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W432);
   not MGM_G503(MGM_W433,s_delay);
   and MGM_G504(MGM_W434,MGM_W433,rb_delay);
   and MGM_G505(MGM_W435,si_delay,MGM_W434);
   not MGM_G506(MGM_W436,sleep);
   and MGM_G507(MGM_W437,MGM_W436,MGM_W435);
   and MGM_G508(ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W437);
   not MGM_G509(MGM_W438,s_delay);
   and MGM_G510(MGM_W439,MGM_W438,rb_delay);
   and MGM_G511(MGM_W440,si_delay,MGM_W439);
   and MGM_G512(MGM_W441,sleep,MGM_W440);
   and MGM_G513(ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W441);
   not MGM_G514(MGM_W442,d_delay);
   not MGM_G515(MGM_W443,s_delay);
   and MGM_G516(MGM_W444,MGM_W443,MGM_W442);
   and MGM_G517(MGM_W445,si_delay,MGM_W444);
   not MGM_G518(MGM_W446,sleep);
   and MGM_G519(MGM_W447,MGM_W446,MGM_W445);
   not MGM_G520(MGM_W448,ssb_delay);
   and MGM_G521(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W448,MGM_W447);
   not MGM_G522(MGM_W449,d_delay);
   not MGM_G523(MGM_W450,s_delay);
   and MGM_G524(MGM_W451,MGM_W450,MGM_W449);
   and MGM_G525(MGM_W452,si_delay,MGM_W451);
   and MGM_G526(MGM_W453,sleep,MGM_W452);
   not MGM_G527(MGM_W454,ssb_delay);
   and MGM_G528(ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W454,MGM_W453);
   not MGM_G529(MGM_W455,s_delay);
   and MGM_G530(MGM_W456,MGM_W455,d_delay);
   not MGM_G531(MGM_W457,si_delay);
   and MGM_G532(MGM_W458,MGM_W457,MGM_W456);
   not MGM_G533(MGM_W459,sleep);
   and MGM_G534(MGM_W460,MGM_W459,MGM_W458);
   and MGM_G535(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W460);
   not MGM_G536(MGM_W461,s_delay);
   and MGM_G537(MGM_W462,MGM_W461,d_delay);
   not MGM_G538(MGM_W463,si_delay);
   and MGM_G539(MGM_W464,MGM_W463,MGM_W462);
   and MGM_G540(MGM_W465,sleep,MGM_W464);
   and MGM_G541(ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W465);
   not MGM_G542(MGM_W466,s_delay);
   and MGM_G543(MGM_W467,MGM_W466,d_delay);
   and MGM_G544(MGM_W468,si_delay,MGM_W467);
   not MGM_G545(MGM_W469,sleep);
   and MGM_G546(MGM_W470,MGM_W469,MGM_W468);
   not MGM_G547(MGM_W471,ssb_delay);
   and MGM_G548(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W471,MGM_W470);
   not MGM_G549(MGM_W472,s_delay);
   and MGM_G550(MGM_W473,MGM_W472,d_delay);
   and MGM_G551(MGM_W474,si_delay,MGM_W473);
   not MGM_G552(MGM_W475,sleep);
   and MGM_G553(MGM_W476,MGM_W475,MGM_W474);
   and MGM_G554(ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W476);
   not MGM_G555(MGM_W477,s_delay);
   and MGM_G556(MGM_W478,MGM_W477,d_delay);
   and MGM_G557(MGM_W479,si_delay,MGM_W478);
   and MGM_G558(MGM_W480,sleep,MGM_W479);
   not MGM_G559(MGM_W481,ssb_delay);
   and MGM_G560(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb,MGM_W481,MGM_W480);
   not MGM_G561(MGM_W482,s_delay);
   and MGM_G562(MGM_W483,MGM_W482,d_delay);
   and MGM_G563(MGM_W484,si_delay,MGM_W483);
   and MGM_G564(MGM_W485,sleep,MGM_W484);
   and MGM_G565(ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W485);
   not MGM_G566(MGM_W486,d_delay);
   and MGM_G567(MGM_W487,rb_delay,MGM_W486);
   not MGM_G568(MGM_W488,si_delay);
   and MGM_G569(MGM_W489,MGM_W488,MGM_W487);
   not MGM_G570(MGM_W490,sleep);
   and MGM_G571(MGM_W491,MGM_W490,MGM_W489);
   not MGM_G572(MGM_W492,ssb_delay);
   and MGM_G573(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W492,MGM_W491);
   not MGM_G574(MGM_W493,d_delay);
   and MGM_G575(MGM_W494,rb_delay,MGM_W493);
   not MGM_G576(MGM_W495,si_delay);
   and MGM_G577(MGM_W496,MGM_W495,MGM_W494);
   not MGM_G578(MGM_W497,sleep);
   and MGM_G579(MGM_W498,MGM_W497,MGM_W496);
   and MGM_G580(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W498);
   not MGM_G581(MGM_W499,d_delay);
   and MGM_G582(MGM_W500,rb_delay,MGM_W499);
   not MGM_G583(MGM_W501,si_delay);
   and MGM_G584(MGM_W502,MGM_W501,MGM_W500);
   and MGM_G585(MGM_W503,sleep,MGM_W502);
   not MGM_G586(MGM_W504,ssb_delay);
   and MGM_G587(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W504,MGM_W503);
   not MGM_G588(MGM_W505,d_delay);
   and MGM_G589(MGM_W506,rb_delay,MGM_W505);
   not MGM_G590(MGM_W507,si_delay);
   and MGM_G591(MGM_W508,MGM_W507,MGM_W506);
   and MGM_G592(MGM_W509,sleep,MGM_W508);
   and MGM_G593(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W509);
   not MGM_G594(MGM_W510,d_delay);
   and MGM_G595(MGM_W511,rb_delay,MGM_W510);
   and MGM_G596(MGM_W512,si_delay,MGM_W511);
   not MGM_G597(MGM_W513,sleep);
   and MGM_G598(MGM_W514,MGM_W513,MGM_W512);
   and MGM_G599(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W514);
   not MGM_G600(MGM_W515,d_delay);
   and MGM_G601(MGM_W516,rb_delay,MGM_W515);
   and MGM_G602(MGM_W517,si_delay,MGM_W516);
   and MGM_G603(MGM_W518,sleep,MGM_W517);
   and MGM_G604(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W518);
   and MGM_G605(MGM_W519,rb_delay,d_delay);
   not MGM_G606(MGM_W520,si_delay);
   and MGM_G607(MGM_W521,MGM_W520,MGM_W519);
   not MGM_G608(MGM_W522,sleep);
   and MGM_G609(MGM_W523,MGM_W522,MGM_W521);
   not MGM_G610(MGM_W524,ssb_delay);
   and MGM_G611(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W524,MGM_W523);
   and MGM_G612(MGM_W525,rb_delay,d_delay);
   not MGM_G613(MGM_W526,si_delay);
   and MGM_G614(MGM_W527,MGM_W526,MGM_W525);
   and MGM_G615(MGM_W528,sleep,MGM_W527);
   not MGM_G616(MGM_W529,ssb_delay);
   and MGM_G617(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G618(MGM_W530,d_delay);
   and MGM_G619(MGM_W531,rb_delay,MGM_W530);
   not MGM_G620(MGM_W532,s_delay);
   and MGM_G621(MGM_W533,MGM_W532,MGM_W531);
   not MGM_G622(MGM_W534,sleep);
   and MGM_G623(MGM_W535,MGM_W534,MGM_W533);
   not MGM_G624(MGM_W536,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G626(MGM_W537,d_delay);
   and MGM_G627(MGM_W538,rb_delay,MGM_W537);
   not MGM_G628(MGM_W539,s_delay);
   and MGM_G629(MGM_W540,MGM_W539,MGM_W538);
   and MGM_G630(MGM_W541,sleep,MGM_W540);
   not MGM_G631(MGM_W542,ssb_delay);
   and MGM_G632(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W542,MGM_W541);
   and MGM_G633(MGM_W543,rb_delay,d_delay);
   not MGM_G634(MGM_W544,s_delay);
   and MGM_G635(MGM_W545,MGM_W544,MGM_W543);
   not MGM_G636(MGM_W546,sleep);
   and MGM_G637(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G638(MGM_W548,ssb_delay);
   and MGM_G639(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb,MGM_W548,MGM_W547);
   and MGM_G640(MGM_W549,rb_delay,d_delay);
   not MGM_G641(MGM_W550,s_delay);
   and MGM_G642(MGM_W551,MGM_W550,MGM_W549);
   and MGM_G643(MGM_W552,sleep,MGM_W551);
   not MGM_G644(MGM_W553,ssb_delay);
   and MGM_G645(ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb,MGM_W553,MGM_W552);
   not MGM_G646(MGM_W554,d_delay);
   and MGM_G647(MGM_W555,rb_delay,MGM_W554);
   not MGM_G648(MGM_W556,s_delay);
   and MGM_G649(MGM_W557,MGM_W556,MGM_W555);
   not MGM_G650(MGM_W558,si_delay);
   and MGM_G651(MGM_W559,MGM_W558,MGM_W557);
   not MGM_G652(MGM_W560,ssb_delay);
   and MGM_G653(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W560,MGM_W559);
   not MGM_G654(MGM_W561,d_delay);
   and MGM_G655(MGM_W562,rb_delay,MGM_W561);
   not MGM_G656(MGM_W563,s_delay);
   and MGM_G657(MGM_W564,MGM_W563,MGM_W562);
   not MGM_G658(MGM_W565,si_delay);
   and MGM_G659(MGM_W566,MGM_W565,MGM_W564);
   and MGM_G660(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W566);
   not MGM_G661(MGM_W567,d_delay);
   and MGM_G662(MGM_W568,rb_delay,MGM_W567);
   not MGM_G663(MGM_W569,s_delay);
   and MGM_G664(MGM_W570,MGM_W569,MGM_W568);
   and MGM_G665(MGM_W571,si_delay,MGM_W570);
   not MGM_G666(MGM_W572,ssb_delay);
   and MGM_G667(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W572,MGM_W571);
   not MGM_G668(MGM_W573,d_delay);
   and MGM_G669(MGM_W574,rb_delay,MGM_W573);
   not MGM_G670(MGM_W575,s_delay);
   and MGM_G671(MGM_W576,MGM_W575,MGM_W574);
   and MGM_G672(MGM_W577,si_delay,MGM_W576);
   and MGM_G673(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W577);
   and MGM_G674(MGM_W578,rb_delay,d_delay);
   not MGM_G675(MGM_W579,s_delay);
   and MGM_G676(MGM_W580,MGM_W579,MGM_W578);
   not MGM_G677(MGM_W581,si_delay);
   and MGM_G678(MGM_W582,MGM_W581,MGM_W580);
   not MGM_G679(MGM_W583,ssb_delay);
   and MGM_G680(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb,MGM_W583,MGM_W582);
   and MGM_G681(MGM_W584,rb_delay,d_delay);
   not MGM_G682(MGM_W585,s_delay);
   and MGM_G683(MGM_W586,MGM_W585,MGM_W584);
   not MGM_G684(MGM_W587,si_delay);
   and MGM_G685(MGM_W588,MGM_W587,MGM_W586);
   and MGM_G686(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb,ssb_delay,MGM_W588);
   and MGM_G687(MGM_W589,rb_delay,d_delay);
   not MGM_G688(MGM_W590,s_delay);
   and MGM_G689(MGM_W591,MGM_W590,MGM_W589);
   and MGM_G690(MGM_W592,si_delay,MGM_W591);
   not MGM_G691(MGM_W593,ssb_delay);
   and MGM_G692(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb,MGM_W593,MGM_W592);
   and MGM_G693(MGM_W594,rb_delay,d_delay);
   not MGM_G694(MGM_W595,s_delay);
   and MGM_G695(MGM_W596,MGM_W595,MGM_W594);
   and MGM_G696(MGM_W597,si_delay,MGM_W596);
   and MGM_G697(ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb,ssb_delay,MGM_W597);
   not MGM_G698(MGM_W598,d_delay);
   and MGM_G699(MGM_W599,rb_delay,MGM_W598);
   not MGM_G700(MGM_W600,s_delay);
   and MGM_G701(MGM_W601,MGM_W600,MGM_W599);
   and MGM_G702(MGM_W602,si_delay,MGM_W601);
   not MGM_G703(MGM_W603,sleep);
   and MGM_G704(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep,MGM_W603,MGM_W602);
   not MGM_G705(MGM_W604,d_delay);
   and MGM_G706(MGM_W605,rb_delay,MGM_W604);
   not MGM_G707(MGM_W606,s_delay);
   and MGM_G708(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G709(MGM_W608,si_delay,MGM_W607);
   and MGM_G710(ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep,sleep,MGM_W608);
   and MGM_G711(MGM_W609,rb_delay,d_delay);
   not MGM_G712(MGM_W610,s_delay);
   and MGM_G713(MGM_W611,MGM_W610,MGM_W609);
   not MGM_G714(MGM_W612,si_delay);
   and MGM_G715(MGM_W613,MGM_W612,MGM_W611);
   not MGM_G716(MGM_W614,sleep);
   and MGM_G717(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep,MGM_W614,MGM_W613);
   and MGM_G718(MGM_W615,rb_delay,d_delay);
   not MGM_G719(MGM_W616,s_delay);
   and MGM_G720(MGM_W617,MGM_W616,MGM_W615);
   not MGM_G721(MGM_W618,si_delay);
   and MGM_G722(MGM_W619,MGM_W618,MGM_W617);
   and MGM_G723(ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep,sleep,MGM_W619);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> o
      (posedge s => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && s==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (posedge rb => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc s --> so
      (posedge s => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1 && s==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_s_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // recrem s-clk-posedge
      $recrem(negedge s,posedge clk,0.0,0.0,notifier,,,s_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_rb_AND_NOT_s_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_rb_AND_NOT_s_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr43ad1d02x5( clk, d, den, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and data enable
// 
// 
// 
// assign  int1 =  den ? d : IQ2;
// assign  int2 =  ssb ? int1 : si;
// 
// always @ (clk or int2 or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= int2;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr43ad_delay o =  IQ2;
// assign `fvzr43ad_delay so =  IQ2;
// 

   input clk, d, den, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d02x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d02x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G590(MGM_W498,d_delay);
   not MGM_G591(MGM_W499,den_delay);
   and MGM_G592(MGM_W500,MGM_W499,MGM_W498);
   and MGM_G593(MGM_W501,rb_delay,MGM_W500);
   not MGM_G594(MGM_W502,si_delay);
   and MGM_G595(MGM_W503,MGM_W502,MGM_W501);
   not MGM_G596(MGM_W504,sleep);
   and MGM_G597(MGM_W505,MGM_W504,MGM_W503);
   not MGM_G598(MGM_W506,ssb_delay);
   and MGM_G599(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W506,MGM_W505);
   not MGM_G600(MGM_W507,d_delay);
   not MGM_G601(MGM_W508,den_delay);
   and MGM_G602(MGM_W509,MGM_W508,MGM_W507);
   and MGM_G603(MGM_W510,rb_delay,MGM_W509);
   not MGM_G604(MGM_W511,si_delay);
   and MGM_G605(MGM_W512,MGM_W511,MGM_W510);
   and MGM_G606(MGM_W513,sleep,MGM_W512);
   not MGM_G607(MGM_W514,ssb_delay);
   and MGM_G608(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W514,MGM_W513);
   not MGM_G609(MGM_W515,d_delay);
   not MGM_G610(MGM_W516,den_delay);
   and MGM_G611(MGM_W517,MGM_W516,MGM_W515);
   and MGM_G612(MGM_W518,rb_delay,MGM_W517);
   not MGM_G613(MGM_W519,si_delay);
   and MGM_G614(MGM_W520,MGM_W519,MGM_W518);
   and MGM_G615(MGM_W521,sleep,MGM_W520);
   and MGM_G616(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W521);
   not MGM_G617(MGM_W522,d_delay);
   not MGM_G618(MGM_W523,den_delay);
   and MGM_G619(MGM_W524,MGM_W523,MGM_W522);
   and MGM_G620(MGM_W525,rb_delay,MGM_W524);
   and MGM_G621(MGM_W526,si_delay,MGM_W525);
   not MGM_G622(MGM_W527,sleep);
   and MGM_G623(MGM_W528,MGM_W527,MGM_W526);
   not MGM_G624(MGM_W529,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G626(MGM_W530,d_delay);
   not MGM_G627(MGM_W531,den_delay);
   and MGM_G628(MGM_W532,MGM_W531,MGM_W530);
   and MGM_G629(MGM_W533,rb_delay,MGM_W532);
   and MGM_G630(MGM_W534,si_delay,MGM_W533);
   and MGM_G631(MGM_W535,sleep,MGM_W534);
   not MGM_G632(MGM_W536,ssb_delay);
   and MGM_G633(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G634(MGM_W537,d_delay);
   not MGM_G635(MGM_W538,den_delay);
   and MGM_G636(MGM_W539,MGM_W538,MGM_W537);
   and MGM_G637(MGM_W540,rb_delay,MGM_W539);
   and MGM_G638(MGM_W541,si_delay,MGM_W540);
   and MGM_G639(MGM_W542,sleep,MGM_W541);
   and MGM_G640(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W542);
   not MGM_G641(MGM_W543,d_delay);
   and MGM_G642(MGM_W544,den_delay,MGM_W543);
   and MGM_G643(MGM_W545,rb_delay,MGM_W544);
   not MGM_G644(MGM_W546,si_delay);
   and MGM_G645(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G646(MGM_W548,sleep);
   and MGM_G647(MGM_W549,MGM_W548,MGM_W547);
   not MGM_G648(MGM_W550,ssb_delay);
   and MGM_G649(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W550,MGM_W549);
   not MGM_G650(MGM_W551,d_delay);
   and MGM_G651(MGM_W552,den_delay,MGM_W551);
   and MGM_G652(MGM_W553,rb_delay,MGM_W552);
   not MGM_G653(MGM_W554,si_delay);
   and MGM_G654(MGM_W555,MGM_W554,MGM_W553);
   not MGM_G655(MGM_W556,sleep);
   and MGM_G656(MGM_W557,MGM_W556,MGM_W555);
   and MGM_G657(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W557);
   not MGM_G658(MGM_W558,d_delay);
   and MGM_G659(MGM_W559,den_delay,MGM_W558);
   and MGM_G660(MGM_W560,rb_delay,MGM_W559);
   not MGM_G661(MGM_W561,si_delay);
   and MGM_G662(MGM_W562,MGM_W561,MGM_W560);
   and MGM_G663(MGM_W563,sleep,MGM_W562);
   not MGM_G664(MGM_W564,ssb_delay);
   and MGM_G665(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W564,MGM_W563);
   not MGM_G666(MGM_W565,d_delay);
   and MGM_G667(MGM_W566,den_delay,MGM_W565);
   and MGM_G668(MGM_W567,rb_delay,MGM_W566);
   not MGM_G669(MGM_W568,si_delay);
   and MGM_G670(MGM_W569,MGM_W568,MGM_W567);
   and MGM_G671(MGM_W570,sleep,MGM_W569);
   and MGM_G672(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W570);
   not MGM_G673(MGM_W571,d_delay);
   and MGM_G674(MGM_W572,den_delay,MGM_W571);
   and MGM_G675(MGM_W573,rb_delay,MGM_W572);
   and MGM_G676(MGM_W574,si_delay,MGM_W573);
   not MGM_G677(MGM_W575,sleep);
   and MGM_G678(MGM_W576,MGM_W575,MGM_W574);
   not MGM_G679(MGM_W577,ssb_delay);
   and MGM_G680(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W577,MGM_W576);
   not MGM_G681(MGM_W578,d_delay);
   and MGM_G682(MGM_W579,den_delay,MGM_W578);
   and MGM_G683(MGM_W580,rb_delay,MGM_W579);
   and MGM_G684(MGM_W581,si_delay,MGM_W580);
   not MGM_G685(MGM_W582,sleep);
   and MGM_G686(MGM_W583,MGM_W582,MGM_W581);
   and MGM_G687(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W583);
   not MGM_G688(MGM_W584,d_delay);
   and MGM_G689(MGM_W585,den_delay,MGM_W584);
   and MGM_G690(MGM_W586,rb_delay,MGM_W585);
   and MGM_G691(MGM_W587,si_delay,MGM_W586);
   and MGM_G692(MGM_W588,sleep,MGM_W587);
   not MGM_G693(MGM_W589,ssb_delay);
   and MGM_G694(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W589,MGM_W588);
   not MGM_G695(MGM_W590,d_delay);
   and MGM_G696(MGM_W591,den_delay,MGM_W590);
   and MGM_G697(MGM_W592,rb_delay,MGM_W591);
   and MGM_G698(MGM_W593,si_delay,MGM_W592);
   and MGM_G699(MGM_W594,sleep,MGM_W593);
   and MGM_G700(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W594);
   not MGM_G701(MGM_W595,den_delay);
   and MGM_G702(MGM_W596,MGM_W595,d_delay);
   and MGM_G703(MGM_W597,rb_delay,MGM_W596);
   not MGM_G704(MGM_W598,si_delay);
   and MGM_G705(MGM_W599,MGM_W598,MGM_W597);
   not MGM_G706(MGM_W600,sleep);
   and MGM_G707(MGM_W601,MGM_W600,MGM_W599);
   not MGM_G708(MGM_W602,ssb_delay);
   and MGM_G709(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W602,MGM_W601);
   not MGM_G710(MGM_W603,den_delay);
   and MGM_G711(MGM_W604,MGM_W603,d_delay);
   and MGM_G712(MGM_W605,rb_delay,MGM_W604);
   not MGM_G713(MGM_W606,si_delay);
   and MGM_G714(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G715(MGM_W608,sleep,MGM_W607);
   not MGM_G716(MGM_W609,ssb_delay);
   and MGM_G717(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W609,MGM_W608);
   not MGM_G718(MGM_W610,den_delay);
   and MGM_G719(MGM_W611,MGM_W610,d_delay);
   and MGM_G720(MGM_W612,rb_delay,MGM_W611);
   not MGM_G721(MGM_W613,si_delay);
   and MGM_G722(MGM_W614,MGM_W613,MGM_W612);
   and MGM_G723(MGM_W615,sleep,MGM_W614);
   and MGM_G724(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W615);
   not MGM_G725(MGM_W616,den_delay);
   and MGM_G726(MGM_W617,MGM_W616,d_delay);
   and MGM_G727(MGM_W618,rb_delay,MGM_W617);
   and MGM_G728(MGM_W619,si_delay,MGM_W618);
   not MGM_G729(MGM_W620,sleep);
   and MGM_G730(MGM_W621,MGM_W620,MGM_W619);
   not MGM_G731(MGM_W622,ssb_delay);
   and MGM_G732(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W622,MGM_W621);
   not MGM_G733(MGM_W623,den_delay);
   and MGM_G734(MGM_W624,MGM_W623,d_delay);
   and MGM_G735(MGM_W625,rb_delay,MGM_W624);
   and MGM_G736(MGM_W626,si_delay,MGM_W625);
   and MGM_G737(MGM_W627,sleep,MGM_W626);
   not MGM_G738(MGM_W628,ssb_delay);
   and MGM_G739(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W628,MGM_W627);
   not MGM_G740(MGM_W629,den_delay);
   and MGM_G741(MGM_W630,MGM_W629,d_delay);
   and MGM_G742(MGM_W631,rb_delay,MGM_W630);
   and MGM_G743(MGM_W632,si_delay,MGM_W631);
   and MGM_G744(MGM_W633,sleep,MGM_W632);
   and MGM_G745(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W633);
   and MGM_G746(MGM_W634,den_delay,d_delay);
   and MGM_G747(MGM_W635,rb_delay,MGM_W634);
   not MGM_G748(MGM_W636,si_delay);
   and MGM_G749(MGM_W637,MGM_W636,MGM_W635);
   not MGM_G750(MGM_W638,sleep);
   and MGM_G751(MGM_W639,MGM_W638,MGM_W637);
   not MGM_G752(MGM_W640,ssb_delay);
   and MGM_G753(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W640,MGM_W639);
   and MGM_G754(MGM_W641,den_delay,d_delay);
   and MGM_G755(MGM_W642,rb_delay,MGM_W641);
   not MGM_G756(MGM_W643,si_delay);
   and MGM_G757(MGM_W644,MGM_W643,MGM_W642);
   not MGM_G758(MGM_W645,sleep);
   and MGM_G759(MGM_W646,MGM_W645,MGM_W644);
   and MGM_G760(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W646);
   and MGM_G761(MGM_W647,den_delay,d_delay);
   and MGM_G762(MGM_W648,rb_delay,MGM_W647);
   not MGM_G763(MGM_W649,si_delay);
   and MGM_G764(MGM_W650,MGM_W649,MGM_W648);
   and MGM_G765(MGM_W651,sleep,MGM_W650);
   not MGM_G766(MGM_W652,ssb_delay);
   and MGM_G767(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W652,MGM_W651);
   and MGM_G768(MGM_W653,den_delay,d_delay);
   and MGM_G769(MGM_W654,rb_delay,MGM_W653);
   not MGM_G770(MGM_W655,si_delay);
   and MGM_G771(MGM_W656,MGM_W655,MGM_W654);
   and MGM_G772(MGM_W657,sleep,MGM_W656);
   and MGM_G773(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W657);
   and MGM_G774(MGM_W658,den_delay,d_delay);
   and MGM_G775(MGM_W659,rb_delay,MGM_W658);
   and MGM_G776(MGM_W660,si_delay,MGM_W659);
   not MGM_G777(MGM_W661,sleep);
   and MGM_G778(MGM_W662,MGM_W661,MGM_W660);
   not MGM_G779(MGM_W663,ssb_delay);
   and MGM_G780(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W663,MGM_W662);
   and MGM_G781(MGM_W664,den_delay,d_delay);
   and MGM_G782(MGM_W665,rb_delay,MGM_W664);
   and MGM_G783(MGM_W666,si_delay,MGM_W665);
   not MGM_G784(MGM_W667,sleep);
   and MGM_G785(MGM_W668,MGM_W667,MGM_W666);
   and MGM_G786(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W668);
   and MGM_G787(MGM_W669,den_delay,d_delay);
   and MGM_G788(MGM_W670,rb_delay,MGM_W669);
   and MGM_G789(MGM_W671,si_delay,MGM_W670);
   and MGM_G790(MGM_W672,sleep,MGM_W671);
   not MGM_G791(MGM_W673,ssb_delay);
   and MGM_G792(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W673,MGM_W672);
   and MGM_G793(MGM_W674,den_delay,d_delay);
   and MGM_G794(MGM_W675,rb_delay,MGM_W674);
   and MGM_G795(MGM_W676,si_delay,MGM_W675);
   and MGM_G796(MGM_W677,sleep,MGM_W676);
   and MGM_G797(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W677);
   and MGM_G798(MGM_W678,rb_delay,den_delay);
   not MGM_G799(MGM_W679,si_delay);
   and MGM_G800(MGM_W680,MGM_W679,MGM_W678);
   not MGM_G801(MGM_W681,sleep);
   and MGM_G802(MGM_W682,MGM_W681,MGM_W680);
   and MGM_G803(ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W682);
   and MGM_G804(MGM_W683,rb_delay,den_delay);
   not MGM_G805(MGM_W684,si_delay);
   and MGM_G806(MGM_W685,MGM_W684,MGM_W683);
   and MGM_G807(MGM_W686,sleep,MGM_W685);
   and MGM_G808(ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W686);
   and MGM_G809(MGM_W687,rb_delay,den_delay);
   and MGM_G810(MGM_W688,si_delay,MGM_W687);
   not MGM_G811(MGM_W689,sleep);
   and MGM_G812(MGM_W690,MGM_W689,MGM_W688);
   and MGM_G813(ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W690);
   and MGM_G814(MGM_W691,rb_delay,den_delay);
   and MGM_G815(MGM_W692,si_delay,MGM_W691);
   and MGM_G816(MGM_W693,sleep,MGM_W692);
   and MGM_G817(ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W693);
   not MGM_G818(MGM_W694,d_delay);
   and MGM_G819(MGM_W695,rb_delay,MGM_W694);
   not MGM_G820(MGM_W696,si_delay);
   and MGM_G821(MGM_W697,MGM_W696,MGM_W695);
   not MGM_G822(MGM_W698,sleep);
   and MGM_G823(MGM_W699,MGM_W698,MGM_W697);
   and MGM_G824(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W699);
   not MGM_G825(MGM_W700,d_delay);
   and MGM_G826(MGM_W701,rb_delay,MGM_W700);
   not MGM_G827(MGM_W702,si_delay);
   and MGM_G828(MGM_W703,MGM_W702,MGM_W701);
   and MGM_G829(MGM_W704,sleep,MGM_W703);
   and MGM_G830(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W704);
   not MGM_G831(MGM_W705,d_delay);
   and MGM_G832(MGM_W706,rb_delay,MGM_W705);
   and MGM_G833(MGM_W707,si_delay,MGM_W706);
   not MGM_G834(MGM_W708,sleep);
   and MGM_G835(MGM_W709,MGM_W708,MGM_W707);
   and MGM_G836(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W709);
   not MGM_G837(MGM_W710,d_delay);
   and MGM_G838(MGM_W711,rb_delay,MGM_W710);
   and MGM_G839(MGM_W712,si_delay,MGM_W711);
   and MGM_G840(MGM_W713,sleep,MGM_W712);
   and MGM_G841(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W713);
   and MGM_G842(MGM_W714,rb_delay,d_delay);
   not MGM_G843(MGM_W715,si_delay);
   and MGM_G844(MGM_W716,MGM_W715,MGM_W714);
   not MGM_G845(MGM_W717,sleep);
   and MGM_G846(MGM_W718,MGM_W717,MGM_W716);
   and MGM_G847(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W718);
   and MGM_G848(MGM_W719,rb_delay,d_delay);
   not MGM_G849(MGM_W720,si_delay);
   and MGM_G850(MGM_W721,MGM_W720,MGM_W719);
   and MGM_G851(MGM_W722,sleep,MGM_W721);
   and MGM_G852(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W722);
   and MGM_G853(MGM_W723,rb_delay,d_delay);
   and MGM_G854(MGM_W724,si_delay,MGM_W723);
   not MGM_G855(MGM_W725,sleep);
   and MGM_G856(MGM_W726,MGM_W725,MGM_W724);
   and MGM_G857(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W726);
   and MGM_G858(MGM_W727,rb_delay,d_delay);
   and MGM_G859(MGM_W728,si_delay,MGM_W727);
   and MGM_G860(MGM_W729,sleep,MGM_W728);
   and MGM_G861(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W729);
   not MGM_G862(MGM_W730,d_delay);
   not MGM_G863(MGM_W731,den_delay);
   and MGM_G864(MGM_W732,MGM_W731,MGM_W730);
   not MGM_G865(MGM_W733,si_delay);
   and MGM_G866(MGM_W734,MGM_W733,MGM_W732);
   and MGM_G867(MGM_W735,sleep,MGM_W734);
   and MGM_G868(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W735);
   not MGM_G869(MGM_W736,d_delay);
   not MGM_G870(MGM_W737,den_delay);
   and MGM_G871(MGM_W738,MGM_W737,MGM_W736);
   and MGM_G872(MGM_W739,si_delay,MGM_W738);
   not MGM_G873(MGM_W740,sleep);
   and MGM_G874(MGM_W741,MGM_W740,MGM_W739);
   not MGM_G875(MGM_W742,ssb_delay);
   and MGM_G876(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W742,MGM_W741);
   not MGM_G877(MGM_W743,d_delay);
   not MGM_G878(MGM_W744,den_delay);
   and MGM_G879(MGM_W745,MGM_W744,MGM_W743);
   and MGM_G880(MGM_W746,si_delay,MGM_W745);
   and MGM_G881(MGM_W747,sleep,MGM_W746);
   not MGM_G882(MGM_W748,ssb_delay);
   and MGM_G883(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W748,MGM_W747);
   not MGM_G884(MGM_W749,d_delay);
   not MGM_G885(MGM_W750,den_delay);
   and MGM_G886(MGM_W751,MGM_W750,MGM_W749);
   and MGM_G887(MGM_W752,si_delay,MGM_W751);
   and MGM_G888(MGM_W753,sleep,MGM_W752);
   and MGM_G889(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W753);
   not MGM_G890(MGM_W754,d_delay);
   and MGM_G891(MGM_W755,den_delay,MGM_W754);
   and MGM_G892(MGM_W756,si_delay,MGM_W755);
   not MGM_G893(MGM_W757,sleep);
   and MGM_G894(MGM_W758,MGM_W757,MGM_W756);
   not MGM_G895(MGM_W759,ssb_delay);
   and MGM_G896(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W759,MGM_W758);
   not MGM_G897(MGM_W760,d_delay);
   and MGM_G898(MGM_W761,den_delay,MGM_W760);
   and MGM_G899(MGM_W762,si_delay,MGM_W761);
   and MGM_G900(MGM_W763,sleep,MGM_W762);
   not MGM_G901(MGM_W764,ssb_delay);
   and MGM_G902(ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W764,MGM_W763);
   not MGM_G903(MGM_W765,den_delay);
   and MGM_G904(MGM_W766,MGM_W765,d_delay);
   not MGM_G905(MGM_W767,si_delay);
   and MGM_G906(MGM_W768,MGM_W767,MGM_W766);
   and MGM_G907(MGM_W769,sleep,MGM_W768);
   and MGM_G908(ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W769);
   not MGM_G909(MGM_W770,den_delay);
   and MGM_G910(MGM_W771,MGM_W770,d_delay);
   and MGM_G911(MGM_W772,si_delay,MGM_W771);
   not MGM_G912(MGM_W773,sleep);
   and MGM_G913(MGM_W774,MGM_W773,MGM_W772);
   not MGM_G914(MGM_W775,ssb_delay);
   and MGM_G915(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W775,MGM_W774);
   not MGM_G916(MGM_W776,den_delay);
   and MGM_G917(MGM_W777,MGM_W776,d_delay);
   and MGM_G918(MGM_W778,si_delay,MGM_W777);
   and MGM_G919(MGM_W779,sleep,MGM_W778);
   not MGM_G920(MGM_W780,ssb_delay);
   and MGM_G921(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W780,MGM_W779);
   not MGM_G922(MGM_W781,den_delay);
   and MGM_G923(MGM_W782,MGM_W781,d_delay);
   and MGM_G924(MGM_W783,si_delay,MGM_W782);
   and MGM_G925(MGM_W784,sleep,MGM_W783);
   and MGM_G926(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W784);
   and MGM_G927(MGM_W785,den_delay,d_delay);
   not MGM_G928(MGM_W786,si_delay);
   and MGM_G929(MGM_W787,MGM_W786,MGM_W785);
   not MGM_G930(MGM_W788,sleep);
   and MGM_G931(MGM_W789,MGM_W788,MGM_W787);
   and MGM_G932(ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W789);
   and MGM_G933(MGM_W790,den_delay,d_delay);
   not MGM_G934(MGM_W791,si_delay);
   and MGM_G935(MGM_W792,MGM_W791,MGM_W790);
   and MGM_G936(MGM_W793,sleep,MGM_W792);
   and MGM_G937(ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W793);
   and MGM_G938(MGM_W794,den_delay,d_delay);
   and MGM_G939(MGM_W795,si_delay,MGM_W794);
   not MGM_G940(MGM_W796,sleep);
   and MGM_G941(MGM_W797,MGM_W796,MGM_W795);
   not MGM_G942(MGM_W798,ssb_delay);
   and MGM_G943(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W798,MGM_W797);
   and MGM_G944(MGM_W799,den_delay,d_delay);
   and MGM_G945(MGM_W800,si_delay,MGM_W799);
   not MGM_G946(MGM_W801,sleep);
   and MGM_G947(MGM_W802,MGM_W801,MGM_W800);
   and MGM_G948(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W802);
   and MGM_G949(MGM_W803,den_delay,d_delay);
   and MGM_G950(MGM_W804,si_delay,MGM_W803);
   and MGM_G951(MGM_W805,sleep,MGM_W804);
   not MGM_G952(MGM_W806,ssb_delay);
   and MGM_G953(ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W806,MGM_W805);
   and MGM_G954(MGM_W807,den_delay,d_delay);
   and MGM_G955(MGM_W808,si_delay,MGM_W807);
   and MGM_G956(MGM_W809,sleep,MGM_W808);
   and MGM_G957(ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W809);
   not MGM_G958(MGM_W810,d_delay);
   not MGM_G959(MGM_W811,den_delay);
   and MGM_G960(MGM_W812,MGM_W811,MGM_W810);
   and MGM_G961(MGM_W813,rb_delay,MGM_W812);
   not MGM_G962(MGM_W814,sleep);
   and MGM_G963(MGM_W815,MGM_W814,MGM_W813);
   not MGM_G964(MGM_W816,ssb_delay);
   and MGM_G965(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W816,MGM_W815);
   not MGM_G966(MGM_W817,d_delay);
   not MGM_G967(MGM_W818,den_delay);
   and MGM_G968(MGM_W819,MGM_W818,MGM_W817);
   and MGM_G969(MGM_W820,rb_delay,MGM_W819);
   and MGM_G970(MGM_W821,sleep,MGM_W820);
   not MGM_G971(MGM_W822,ssb_delay);
   and MGM_G972(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W822,MGM_W821);
   not MGM_G973(MGM_W823,d_delay);
   and MGM_G974(MGM_W824,den_delay,MGM_W823);
   and MGM_G975(MGM_W825,rb_delay,MGM_W824);
   not MGM_G976(MGM_W826,sleep);
   and MGM_G977(MGM_W827,MGM_W826,MGM_W825);
   not MGM_G978(MGM_W828,ssb_delay);
   and MGM_G979(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W828,MGM_W827);
   not MGM_G980(MGM_W829,d_delay);
   and MGM_G981(MGM_W830,den_delay,MGM_W829);
   and MGM_G982(MGM_W831,rb_delay,MGM_W830);
   and MGM_G983(MGM_W832,sleep,MGM_W831);
   not MGM_G984(MGM_W833,ssb_delay);
   and MGM_G985(ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W833,MGM_W832);
   not MGM_G986(MGM_W834,den_delay);
   and MGM_G987(MGM_W835,MGM_W834,d_delay);
   and MGM_G988(MGM_W836,rb_delay,MGM_W835);
   not MGM_G989(MGM_W837,sleep);
   and MGM_G990(MGM_W838,MGM_W837,MGM_W836);
   not MGM_G991(MGM_W839,ssb_delay);
   and MGM_G992(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W839,MGM_W838);
   not MGM_G993(MGM_W840,den_delay);
   and MGM_G994(MGM_W841,MGM_W840,d_delay);
   and MGM_G995(MGM_W842,rb_delay,MGM_W841);
   and MGM_G996(MGM_W843,sleep,MGM_W842);
   not MGM_G997(MGM_W844,ssb_delay);
   and MGM_G998(ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W844,MGM_W843);
   and MGM_G999(MGM_W845,den_delay,d_delay);
   and MGM_G1000(MGM_W846,rb_delay,MGM_W845);
   not MGM_G1001(MGM_W847,sleep);
   and MGM_G1002(MGM_W848,MGM_W847,MGM_W846);
   not MGM_G1003(MGM_W849,ssb_delay);
   and MGM_G1004(ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W849,MGM_W848);
   and MGM_G1005(MGM_W850,den_delay,d_delay);
   and MGM_G1006(MGM_W851,rb_delay,MGM_W850);
   and MGM_G1007(MGM_W852,sleep,MGM_W851);
   not MGM_G1008(MGM_W853,ssb_delay);
   and MGM_G1009(ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W853,MGM_W852);
   not MGM_G1010(MGM_W854,d_delay);
   not MGM_G1011(MGM_W855,den_delay);
   and MGM_G1012(MGM_W856,MGM_W855,MGM_W854);
   and MGM_G1013(MGM_W857,rb_delay,MGM_W856);
   not MGM_G1014(MGM_W858,si_delay);
   and MGM_G1015(MGM_W859,MGM_W858,MGM_W857);
   not MGM_G1016(MGM_W860,ssb_delay);
   and MGM_G1017(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W860,MGM_W859);
   not MGM_G1018(MGM_W861,d_delay);
   not MGM_G1019(MGM_W862,den_delay);
   and MGM_G1020(MGM_W863,MGM_W862,MGM_W861);
   and MGM_G1021(MGM_W864,rb_delay,MGM_W863);
   not MGM_G1022(MGM_W865,si_delay);
   and MGM_G1023(MGM_W866,MGM_W865,MGM_W864);
   and MGM_G1024(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W866);
   not MGM_G1025(MGM_W867,d_delay);
   not MGM_G1026(MGM_W868,den_delay);
   and MGM_G1027(MGM_W869,MGM_W868,MGM_W867);
   and MGM_G1028(MGM_W870,rb_delay,MGM_W869);
   and MGM_G1029(MGM_W871,si_delay,MGM_W870);
   not MGM_G1030(MGM_W872,ssb_delay);
   and MGM_G1031(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W872,MGM_W871);
   not MGM_G1032(MGM_W873,d_delay);
   not MGM_G1033(MGM_W874,den_delay);
   and MGM_G1034(MGM_W875,MGM_W874,MGM_W873);
   and MGM_G1035(MGM_W876,rb_delay,MGM_W875);
   and MGM_G1036(MGM_W877,si_delay,MGM_W876);
   and MGM_G1037(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W877);
   not MGM_G1038(MGM_W878,d_delay);
   and MGM_G1039(MGM_W879,den_delay,MGM_W878);
   and MGM_G1040(MGM_W880,rb_delay,MGM_W879);
   not MGM_G1041(MGM_W881,si_delay);
   and MGM_G1042(MGM_W882,MGM_W881,MGM_W880);
   not MGM_G1043(MGM_W883,ssb_delay);
   and MGM_G1044(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W883,MGM_W882);
   not MGM_G1045(MGM_W884,d_delay);
   and MGM_G1046(MGM_W885,den_delay,MGM_W884);
   and MGM_G1047(MGM_W886,rb_delay,MGM_W885);
   not MGM_G1048(MGM_W887,si_delay);
   and MGM_G1049(MGM_W888,MGM_W887,MGM_W886);
   and MGM_G1050(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W888);
   not MGM_G1051(MGM_W889,d_delay);
   and MGM_G1052(MGM_W890,den_delay,MGM_W889);
   and MGM_G1053(MGM_W891,rb_delay,MGM_W890);
   and MGM_G1054(MGM_W892,si_delay,MGM_W891);
   not MGM_G1055(MGM_W893,ssb_delay);
   and MGM_G1056(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W893,MGM_W892);
   not MGM_G1057(MGM_W894,d_delay);
   and MGM_G1058(MGM_W895,den_delay,MGM_W894);
   and MGM_G1059(MGM_W896,rb_delay,MGM_W895);
   and MGM_G1060(MGM_W897,si_delay,MGM_W896);
   and MGM_G1061(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W897);
   not MGM_G1062(MGM_W898,den_delay);
   and MGM_G1063(MGM_W899,MGM_W898,d_delay);
   and MGM_G1064(MGM_W900,rb_delay,MGM_W899);
   not MGM_G1065(MGM_W901,si_delay);
   and MGM_G1066(MGM_W902,MGM_W901,MGM_W900);
   not MGM_G1067(MGM_W903,ssb_delay);
   and MGM_G1068(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W903,MGM_W902);
   not MGM_G1069(MGM_W904,den_delay);
   and MGM_G1070(MGM_W905,MGM_W904,d_delay);
   and MGM_G1071(MGM_W906,rb_delay,MGM_W905);
   not MGM_G1072(MGM_W907,si_delay);
   and MGM_G1073(MGM_W908,MGM_W907,MGM_W906);
   and MGM_G1074(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W908);
   not MGM_G1075(MGM_W909,den_delay);
   and MGM_G1076(MGM_W910,MGM_W909,d_delay);
   and MGM_G1077(MGM_W911,rb_delay,MGM_W910);
   and MGM_G1078(MGM_W912,si_delay,MGM_W911);
   not MGM_G1079(MGM_W913,ssb_delay);
   and MGM_G1080(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W913,MGM_W912);
   not MGM_G1081(MGM_W914,den_delay);
   and MGM_G1082(MGM_W915,MGM_W914,d_delay);
   and MGM_G1083(MGM_W916,rb_delay,MGM_W915);
   and MGM_G1084(MGM_W917,si_delay,MGM_W916);
   and MGM_G1085(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W917);
   and MGM_G1086(MGM_W918,den_delay,d_delay);
   and MGM_G1087(MGM_W919,rb_delay,MGM_W918);
   not MGM_G1088(MGM_W920,si_delay);
   and MGM_G1089(MGM_W921,MGM_W920,MGM_W919);
   not MGM_G1090(MGM_W922,ssb_delay);
   and MGM_G1091(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W922,MGM_W921);
   and MGM_G1092(MGM_W923,den_delay,d_delay);
   and MGM_G1093(MGM_W924,rb_delay,MGM_W923);
   not MGM_G1094(MGM_W925,si_delay);
   and MGM_G1095(MGM_W926,MGM_W925,MGM_W924);
   and MGM_G1096(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W926);
   and MGM_G1097(MGM_W927,den_delay,d_delay);
   and MGM_G1098(MGM_W928,rb_delay,MGM_W927);
   and MGM_G1099(MGM_W929,si_delay,MGM_W928);
   not MGM_G1100(MGM_W930,ssb_delay);
   and MGM_G1101(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W930,MGM_W929);
   and MGM_G1102(MGM_W931,den_delay,d_delay);
   and MGM_G1103(MGM_W932,rb_delay,MGM_W931);
   and MGM_G1104(MGM_W933,si_delay,MGM_W932);
   and MGM_G1105(ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W933);
   not MGM_G1106(MGM_W934,d_delay);
   not MGM_G1107(MGM_W935,den_delay);
   and MGM_G1108(MGM_W936,MGM_W935,MGM_W934);
   and MGM_G1109(MGM_W937,rb_delay,MGM_W936);
   not MGM_G1110(MGM_W938,si_delay);
   and MGM_G1111(MGM_W939,MGM_W938,MGM_W937);
   not MGM_G1112(MGM_W940,sleep);
   and MGM_G1113(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W940,MGM_W939);
   not MGM_G1114(MGM_W941,d_delay);
   not MGM_G1115(MGM_W942,den_delay);
   and MGM_G1116(MGM_W943,MGM_W942,MGM_W941);
   and MGM_G1117(MGM_W944,rb_delay,MGM_W943);
   not MGM_G1118(MGM_W945,si_delay);
   and MGM_G1119(MGM_W946,MGM_W945,MGM_W944);
   and MGM_G1120(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W946);
   not MGM_G1121(MGM_W947,d_delay);
   not MGM_G1122(MGM_W948,den_delay);
   and MGM_G1123(MGM_W949,MGM_W948,MGM_W947);
   and MGM_G1124(MGM_W950,rb_delay,MGM_W949);
   and MGM_G1125(MGM_W951,si_delay,MGM_W950);
   not MGM_G1126(MGM_W952,sleep);
   and MGM_G1127(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W952,MGM_W951);
   not MGM_G1128(MGM_W953,d_delay);
   not MGM_G1129(MGM_W954,den_delay);
   and MGM_G1130(MGM_W955,MGM_W954,MGM_W953);
   and MGM_G1131(MGM_W956,rb_delay,MGM_W955);
   and MGM_G1132(MGM_W957,si_delay,MGM_W956);
   and MGM_G1133(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W957);
   not MGM_G1134(MGM_W958,d_delay);
   and MGM_G1135(MGM_W959,den_delay,MGM_W958);
   and MGM_G1136(MGM_W960,rb_delay,MGM_W959);
   and MGM_G1137(MGM_W961,si_delay,MGM_W960);
   not MGM_G1138(MGM_W962,sleep);
   and MGM_G1139(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W962,MGM_W961);
   not MGM_G1140(MGM_W963,d_delay);
   and MGM_G1141(MGM_W964,den_delay,MGM_W963);
   and MGM_G1142(MGM_W965,rb_delay,MGM_W964);
   and MGM_G1143(MGM_W966,si_delay,MGM_W965);
   and MGM_G1144(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W966);
   not MGM_G1145(MGM_W967,den_delay);
   and MGM_G1146(MGM_W968,MGM_W967,d_delay);
   and MGM_G1147(MGM_W969,rb_delay,MGM_W968);
   not MGM_G1148(MGM_W970,si_delay);
   and MGM_G1149(MGM_W971,MGM_W970,MGM_W969);
   not MGM_G1150(MGM_W972,sleep);
   and MGM_G1151(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W972,MGM_W971);
   not MGM_G1152(MGM_W973,den_delay);
   and MGM_G1153(MGM_W974,MGM_W973,d_delay);
   and MGM_G1154(MGM_W975,rb_delay,MGM_W974);
   not MGM_G1155(MGM_W976,si_delay);
   and MGM_G1156(MGM_W977,MGM_W976,MGM_W975);
   and MGM_G1157(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W977);
   not MGM_G1158(MGM_W978,den_delay);
   and MGM_G1159(MGM_W979,MGM_W978,d_delay);
   and MGM_G1160(MGM_W980,rb_delay,MGM_W979);
   and MGM_G1161(MGM_W981,si_delay,MGM_W980);
   not MGM_G1162(MGM_W982,sleep);
   and MGM_G1163(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W982,MGM_W981);
   not MGM_G1164(MGM_W983,den_delay);
   and MGM_G1165(MGM_W984,MGM_W983,d_delay);
   and MGM_G1166(MGM_W985,rb_delay,MGM_W984);
   and MGM_G1167(MGM_W986,si_delay,MGM_W985);
   and MGM_G1168(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W986);
   and MGM_G1169(MGM_W987,den_delay,d_delay);
   and MGM_G1170(MGM_W988,rb_delay,MGM_W987);
   not MGM_G1171(MGM_W989,si_delay);
   and MGM_G1172(MGM_W990,MGM_W989,MGM_W988);
   not MGM_G1173(MGM_W991,sleep);
   and MGM_G1174(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W991,MGM_W990);
   and MGM_G1175(MGM_W992,den_delay,d_delay);
   and MGM_G1176(MGM_W993,rb_delay,MGM_W992);
   not MGM_G1177(MGM_W994,si_delay);
   and MGM_G1178(MGM_W995,MGM_W994,MGM_W993);
   and MGM_G1179(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W995);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr43ad1d03x5( clk, d, den, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and data enable
// 
// 
// 
// assign  int1 =  den ? d : IQ2;
// assign  int2 =  ssb ? int1 : si;
// 
// always @ (clk or int2 or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= int2;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr43ad_delay o =  IQ2;
// assign `fvzr43ad_delay so =  IQ2;
// 

   input clk, d, den, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d03x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d03x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G590(MGM_W498,d_delay);
   not MGM_G591(MGM_W499,den_delay);
   and MGM_G592(MGM_W500,MGM_W499,MGM_W498);
   and MGM_G593(MGM_W501,rb_delay,MGM_W500);
   not MGM_G594(MGM_W502,si_delay);
   and MGM_G595(MGM_W503,MGM_W502,MGM_W501);
   not MGM_G596(MGM_W504,sleep);
   and MGM_G597(MGM_W505,MGM_W504,MGM_W503);
   not MGM_G598(MGM_W506,ssb_delay);
   and MGM_G599(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W506,MGM_W505);
   not MGM_G600(MGM_W507,d_delay);
   not MGM_G601(MGM_W508,den_delay);
   and MGM_G602(MGM_W509,MGM_W508,MGM_W507);
   and MGM_G603(MGM_W510,rb_delay,MGM_W509);
   not MGM_G604(MGM_W511,si_delay);
   and MGM_G605(MGM_W512,MGM_W511,MGM_W510);
   and MGM_G606(MGM_W513,sleep,MGM_W512);
   not MGM_G607(MGM_W514,ssb_delay);
   and MGM_G608(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W514,MGM_W513);
   not MGM_G609(MGM_W515,d_delay);
   not MGM_G610(MGM_W516,den_delay);
   and MGM_G611(MGM_W517,MGM_W516,MGM_W515);
   and MGM_G612(MGM_W518,rb_delay,MGM_W517);
   not MGM_G613(MGM_W519,si_delay);
   and MGM_G614(MGM_W520,MGM_W519,MGM_W518);
   and MGM_G615(MGM_W521,sleep,MGM_W520);
   and MGM_G616(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W521);
   not MGM_G617(MGM_W522,d_delay);
   not MGM_G618(MGM_W523,den_delay);
   and MGM_G619(MGM_W524,MGM_W523,MGM_W522);
   and MGM_G620(MGM_W525,rb_delay,MGM_W524);
   and MGM_G621(MGM_W526,si_delay,MGM_W525);
   not MGM_G622(MGM_W527,sleep);
   and MGM_G623(MGM_W528,MGM_W527,MGM_W526);
   not MGM_G624(MGM_W529,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G626(MGM_W530,d_delay);
   not MGM_G627(MGM_W531,den_delay);
   and MGM_G628(MGM_W532,MGM_W531,MGM_W530);
   and MGM_G629(MGM_W533,rb_delay,MGM_W532);
   and MGM_G630(MGM_W534,si_delay,MGM_W533);
   and MGM_G631(MGM_W535,sleep,MGM_W534);
   not MGM_G632(MGM_W536,ssb_delay);
   and MGM_G633(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G634(MGM_W537,d_delay);
   not MGM_G635(MGM_W538,den_delay);
   and MGM_G636(MGM_W539,MGM_W538,MGM_W537);
   and MGM_G637(MGM_W540,rb_delay,MGM_W539);
   and MGM_G638(MGM_W541,si_delay,MGM_W540);
   and MGM_G639(MGM_W542,sleep,MGM_W541);
   and MGM_G640(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W542);
   not MGM_G641(MGM_W543,d_delay);
   and MGM_G642(MGM_W544,den_delay,MGM_W543);
   and MGM_G643(MGM_W545,rb_delay,MGM_W544);
   not MGM_G644(MGM_W546,si_delay);
   and MGM_G645(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G646(MGM_W548,sleep);
   and MGM_G647(MGM_W549,MGM_W548,MGM_W547);
   not MGM_G648(MGM_W550,ssb_delay);
   and MGM_G649(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W550,MGM_W549);
   not MGM_G650(MGM_W551,d_delay);
   and MGM_G651(MGM_W552,den_delay,MGM_W551);
   and MGM_G652(MGM_W553,rb_delay,MGM_W552);
   not MGM_G653(MGM_W554,si_delay);
   and MGM_G654(MGM_W555,MGM_W554,MGM_W553);
   not MGM_G655(MGM_W556,sleep);
   and MGM_G656(MGM_W557,MGM_W556,MGM_W555);
   and MGM_G657(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W557);
   not MGM_G658(MGM_W558,d_delay);
   and MGM_G659(MGM_W559,den_delay,MGM_W558);
   and MGM_G660(MGM_W560,rb_delay,MGM_W559);
   not MGM_G661(MGM_W561,si_delay);
   and MGM_G662(MGM_W562,MGM_W561,MGM_W560);
   and MGM_G663(MGM_W563,sleep,MGM_W562);
   not MGM_G664(MGM_W564,ssb_delay);
   and MGM_G665(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W564,MGM_W563);
   not MGM_G666(MGM_W565,d_delay);
   and MGM_G667(MGM_W566,den_delay,MGM_W565);
   and MGM_G668(MGM_W567,rb_delay,MGM_W566);
   not MGM_G669(MGM_W568,si_delay);
   and MGM_G670(MGM_W569,MGM_W568,MGM_W567);
   and MGM_G671(MGM_W570,sleep,MGM_W569);
   and MGM_G672(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W570);
   not MGM_G673(MGM_W571,d_delay);
   and MGM_G674(MGM_W572,den_delay,MGM_W571);
   and MGM_G675(MGM_W573,rb_delay,MGM_W572);
   and MGM_G676(MGM_W574,si_delay,MGM_W573);
   not MGM_G677(MGM_W575,sleep);
   and MGM_G678(MGM_W576,MGM_W575,MGM_W574);
   not MGM_G679(MGM_W577,ssb_delay);
   and MGM_G680(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W577,MGM_W576);
   not MGM_G681(MGM_W578,d_delay);
   and MGM_G682(MGM_W579,den_delay,MGM_W578);
   and MGM_G683(MGM_W580,rb_delay,MGM_W579);
   and MGM_G684(MGM_W581,si_delay,MGM_W580);
   not MGM_G685(MGM_W582,sleep);
   and MGM_G686(MGM_W583,MGM_W582,MGM_W581);
   and MGM_G687(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W583);
   not MGM_G688(MGM_W584,d_delay);
   and MGM_G689(MGM_W585,den_delay,MGM_W584);
   and MGM_G690(MGM_W586,rb_delay,MGM_W585);
   and MGM_G691(MGM_W587,si_delay,MGM_W586);
   and MGM_G692(MGM_W588,sleep,MGM_W587);
   not MGM_G693(MGM_W589,ssb_delay);
   and MGM_G694(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W589,MGM_W588);
   not MGM_G695(MGM_W590,d_delay);
   and MGM_G696(MGM_W591,den_delay,MGM_W590);
   and MGM_G697(MGM_W592,rb_delay,MGM_W591);
   and MGM_G698(MGM_W593,si_delay,MGM_W592);
   and MGM_G699(MGM_W594,sleep,MGM_W593);
   and MGM_G700(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W594);
   not MGM_G701(MGM_W595,den_delay);
   and MGM_G702(MGM_W596,MGM_W595,d_delay);
   and MGM_G703(MGM_W597,rb_delay,MGM_W596);
   not MGM_G704(MGM_W598,si_delay);
   and MGM_G705(MGM_W599,MGM_W598,MGM_W597);
   not MGM_G706(MGM_W600,sleep);
   and MGM_G707(MGM_W601,MGM_W600,MGM_W599);
   not MGM_G708(MGM_W602,ssb_delay);
   and MGM_G709(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W602,MGM_W601);
   not MGM_G710(MGM_W603,den_delay);
   and MGM_G711(MGM_W604,MGM_W603,d_delay);
   and MGM_G712(MGM_W605,rb_delay,MGM_W604);
   not MGM_G713(MGM_W606,si_delay);
   and MGM_G714(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G715(MGM_W608,sleep,MGM_W607);
   not MGM_G716(MGM_W609,ssb_delay);
   and MGM_G717(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W609,MGM_W608);
   not MGM_G718(MGM_W610,den_delay);
   and MGM_G719(MGM_W611,MGM_W610,d_delay);
   and MGM_G720(MGM_W612,rb_delay,MGM_W611);
   not MGM_G721(MGM_W613,si_delay);
   and MGM_G722(MGM_W614,MGM_W613,MGM_W612);
   and MGM_G723(MGM_W615,sleep,MGM_W614);
   and MGM_G724(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W615);
   not MGM_G725(MGM_W616,den_delay);
   and MGM_G726(MGM_W617,MGM_W616,d_delay);
   and MGM_G727(MGM_W618,rb_delay,MGM_W617);
   and MGM_G728(MGM_W619,si_delay,MGM_W618);
   not MGM_G729(MGM_W620,sleep);
   and MGM_G730(MGM_W621,MGM_W620,MGM_W619);
   not MGM_G731(MGM_W622,ssb_delay);
   and MGM_G732(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W622,MGM_W621);
   not MGM_G733(MGM_W623,den_delay);
   and MGM_G734(MGM_W624,MGM_W623,d_delay);
   and MGM_G735(MGM_W625,rb_delay,MGM_W624);
   and MGM_G736(MGM_W626,si_delay,MGM_W625);
   and MGM_G737(MGM_W627,sleep,MGM_W626);
   not MGM_G738(MGM_W628,ssb_delay);
   and MGM_G739(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W628,MGM_W627);
   not MGM_G740(MGM_W629,den_delay);
   and MGM_G741(MGM_W630,MGM_W629,d_delay);
   and MGM_G742(MGM_W631,rb_delay,MGM_W630);
   and MGM_G743(MGM_W632,si_delay,MGM_W631);
   and MGM_G744(MGM_W633,sleep,MGM_W632);
   and MGM_G745(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W633);
   and MGM_G746(MGM_W634,den_delay,d_delay);
   and MGM_G747(MGM_W635,rb_delay,MGM_W634);
   not MGM_G748(MGM_W636,si_delay);
   and MGM_G749(MGM_W637,MGM_W636,MGM_W635);
   not MGM_G750(MGM_W638,sleep);
   and MGM_G751(MGM_W639,MGM_W638,MGM_W637);
   not MGM_G752(MGM_W640,ssb_delay);
   and MGM_G753(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W640,MGM_W639);
   and MGM_G754(MGM_W641,den_delay,d_delay);
   and MGM_G755(MGM_W642,rb_delay,MGM_W641);
   not MGM_G756(MGM_W643,si_delay);
   and MGM_G757(MGM_W644,MGM_W643,MGM_W642);
   not MGM_G758(MGM_W645,sleep);
   and MGM_G759(MGM_W646,MGM_W645,MGM_W644);
   and MGM_G760(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W646);
   and MGM_G761(MGM_W647,den_delay,d_delay);
   and MGM_G762(MGM_W648,rb_delay,MGM_W647);
   not MGM_G763(MGM_W649,si_delay);
   and MGM_G764(MGM_W650,MGM_W649,MGM_W648);
   and MGM_G765(MGM_W651,sleep,MGM_W650);
   not MGM_G766(MGM_W652,ssb_delay);
   and MGM_G767(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W652,MGM_W651);
   and MGM_G768(MGM_W653,den_delay,d_delay);
   and MGM_G769(MGM_W654,rb_delay,MGM_W653);
   not MGM_G770(MGM_W655,si_delay);
   and MGM_G771(MGM_W656,MGM_W655,MGM_W654);
   and MGM_G772(MGM_W657,sleep,MGM_W656);
   and MGM_G773(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W657);
   and MGM_G774(MGM_W658,den_delay,d_delay);
   and MGM_G775(MGM_W659,rb_delay,MGM_W658);
   and MGM_G776(MGM_W660,si_delay,MGM_W659);
   not MGM_G777(MGM_W661,sleep);
   and MGM_G778(MGM_W662,MGM_W661,MGM_W660);
   not MGM_G779(MGM_W663,ssb_delay);
   and MGM_G780(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W663,MGM_W662);
   and MGM_G781(MGM_W664,den_delay,d_delay);
   and MGM_G782(MGM_W665,rb_delay,MGM_W664);
   and MGM_G783(MGM_W666,si_delay,MGM_W665);
   not MGM_G784(MGM_W667,sleep);
   and MGM_G785(MGM_W668,MGM_W667,MGM_W666);
   and MGM_G786(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W668);
   and MGM_G787(MGM_W669,den_delay,d_delay);
   and MGM_G788(MGM_W670,rb_delay,MGM_W669);
   and MGM_G789(MGM_W671,si_delay,MGM_W670);
   and MGM_G790(MGM_W672,sleep,MGM_W671);
   not MGM_G791(MGM_W673,ssb_delay);
   and MGM_G792(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W673,MGM_W672);
   and MGM_G793(MGM_W674,den_delay,d_delay);
   and MGM_G794(MGM_W675,rb_delay,MGM_W674);
   and MGM_G795(MGM_W676,si_delay,MGM_W675);
   and MGM_G796(MGM_W677,sleep,MGM_W676);
   and MGM_G797(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W677);
   and MGM_G798(MGM_W678,rb_delay,den_delay);
   not MGM_G799(MGM_W679,si_delay);
   and MGM_G800(MGM_W680,MGM_W679,MGM_W678);
   not MGM_G801(MGM_W681,sleep);
   and MGM_G802(MGM_W682,MGM_W681,MGM_W680);
   and MGM_G803(ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W682);
   and MGM_G804(MGM_W683,rb_delay,den_delay);
   not MGM_G805(MGM_W684,si_delay);
   and MGM_G806(MGM_W685,MGM_W684,MGM_W683);
   and MGM_G807(MGM_W686,sleep,MGM_W685);
   and MGM_G808(ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W686);
   and MGM_G809(MGM_W687,rb_delay,den_delay);
   and MGM_G810(MGM_W688,si_delay,MGM_W687);
   not MGM_G811(MGM_W689,sleep);
   and MGM_G812(MGM_W690,MGM_W689,MGM_W688);
   and MGM_G813(ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W690);
   and MGM_G814(MGM_W691,rb_delay,den_delay);
   and MGM_G815(MGM_W692,si_delay,MGM_W691);
   and MGM_G816(MGM_W693,sleep,MGM_W692);
   and MGM_G817(ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W693);
   not MGM_G818(MGM_W694,d_delay);
   and MGM_G819(MGM_W695,rb_delay,MGM_W694);
   not MGM_G820(MGM_W696,si_delay);
   and MGM_G821(MGM_W697,MGM_W696,MGM_W695);
   not MGM_G822(MGM_W698,sleep);
   and MGM_G823(MGM_W699,MGM_W698,MGM_W697);
   and MGM_G824(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W699);
   not MGM_G825(MGM_W700,d_delay);
   and MGM_G826(MGM_W701,rb_delay,MGM_W700);
   not MGM_G827(MGM_W702,si_delay);
   and MGM_G828(MGM_W703,MGM_W702,MGM_W701);
   and MGM_G829(MGM_W704,sleep,MGM_W703);
   and MGM_G830(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W704);
   not MGM_G831(MGM_W705,d_delay);
   and MGM_G832(MGM_W706,rb_delay,MGM_W705);
   and MGM_G833(MGM_W707,si_delay,MGM_W706);
   not MGM_G834(MGM_W708,sleep);
   and MGM_G835(MGM_W709,MGM_W708,MGM_W707);
   and MGM_G836(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W709);
   not MGM_G837(MGM_W710,d_delay);
   and MGM_G838(MGM_W711,rb_delay,MGM_W710);
   and MGM_G839(MGM_W712,si_delay,MGM_W711);
   and MGM_G840(MGM_W713,sleep,MGM_W712);
   and MGM_G841(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W713);
   and MGM_G842(MGM_W714,rb_delay,d_delay);
   not MGM_G843(MGM_W715,si_delay);
   and MGM_G844(MGM_W716,MGM_W715,MGM_W714);
   not MGM_G845(MGM_W717,sleep);
   and MGM_G846(MGM_W718,MGM_W717,MGM_W716);
   and MGM_G847(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W718);
   and MGM_G848(MGM_W719,rb_delay,d_delay);
   not MGM_G849(MGM_W720,si_delay);
   and MGM_G850(MGM_W721,MGM_W720,MGM_W719);
   and MGM_G851(MGM_W722,sleep,MGM_W721);
   and MGM_G852(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W722);
   and MGM_G853(MGM_W723,rb_delay,d_delay);
   and MGM_G854(MGM_W724,si_delay,MGM_W723);
   not MGM_G855(MGM_W725,sleep);
   and MGM_G856(MGM_W726,MGM_W725,MGM_W724);
   and MGM_G857(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W726);
   and MGM_G858(MGM_W727,rb_delay,d_delay);
   and MGM_G859(MGM_W728,si_delay,MGM_W727);
   and MGM_G860(MGM_W729,sleep,MGM_W728);
   and MGM_G861(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W729);
   not MGM_G862(MGM_W730,d_delay);
   not MGM_G863(MGM_W731,den_delay);
   and MGM_G864(MGM_W732,MGM_W731,MGM_W730);
   not MGM_G865(MGM_W733,si_delay);
   and MGM_G866(MGM_W734,MGM_W733,MGM_W732);
   and MGM_G867(MGM_W735,sleep,MGM_W734);
   and MGM_G868(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W735);
   not MGM_G869(MGM_W736,d_delay);
   not MGM_G870(MGM_W737,den_delay);
   and MGM_G871(MGM_W738,MGM_W737,MGM_W736);
   and MGM_G872(MGM_W739,si_delay,MGM_W738);
   not MGM_G873(MGM_W740,sleep);
   and MGM_G874(MGM_W741,MGM_W740,MGM_W739);
   not MGM_G875(MGM_W742,ssb_delay);
   and MGM_G876(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W742,MGM_W741);
   not MGM_G877(MGM_W743,d_delay);
   not MGM_G878(MGM_W744,den_delay);
   and MGM_G879(MGM_W745,MGM_W744,MGM_W743);
   and MGM_G880(MGM_W746,si_delay,MGM_W745);
   and MGM_G881(MGM_W747,sleep,MGM_W746);
   not MGM_G882(MGM_W748,ssb_delay);
   and MGM_G883(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W748,MGM_W747);
   not MGM_G884(MGM_W749,d_delay);
   not MGM_G885(MGM_W750,den_delay);
   and MGM_G886(MGM_W751,MGM_W750,MGM_W749);
   and MGM_G887(MGM_W752,si_delay,MGM_W751);
   and MGM_G888(MGM_W753,sleep,MGM_W752);
   and MGM_G889(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W753);
   not MGM_G890(MGM_W754,d_delay);
   and MGM_G891(MGM_W755,den_delay,MGM_W754);
   and MGM_G892(MGM_W756,si_delay,MGM_W755);
   not MGM_G893(MGM_W757,sleep);
   and MGM_G894(MGM_W758,MGM_W757,MGM_W756);
   not MGM_G895(MGM_W759,ssb_delay);
   and MGM_G896(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W759,MGM_W758);
   not MGM_G897(MGM_W760,d_delay);
   and MGM_G898(MGM_W761,den_delay,MGM_W760);
   and MGM_G899(MGM_W762,si_delay,MGM_W761);
   and MGM_G900(MGM_W763,sleep,MGM_W762);
   not MGM_G901(MGM_W764,ssb_delay);
   and MGM_G902(ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W764,MGM_W763);
   not MGM_G903(MGM_W765,den_delay);
   and MGM_G904(MGM_W766,MGM_W765,d_delay);
   not MGM_G905(MGM_W767,si_delay);
   and MGM_G906(MGM_W768,MGM_W767,MGM_W766);
   and MGM_G907(MGM_W769,sleep,MGM_W768);
   and MGM_G908(ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W769);
   not MGM_G909(MGM_W770,den_delay);
   and MGM_G910(MGM_W771,MGM_W770,d_delay);
   and MGM_G911(MGM_W772,si_delay,MGM_W771);
   not MGM_G912(MGM_W773,sleep);
   and MGM_G913(MGM_W774,MGM_W773,MGM_W772);
   not MGM_G914(MGM_W775,ssb_delay);
   and MGM_G915(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W775,MGM_W774);
   not MGM_G916(MGM_W776,den_delay);
   and MGM_G917(MGM_W777,MGM_W776,d_delay);
   and MGM_G918(MGM_W778,si_delay,MGM_W777);
   and MGM_G919(MGM_W779,sleep,MGM_W778);
   not MGM_G920(MGM_W780,ssb_delay);
   and MGM_G921(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W780,MGM_W779);
   not MGM_G922(MGM_W781,den_delay);
   and MGM_G923(MGM_W782,MGM_W781,d_delay);
   and MGM_G924(MGM_W783,si_delay,MGM_W782);
   and MGM_G925(MGM_W784,sleep,MGM_W783);
   and MGM_G926(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W784);
   and MGM_G927(MGM_W785,den_delay,d_delay);
   not MGM_G928(MGM_W786,si_delay);
   and MGM_G929(MGM_W787,MGM_W786,MGM_W785);
   not MGM_G930(MGM_W788,sleep);
   and MGM_G931(MGM_W789,MGM_W788,MGM_W787);
   and MGM_G932(ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W789);
   and MGM_G933(MGM_W790,den_delay,d_delay);
   not MGM_G934(MGM_W791,si_delay);
   and MGM_G935(MGM_W792,MGM_W791,MGM_W790);
   and MGM_G936(MGM_W793,sleep,MGM_W792);
   and MGM_G937(ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W793);
   and MGM_G938(MGM_W794,den_delay,d_delay);
   and MGM_G939(MGM_W795,si_delay,MGM_W794);
   not MGM_G940(MGM_W796,sleep);
   and MGM_G941(MGM_W797,MGM_W796,MGM_W795);
   not MGM_G942(MGM_W798,ssb_delay);
   and MGM_G943(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W798,MGM_W797);
   and MGM_G944(MGM_W799,den_delay,d_delay);
   and MGM_G945(MGM_W800,si_delay,MGM_W799);
   not MGM_G946(MGM_W801,sleep);
   and MGM_G947(MGM_W802,MGM_W801,MGM_W800);
   and MGM_G948(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W802);
   and MGM_G949(MGM_W803,den_delay,d_delay);
   and MGM_G950(MGM_W804,si_delay,MGM_W803);
   and MGM_G951(MGM_W805,sleep,MGM_W804);
   not MGM_G952(MGM_W806,ssb_delay);
   and MGM_G953(ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W806,MGM_W805);
   and MGM_G954(MGM_W807,den_delay,d_delay);
   and MGM_G955(MGM_W808,si_delay,MGM_W807);
   and MGM_G956(MGM_W809,sleep,MGM_W808);
   and MGM_G957(ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W809);
   not MGM_G958(MGM_W810,d_delay);
   not MGM_G959(MGM_W811,den_delay);
   and MGM_G960(MGM_W812,MGM_W811,MGM_W810);
   and MGM_G961(MGM_W813,rb_delay,MGM_W812);
   not MGM_G962(MGM_W814,sleep);
   and MGM_G963(MGM_W815,MGM_W814,MGM_W813);
   not MGM_G964(MGM_W816,ssb_delay);
   and MGM_G965(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W816,MGM_W815);
   not MGM_G966(MGM_W817,d_delay);
   not MGM_G967(MGM_W818,den_delay);
   and MGM_G968(MGM_W819,MGM_W818,MGM_W817);
   and MGM_G969(MGM_W820,rb_delay,MGM_W819);
   and MGM_G970(MGM_W821,sleep,MGM_W820);
   not MGM_G971(MGM_W822,ssb_delay);
   and MGM_G972(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W822,MGM_W821);
   not MGM_G973(MGM_W823,d_delay);
   and MGM_G974(MGM_W824,den_delay,MGM_W823);
   and MGM_G975(MGM_W825,rb_delay,MGM_W824);
   not MGM_G976(MGM_W826,sleep);
   and MGM_G977(MGM_W827,MGM_W826,MGM_W825);
   not MGM_G978(MGM_W828,ssb_delay);
   and MGM_G979(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W828,MGM_W827);
   not MGM_G980(MGM_W829,d_delay);
   and MGM_G981(MGM_W830,den_delay,MGM_W829);
   and MGM_G982(MGM_W831,rb_delay,MGM_W830);
   and MGM_G983(MGM_W832,sleep,MGM_W831);
   not MGM_G984(MGM_W833,ssb_delay);
   and MGM_G985(ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W833,MGM_W832);
   not MGM_G986(MGM_W834,den_delay);
   and MGM_G987(MGM_W835,MGM_W834,d_delay);
   and MGM_G988(MGM_W836,rb_delay,MGM_W835);
   not MGM_G989(MGM_W837,sleep);
   and MGM_G990(MGM_W838,MGM_W837,MGM_W836);
   not MGM_G991(MGM_W839,ssb_delay);
   and MGM_G992(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W839,MGM_W838);
   not MGM_G993(MGM_W840,den_delay);
   and MGM_G994(MGM_W841,MGM_W840,d_delay);
   and MGM_G995(MGM_W842,rb_delay,MGM_W841);
   and MGM_G996(MGM_W843,sleep,MGM_W842);
   not MGM_G997(MGM_W844,ssb_delay);
   and MGM_G998(ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W844,MGM_W843);
   and MGM_G999(MGM_W845,den_delay,d_delay);
   and MGM_G1000(MGM_W846,rb_delay,MGM_W845);
   not MGM_G1001(MGM_W847,sleep);
   and MGM_G1002(MGM_W848,MGM_W847,MGM_W846);
   not MGM_G1003(MGM_W849,ssb_delay);
   and MGM_G1004(ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W849,MGM_W848);
   and MGM_G1005(MGM_W850,den_delay,d_delay);
   and MGM_G1006(MGM_W851,rb_delay,MGM_W850);
   and MGM_G1007(MGM_W852,sleep,MGM_W851);
   not MGM_G1008(MGM_W853,ssb_delay);
   and MGM_G1009(ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W853,MGM_W852);
   not MGM_G1010(MGM_W854,d_delay);
   not MGM_G1011(MGM_W855,den_delay);
   and MGM_G1012(MGM_W856,MGM_W855,MGM_W854);
   and MGM_G1013(MGM_W857,rb_delay,MGM_W856);
   not MGM_G1014(MGM_W858,si_delay);
   and MGM_G1015(MGM_W859,MGM_W858,MGM_W857);
   not MGM_G1016(MGM_W860,ssb_delay);
   and MGM_G1017(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W860,MGM_W859);
   not MGM_G1018(MGM_W861,d_delay);
   not MGM_G1019(MGM_W862,den_delay);
   and MGM_G1020(MGM_W863,MGM_W862,MGM_W861);
   and MGM_G1021(MGM_W864,rb_delay,MGM_W863);
   not MGM_G1022(MGM_W865,si_delay);
   and MGM_G1023(MGM_W866,MGM_W865,MGM_W864);
   and MGM_G1024(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W866);
   not MGM_G1025(MGM_W867,d_delay);
   not MGM_G1026(MGM_W868,den_delay);
   and MGM_G1027(MGM_W869,MGM_W868,MGM_W867);
   and MGM_G1028(MGM_W870,rb_delay,MGM_W869);
   and MGM_G1029(MGM_W871,si_delay,MGM_W870);
   not MGM_G1030(MGM_W872,ssb_delay);
   and MGM_G1031(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W872,MGM_W871);
   not MGM_G1032(MGM_W873,d_delay);
   not MGM_G1033(MGM_W874,den_delay);
   and MGM_G1034(MGM_W875,MGM_W874,MGM_W873);
   and MGM_G1035(MGM_W876,rb_delay,MGM_W875);
   and MGM_G1036(MGM_W877,si_delay,MGM_W876);
   and MGM_G1037(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W877);
   not MGM_G1038(MGM_W878,d_delay);
   and MGM_G1039(MGM_W879,den_delay,MGM_W878);
   and MGM_G1040(MGM_W880,rb_delay,MGM_W879);
   not MGM_G1041(MGM_W881,si_delay);
   and MGM_G1042(MGM_W882,MGM_W881,MGM_W880);
   not MGM_G1043(MGM_W883,ssb_delay);
   and MGM_G1044(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W883,MGM_W882);
   not MGM_G1045(MGM_W884,d_delay);
   and MGM_G1046(MGM_W885,den_delay,MGM_W884);
   and MGM_G1047(MGM_W886,rb_delay,MGM_W885);
   not MGM_G1048(MGM_W887,si_delay);
   and MGM_G1049(MGM_W888,MGM_W887,MGM_W886);
   and MGM_G1050(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W888);
   not MGM_G1051(MGM_W889,d_delay);
   and MGM_G1052(MGM_W890,den_delay,MGM_W889);
   and MGM_G1053(MGM_W891,rb_delay,MGM_W890);
   and MGM_G1054(MGM_W892,si_delay,MGM_W891);
   not MGM_G1055(MGM_W893,ssb_delay);
   and MGM_G1056(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W893,MGM_W892);
   not MGM_G1057(MGM_W894,d_delay);
   and MGM_G1058(MGM_W895,den_delay,MGM_W894);
   and MGM_G1059(MGM_W896,rb_delay,MGM_W895);
   and MGM_G1060(MGM_W897,si_delay,MGM_W896);
   and MGM_G1061(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W897);
   not MGM_G1062(MGM_W898,den_delay);
   and MGM_G1063(MGM_W899,MGM_W898,d_delay);
   and MGM_G1064(MGM_W900,rb_delay,MGM_W899);
   not MGM_G1065(MGM_W901,si_delay);
   and MGM_G1066(MGM_W902,MGM_W901,MGM_W900);
   not MGM_G1067(MGM_W903,ssb_delay);
   and MGM_G1068(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W903,MGM_W902);
   not MGM_G1069(MGM_W904,den_delay);
   and MGM_G1070(MGM_W905,MGM_W904,d_delay);
   and MGM_G1071(MGM_W906,rb_delay,MGM_W905);
   not MGM_G1072(MGM_W907,si_delay);
   and MGM_G1073(MGM_W908,MGM_W907,MGM_W906);
   and MGM_G1074(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W908);
   not MGM_G1075(MGM_W909,den_delay);
   and MGM_G1076(MGM_W910,MGM_W909,d_delay);
   and MGM_G1077(MGM_W911,rb_delay,MGM_W910);
   and MGM_G1078(MGM_W912,si_delay,MGM_W911);
   not MGM_G1079(MGM_W913,ssb_delay);
   and MGM_G1080(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W913,MGM_W912);
   not MGM_G1081(MGM_W914,den_delay);
   and MGM_G1082(MGM_W915,MGM_W914,d_delay);
   and MGM_G1083(MGM_W916,rb_delay,MGM_W915);
   and MGM_G1084(MGM_W917,si_delay,MGM_W916);
   and MGM_G1085(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W917);
   and MGM_G1086(MGM_W918,den_delay,d_delay);
   and MGM_G1087(MGM_W919,rb_delay,MGM_W918);
   not MGM_G1088(MGM_W920,si_delay);
   and MGM_G1089(MGM_W921,MGM_W920,MGM_W919);
   not MGM_G1090(MGM_W922,ssb_delay);
   and MGM_G1091(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W922,MGM_W921);
   and MGM_G1092(MGM_W923,den_delay,d_delay);
   and MGM_G1093(MGM_W924,rb_delay,MGM_W923);
   not MGM_G1094(MGM_W925,si_delay);
   and MGM_G1095(MGM_W926,MGM_W925,MGM_W924);
   and MGM_G1096(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W926);
   and MGM_G1097(MGM_W927,den_delay,d_delay);
   and MGM_G1098(MGM_W928,rb_delay,MGM_W927);
   and MGM_G1099(MGM_W929,si_delay,MGM_W928);
   not MGM_G1100(MGM_W930,ssb_delay);
   and MGM_G1101(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W930,MGM_W929);
   and MGM_G1102(MGM_W931,den_delay,d_delay);
   and MGM_G1103(MGM_W932,rb_delay,MGM_W931);
   and MGM_G1104(MGM_W933,si_delay,MGM_W932);
   and MGM_G1105(ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W933);
   not MGM_G1106(MGM_W934,d_delay);
   not MGM_G1107(MGM_W935,den_delay);
   and MGM_G1108(MGM_W936,MGM_W935,MGM_W934);
   and MGM_G1109(MGM_W937,rb_delay,MGM_W936);
   not MGM_G1110(MGM_W938,si_delay);
   and MGM_G1111(MGM_W939,MGM_W938,MGM_W937);
   not MGM_G1112(MGM_W940,sleep);
   and MGM_G1113(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W940,MGM_W939);
   not MGM_G1114(MGM_W941,d_delay);
   not MGM_G1115(MGM_W942,den_delay);
   and MGM_G1116(MGM_W943,MGM_W942,MGM_W941);
   and MGM_G1117(MGM_W944,rb_delay,MGM_W943);
   not MGM_G1118(MGM_W945,si_delay);
   and MGM_G1119(MGM_W946,MGM_W945,MGM_W944);
   and MGM_G1120(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W946);
   not MGM_G1121(MGM_W947,d_delay);
   not MGM_G1122(MGM_W948,den_delay);
   and MGM_G1123(MGM_W949,MGM_W948,MGM_W947);
   and MGM_G1124(MGM_W950,rb_delay,MGM_W949);
   and MGM_G1125(MGM_W951,si_delay,MGM_W950);
   not MGM_G1126(MGM_W952,sleep);
   and MGM_G1127(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W952,MGM_W951);
   not MGM_G1128(MGM_W953,d_delay);
   not MGM_G1129(MGM_W954,den_delay);
   and MGM_G1130(MGM_W955,MGM_W954,MGM_W953);
   and MGM_G1131(MGM_W956,rb_delay,MGM_W955);
   and MGM_G1132(MGM_W957,si_delay,MGM_W956);
   and MGM_G1133(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W957);
   not MGM_G1134(MGM_W958,d_delay);
   and MGM_G1135(MGM_W959,den_delay,MGM_W958);
   and MGM_G1136(MGM_W960,rb_delay,MGM_W959);
   and MGM_G1137(MGM_W961,si_delay,MGM_W960);
   not MGM_G1138(MGM_W962,sleep);
   and MGM_G1139(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W962,MGM_W961);
   not MGM_G1140(MGM_W963,d_delay);
   and MGM_G1141(MGM_W964,den_delay,MGM_W963);
   and MGM_G1142(MGM_W965,rb_delay,MGM_W964);
   and MGM_G1143(MGM_W966,si_delay,MGM_W965);
   and MGM_G1144(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W966);
   not MGM_G1145(MGM_W967,den_delay);
   and MGM_G1146(MGM_W968,MGM_W967,d_delay);
   and MGM_G1147(MGM_W969,rb_delay,MGM_W968);
   not MGM_G1148(MGM_W970,si_delay);
   and MGM_G1149(MGM_W971,MGM_W970,MGM_W969);
   not MGM_G1150(MGM_W972,sleep);
   and MGM_G1151(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W972,MGM_W971);
   not MGM_G1152(MGM_W973,den_delay);
   and MGM_G1153(MGM_W974,MGM_W973,d_delay);
   and MGM_G1154(MGM_W975,rb_delay,MGM_W974);
   not MGM_G1155(MGM_W976,si_delay);
   and MGM_G1156(MGM_W977,MGM_W976,MGM_W975);
   and MGM_G1157(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W977);
   not MGM_G1158(MGM_W978,den_delay);
   and MGM_G1159(MGM_W979,MGM_W978,d_delay);
   and MGM_G1160(MGM_W980,rb_delay,MGM_W979);
   and MGM_G1161(MGM_W981,si_delay,MGM_W980);
   not MGM_G1162(MGM_W982,sleep);
   and MGM_G1163(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W982,MGM_W981);
   not MGM_G1164(MGM_W983,den_delay);
   and MGM_G1165(MGM_W984,MGM_W983,d_delay);
   and MGM_G1166(MGM_W985,rb_delay,MGM_W984);
   and MGM_G1167(MGM_W986,si_delay,MGM_W985);
   and MGM_G1168(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W986);
   and MGM_G1169(MGM_W987,den_delay,d_delay);
   and MGM_G1170(MGM_W988,rb_delay,MGM_W987);
   not MGM_G1171(MGM_W989,si_delay);
   and MGM_G1172(MGM_W990,MGM_W989,MGM_W988);
   not MGM_G1173(MGM_W991,sleep);
   and MGM_G1174(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W991,MGM_W990);
   and MGM_G1175(MGM_W992,den_delay,d_delay);
   and MGM_G1176(MGM_W993,rb_delay,MGM_W992);
   not MGM_G1177(MGM_W994,si_delay);
   and MGM_G1178(MGM_W995,MGM_W994,MGM_W993);
   and MGM_G1179(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W995);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr43ad1d06x5( clk, d, den, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and data enable
// 
// 
// 
// assign  int1 =  den ? d : IQ2;
// assign  int2 =  ssb ? int1 : si;
// 
// always @ (clk or int2 or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= int2;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr43ad_delay o =  IQ2;
// assign `fvzr43ad_delay so =  IQ2;
// 

   input clk, d, den, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d06x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d06x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G590(MGM_W498,d_delay);
   not MGM_G591(MGM_W499,den_delay);
   and MGM_G592(MGM_W500,MGM_W499,MGM_W498);
   and MGM_G593(MGM_W501,rb_delay,MGM_W500);
   not MGM_G594(MGM_W502,si_delay);
   and MGM_G595(MGM_W503,MGM_W502,MGM_W501);
   not MGM_G596(MGM_W504,sleep);
   and MGM_G597(MGM_W505,MGM_W504,MGM_W503);
   not MGM_G598(MGM_W506,ssb_delay);
   and MGM_G599(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W506,MGM_W505);
   not MGM_G600(MGM_W507,d_delay);
   not MGM_G601(MGM_W508,den_delay);
   and MGM_G602(MGM_W509,MGM_W508,MGM_W507);
   and MGM_G603(MGM_W510,rb_delay,MGM_W509);
   not MGM_G604(MGM_W511,si_delay);
   and MGM_G605(MGM_W512,MGM_W511,MGM_W510);
   and MGM_G606(MGM_W513,sleep,MGM_W512);
   not MGM_G607(MGM_W514,ssb_delay);
   and MGM_G608(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W514,MGM_W513);
   not MGM_G609(MGM_W515,d_delay);
   not MGM_G610(MGM_W516,den_delay);
   and MGM_G611(MGM_W517,MGM_W516,MGM_W515);
   and MGM_G612(MGM_W518,rb_delay,MGM_W517);
   not MGM_G613(MGM_W519,si_delay);
   and MGM_G614(MGM_W520,MGM_W519,MGM_W518);
   and MGM_G615(MGM_W521,sleep,MGM_W520);
   and MGM_G616(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W521);
   not MGM_G617(MGM_W522,d_delay);
   not MGM_G618(MGM_W523,den_delay);
   and MGM_G619(MGM_W524,MGM_W523,MGM_W522);
   and MGM_G620(MGM_W525,rb_delay,MGM_W524);
   and MGM_G621(MGM_W526,si_delay,MGM_W525);
   not MGM_G622(MGM_W527,sleep);
   and MGM_G623(MGM_W528,MGM_W527,MGM_W526);
   not MGM_G624(MGM_W529,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G626(MGM_W530,d_delay);
   not MGM_G627(MGM_W531,den_delay);
   and MGM_G628(MGM_W532,MGM_W531,MGM_W530);
   and MGM_G629(MGM_W533,rb_delay,MGM_W532);
   and MGM_G630(MGM_W534,si_delay,MGM_W533);
   and MGM_G631(MGM_W535,sleep,MGM_W534);
   not MGM_G632(MGM_W536,ssb_delay);
   and MGM_G633(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G634(MGM_W537,d_delay);
   not MGM_G635(MGM_W538,den_delay);
   and MGM_G636(MGM_W539,MGM_W538,MGM_W537);
   and MGM_G637(MGM_W540,rb_delay,MGM_W539);
   and MGM_G638(MGM_W541,si_delay,MGM_W540);
   and MGM_G639(MGM_W542,sleep,MGM_W541);
   and MGM_G640(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W542);
   not MGM_G641(MGM_W543,d_delay);
   and MGM_G642(MGM_W544,den_delay,MGM_W543);
   and MGM_G643(MGM_W545,rb_delay,MGM_W544);
   not MGM_G644(MGM_W546,si_delay);
   and MGM_G645(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G646(MGM_W548,sleep);
   and MGM_G647(MGM_W549,MGM_W548,MGM_W547);
   not MGM_G648(MGM_W550,ssb_delay);
   and MGM_G649(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W550,MGM_W549);
   not MGM_G650(MGM_W551,d_delay);
   and MGM_G651(MGM_W552,den_delay,MGM_W551);
   and MGM_G652(MGM_W553,rb_delay,MGM_W552);
   not MGM_G653(MGM_W554,si_delay);
   and MGM_G654(MGM_W555,MGM_W554,MGM_W553);
   not MGM_G655(MGM_W556,sleep);
   and MGM_G656(MGM_W557,MGM_W556,MGM_W555);
   and MGM_G657(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W557);
   not MGM_G658(MGM_W558,d_delay);
   and MGM_G659(MGM_W559,den_delay,MGM_W558);
   and MGM_G660(MGM_W560,rb_delay,MGM_W559);
   not MGM_G661(MGM_W561,si_delay);
   and MGM_G662(MGM_W562,MGM_W561,MGM_W560);
   and MGM_G663(MGM_W563,sleep,MGM_W562);
   not MGM_G664(MGM_W564,ssb_delay);
   and MGM_G665(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W564,MGM_W563);
   not MGM_G666(MGM_W565,d_delay);
   and MGM_G667(MGM_W566,den_delay,MGM_W565);
   and MGM_G668(MGM_W567,rb_delay,MGM_W566);
   not MGM_G669(MGM_W568,si_delay);
   and MGM_G670(MGM_W569,MGM_W568,MGM_W567);
   and MGM_G671(MGM_W570,sleep,MGM_W569);
   and MGM_G672(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W570);
   not MGM_G673(MGM_W571,d_delay);
   and MGM_G674(MGM_W572,den_delay,MGM_W571);
   and MGM_G675(MGM_W573,rb_delay,MGM_W572);
   and MGM_G676(MGM_W574,si_delay,MGM_W573);
   not MGM_G677(MGM_W575,sleep);
   and MGM_G678(MGM_W576,MGM_W575,MGM_W574);
   not MGM_G679(MGM_W577,ssb_delay);
   and MGM_G680(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W577,MGM_W576);
   not MGM_G681(MGM_W578,d_delay);
   and MGM_G682(MGM_W579,den_delay,MGM_W578);
   and MGM_G683(MGM_W580,rb_delay,MGM_W579);
   and MGM_G684(MGM_W581,si_delay,MGM_W580);
   not MGM_G685(MGM_W582,sleep);
   and MGM_G686(MGM_W583,MGM_W582,MGM_W581);
   and MGM_G687(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W583);
   not MGM_G688(MGM_W584,d_delay);
   and MGM_G689(MGM_W585,den_delay,MGM_W584);
   and MGM_G690(MGM_W586,rb_delay,MGM_W585);
   and MGM_G691(MGM_W587,si_delay,MGM_W586);
   and MGM_G692(MGM_W588,sleep,MGM_W587);
   not MGM_G693(MGM_W589,ssb_delay);
   and MGM_G694(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W589,MGM_W588);
   not MGM_G695(MGM_W590,d_delay);
   and MGM_G696(MGM_W591,den_delay,MGM_W590);
   and MGM_G697(MGM_W592,rb_delay,MGM_W591);
   and MGM_G698(MGM_W593,si_delay,MGM_W592);
   and MGM_G699(MGM_W594,sleep,MGM_W593);
   and MGM_G700(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W594);
   not MGM_G701(MGM_W595,den_delay);
   and MGM_G702(MGM_W596,MGM_W595,d_delay);
   and MGM_G703(MGM_W597,rb_delay,MGM_W596);
   not MGM_G704(MGM_W598,si_delay);
   and MGM_G705(MGM_W599,MGM_W598,MGM_W597);
   not MGM_G706(MGM_W600,sleep);
   and MGM_G707(MGM_W601,MGM_W600,MGM_W599);
   not MGM_G708(MGM_W602,ssb_delay);
   and MGM_G709(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W602,MGM_W601);
   not MGM_G710(MGM_W603,den_delay);
   and MGM_G711(MGM_W604,MGM_W603,d_delay);
   and MGM_G712(MGM_W605,rb_delay,MGM_W604);
   not MGM_G713(MGM_W606,si_delay);
   and MGM_G714(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G715(MGM_W608,sleep,MGM_W607);
   not MGM_G716(MGM_W609,ssb_delay);
   and MGM_G717(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W609,MGM_W608);
   not MGM_G718(MGM_W610,den_delay);
   and MGM_G719(MGM_W611,MGM_W610,d_delay);
   and MGM_G720(MGM_W612,rb_delay,MGM_W611);
   not MGM_G721(MGM_W613,si_delay);
   and MGM_G722(MGM_W614,MGM_W613,MGM_W612);
   and MGM_G723(MGM_W615,sleep,MGM_W614);
   and MGM_G724(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W615);
   not MGM_G725(MGM_W616,den_delay);
   and MGM_G726(MGM_W617,MGM_W616,d_delay);
   and MGM_G727(MGM_W618,rb_delay,MGM_W617);
   and MGM_G728(MGM_W619,si_delay,MGM_W618);
   not MGM_G729(MGM_W620,sleep);
   and MGM_G730(MGM_W621,MGM_W620,MGM_W619);
   not MGM_G731(MGM_W622,ssb_delay);
   and MGM_G732(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W622,MGM_W621);
   not MGM_G733(MGM_W623,den_delay);
   and MGM_G734(MGM_W624,MGM_W623,d_delay);
   and MGM_G735(MGM_W625,rb_delay,MGM_W624);
   and MGM_G736(MGM_W626,si_delay,MGM_W625);
   and MGM_G737(MGM_W627,sleep,MGM_W626);
   not MGM_G738(MGM_W628,ssb_delay);
   and MGM_G739(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W628,MGM_W627);
   not MGM_G740(MGM_W629,den_delay);
   and MGM_G741(MGM_W630,MGM_W629,d_delay);
   and MGM_G742(MGM_W631,rb_delay,MGM_W630);
   and MGM_G743(MGM_W632,si_delay,MGM_W631);
   and MGM_G744(MGM_W633,sleep,MGM_W632);
   and MGM_G745(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W633);
   and MGM_G746(MGM_W634,den_delay,d_delay);
   and MGM_G747(MGM_W635,rb_delay,MGM_W634);
   not MGM_G748(MGM_W636,si_delay);
   and MGM_G749(MGM_W637,MGM_W636,MGM_W635);
   not MGM_G750(MGM_W638,sleep);
   and MGM_G751(MGM_W639,MGM_W638,MGM_W637);
   not MGM_G752(MGM_W640,ssb_delay);
   and MGM_G753(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W640,MGM_W639);
   and MGM_G754(MGM_W641,den_delay,d_delay);
   and MGM_G755(MGM_W642,rb_delay,MGM_W641);
   not MGM_G756(MGM_W643,si_delay);
   and MGM_G757(MGM_W644,MGM_W643,MGM_W642);
   not MGM_G758(MGM_W645,sleep);
   and MGM_G759(MGM_W646,MGM_W645,MGM_W644);
   and MGM_G760(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W646);
   and MGM_G761(MGM_W647,den_delay,d_delay);
   and MGM_G762(MGM_W648,rb_delay,MGM_W647);
   not MGM_G763(MGM_W649,si_delay);
   and MGM_G764(MGM_W650,MGM_W649,MGM_W648);
   and MGM_G765(MGM_W651,sleep,MGM_W650);
   not MGM_G766(MGM_W652,ssb_delay);
   and MGM_G767(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W652,MGM_W651);
   and MGM_G768(MGM_W653,den_delay,d_delay);
   and MGM_G769(MGM_W654,rb_delay,MGM_W653);
   not MGM_G770(MGM_W655,si_delay);
   and MGM_G771(MGM_W656,MGM_W655,MGM_W654);
   and MGM_G772(MGM_W657,sleep,MGM_W656);
   and MGM_G773(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W657);
   and MGM_G774(MGM_W658,den_delay,d_delay);
   and MGM_G775(MGM_W659,rb_delay,MGM_W658);
   and MGM_G776(MGM_W660,si_delay,MGM_W659);
   not MGM_G777(MGM_W661,sleep);
   and MGM_G778(MGM_W662,MGM_W661,MGM_W660);
   not MGM_G779(MGM_W663,ssb_delay);
   and MGM_G780(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W663,MGM_W662);
   and MGM_G781(MGM_W664,den_delay,d_delay);
   and MGM_G782(MGM_W665,rb_delay,MGM_W664);
   and MGM_G783(MGM_W666,si_delay,MGM_W665);
   not MGM_G784(MGM_W667,sleep);
   and MGM_G785(MGM_W668,MGM_W667,MGM_W666);
   and MGM_G786(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W668);
   and MGM_G787(MGM_W669,den_delay,d_delay);
   and MGM_G788(MGM_W670,rb_delay,MGM_W669);
   and MGM_G789(MGM_W671,si_delay,MGM_W670);
   and MGM_G790(MGM_W672,sleep,MGM_W671);
   not MGM_G791(MGM_W673,ssb_delay);
   and MGM_G792(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W673,MGM_W672);
   and MGM_G793(MGM_W674,den_delay,d_delay);
   and MGM_G794(MGM_W675,rb_delay,MGM_W674);
   and MGM_G795(MGM_W676,si_delay,MGM_W675);
   and MGM_G796(MGM_W677,sleep,MGM_W676);
   and MGM_G797(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W677);
   and MGM_G798(MGM_W678,rb_delay,den_delay);
   not MGM_G799(MGM_W679,si_delay);
   and MGM_G800(MGM_W680,MGM_W679,MGM_W678);
   not MGM_G801(MGM_W681,sleep);
   and MGM_G802(MGM_W682,MGM_W681,MGM_W680);
   and MGM_G803(ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W682);
   and MGM_G804(MGM_W683,rb_delay,den_delay);
   not MGM_G805(MGM_W684,si_delay);
   and MGM_G806(MGM_W685,MGM_W684,MGM_W683);
   and MGM_G807(MGM_W686,sleep,MGM_W685);
   and MGM_G808(ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W686);
   and MGM_G809(MGM_W687,rb_delay,den_delay);
   and MGM_G810(MGM_W688,si_delay,MGM_W687);
   not MGM_G811(MGM_W689,sleep);
   and MGM_G812(MGM_W690,MGM_W689,MGM_W688);
   and MGM_G813(ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W690);
   and MGM_G814(MGM_W691,rb_delay,den_delay);
   and MGM_G815(MGM_W692,si_delay,MGM_W691);
   and MGM_G816(MGM_W693,sleep,MGM_W692);
   and MGM_G817(ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W693);
   not MGM_G818(MGM_W694,d_delay);
   and MGM_G819(MGM_W695,rb_delay,MGM_W694);
   not MGM_G820(MGM_W696,si_delay);
   and MGM_G821(MGM_W697,MGM_W696,MGM_W695);
   not MGM_G822(MGM_W698,sleep);
   and MGM_G823(MGM_W699,MGM_W698,MGM_W697);
   and MGM_G824(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W699);
   not MGM_G825(MGM_W700,d_delay);
   and MGM_G826(MGM_W701,rb_delay,MGM_W700);
   not MGM_G827(MGM_W702,si_delay);
   and MGM_G828(MGM_W703,MGM_W702,MGM_W701);
   and MGM_G829(MGM_W704,sleep,MGM_W703);
   and MGM_G830(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W704);
   not MGM_G831(MGM_W705,d_delay);
   and MGM_G832(MGM_W706,rb_delay,MGM_W705);
   and MGM_G833(MGM_W707,si_delay,MGM_W706);
   not MGM_G834(MGM_W708,sleep);
   and MGM_G835(MGM_W709,MGM_W708,MGM_W707);
   and MGM_G836(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W709);
   not MGM_G837(MGM_W710,d_delay);
   and MGM_G838(MGM_W711,rb_delay,MGM_W710);
   and MGM_G839(MGM_W712,si_delay,MGM_W711);
   and MGM_G840(MGM_W713,sleep,MGM_W712);
   and MGM_G841(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W713);
   and MGM_G842(MGM_W714,rb_delay,d_delay);
   not MGM_G843(MGM_W715,si_delay);
   and MGM_G844(MGM_W716,MGM_W715,MGM_W714);
   not MGM_G845(MGM_W717,sleep);
   and MGM_G846(MGM_W718,MGM_W717,MGM_W716);
   and MGM_G847(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W718);
   and MGM_G848(MGM_W719,rb_delay,d_delay);
   not MGM_G849(MGM_W720,si_delay);
   and MGM_G850(MGM_W721,MGM_W720,MGM_W719);
   and MGM_G851(MGM_W722,sleep,MGM_W721);
   and MGM_G852(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W722);
   and MGM_G853(MGM_W723,rb_delay,d_delay);
   and MGM_G854(MGM_W724,si_delay,MGM_W723);
   not MGM_G855(MGM_W725,sleep);
   and MGM_G856(MGM_W726,MGM_W725,MGM_W724);
   and MGM_G857(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W726);
   and MGM_G858(MGM_W727,rb_delay,d_delay);
   and MGM_G859(MGM_W728,si_delay,MGM_W727);
   and MGM_G860(MGM_W729,sleep,MGM_W728);
   and MGM_G861(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W729);
   not MGM_G862(MGM_W730,d_delay);
   not MGM_G863(MGM_W731,den_delay);
   and MGM_G864(MGM_W732,MGM_W731,MGM_W730);
   not MGM_G865(MGM_W733,si_delay);
   and MGM_G866(MGM_W734,MGM_W733,MGM_W732);
   and MGM_G867(MGM_W735,sleep,MGM_W734);
   and MGM_G868(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W735);
   not MGM_G869(MGM_W736,d_delay);
   not MGM_G870(MGM_W737,den_delay);
   and MGM_G871(MGM_W738,MGM_W737,MGM_W736);
   and MGM_G872(MGM_W739,si_delay,MGM_W738);
   not MGM_G873(MGM_W740,sleep);
   and MGM_G874(MGM_W741,MGM_W740,MGM_W739);
   not MGM_G875(MGM_W742,ssb_delay);
   and MGM_G876(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W742,MGM_W741);
   not MGM_G877(MGM_W743,d_delay);
   not MGM_G878(MGM_W744,den_delay);
   and MGM_G879(MGM_W745,MGM_W744,MGM_W743);
   and MGM_G880(MGM_W746,si_delay,MGM_W745);
   and MGM_G881(MGM_W747,sleep,MGM_W746);
   not MGM_G882(MGM_W748,ssb_delay);
   and MGM_G883(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W748,MGM_W747);
   not MGM_G884(MGM_W749,d_delay);
   not MGM_G885(MGM_W750,den_delay);
   and MGM_G886(MGM_W751,MGM_W750,MGM_W749);
   and MGM_G887(MGM_W752,si_delay,MGM_W751);
   and MGM_G888(MGM_W753,sleep,MGM_W752);
   and MGM_G889(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W753);
   not MGM_G890(MGM_W754,d_delay);
   and MGM_G891(MGM_W755,den_delay,MGM_W754);
   and MGM_G892(MGM_W756,si_delay,MGM_W755);
   not MGM_G893(MGM_W757,sleep);
   and MGM_G894(MGM_W758,MGM_W757,MGM_W756);
   not MGM_G895(MGM_W759,ssb_delay);
   and MGM_G896(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W759,MGM_W758);
   not MGM_G897(MGM_W760,d_delay);
   and MGM_G898(MGM_W761,den_delay,MGM_W760);
   and MGM_G899(MGM_W762,si_delay,MGM_W761);
   and MGM_G900(MGM_W763,sleep,MGM_W762);
   not MGM_G901(MGM_W764,ssb_delay);
   and MGM_G902(ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W764,MGM_W763);
   not MGM_G903(MGM_W765,den_delay);
   and MGM_G904(MGM_W766,MGM_W765,d_delay);
   not MGM_G905(MGM_W767,si_delay);
   and MGM_G906(MGM_W768,MGM_W767,MGM_W766);
   and MGM_G907(MGM_W769,sleep,MGM_W768);
   and MGM_G908(ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W769);
   not MGM_G909(MGM_W770,den_delay);
   and MGM_G910(MGM_W771,MGM_W770,d_delay);
   and MGM_G911(MGM_W772,si_delay,MGM_W771);
   not MGM_G912(MGM_W773,sleep);
   and MGM_G913(MGM_W774,MGM_W773,MGM_W772);
   not MGM_G914(MGM_W775,ssb_delay);
   and MGM_G915(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W775,MGM_W774);
   not MGM_G916(MGM_W776,den_delay);
   and MGM_G917(MGM_W777,MGM_W776,d_delay);
   and MGM_G918(MGM_W778,si_delay,MGM_W777);
   and MGM_G919(MGM_W779,sleep,MGM_W778);
   not MGM_G920(MGM_W780,ssb_delay);
   and MGM_G921(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W780,MGM_W779);
   not MGM_G922(MGM_W781,den_delay);
   and MGM_G923(MGM_W782,MGM_W781,d_delay);
   and MGM_G924(MGM_W783,si_delay,MGM_W782);
   and MGM_G925(MGM_W784,sleep,MGM_W783);
   and MGM_G926(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W784);
   and MGM_G927(MGM_W785,den_delay,d_delay);
   not MGM_G928(MGM_W786,si_delay);
   and MGM_G929(MGM_W787,MGM_W786,MGM_W785);
   not MGM_G930(MGM_W788,sleep);
   and MGM_G931(MGM_W789,MGM_W788,MGM_W787);
   and MGM_G932(ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W789);
   and MGM_G933(MGM_W790,den_delay,d_delay);
   not MGM_G934(MGM_W791,si_delay);
   and MGM_G935(MGM_W792,MGM_W791,MGM_W790);
   and MGM_G936(MGM_W793,sleep,MGM_W792);
   and MGM_G937(ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W793);
   and MGM_G938(MGM_W794,den_delay,d_delay);
   and MGM_G939(MGM_W795,si_delay,MGM_W794);
   not MGM_G940(MGM_W796,sleep);
   and MGM_G941(MGM_W797,MGM_W796,MGM_W795);
   not MGM_G942(MGM_W798,ssb_delay);
   and MGM_G943(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W798,MGM_W797);
   and MGM_G944(MGM_W799,den_delay,d_delay);
   and MGM_G945(MGM_W800,si_delay,MGM_W799);
   not MGM_G946(MGM_W801,sleep);
   and MGM_G947(MGM_W802,MGM_W801,MGM_W800);
   and MGM_G948(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W802);
   and MGM_G949(MGM_W803,den_delay,d_delay);
   and MGM_G950(MGM_W804,si_delay,MGM_W803);
   and MGM_G951(MGM_W805,sleep,MGM_W804);
   not MGM_G952(MGM_W806,ssb_delay);
   and MGM_G953(ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W806,MGM_W805);
   and MGM_G954(MGM_W807,den_delay,d_delay);
   and MGM_G955(MGM_W808,si_delay,MGM_W807);
   and MGM_G956(MGM_W809,sleep,MGM_W808);
   and MGM_G957(ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W809);
   not MGM_G958(MGM_W810,d_delay);
   not MGM_G959(MGM_W811,den_delay);
   and MGM_G960(MGM_W812,MGM_W811,MGM_W810);
   and MGM_G961(MGM_W813,rb_delay,MGM_W812);
   not MGM_G962(MGM_W814,sleep);
   and MGM_G963(MGM_W815,MGM_W814,MGM_W813);
   not MGM_G964(MGM_W816,ssb_delay);
   and MGM_G965(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W816,MGM_W815);
   not MGM_G966(MGM_W817,d_delay);
   not MGM_G967(MGM_W818,den_delay);
   and MGM_G968(MGM_W819,MGM_W818,MGM_W817);
   and MGM_G969(MGM_W820,rb_delay,MGM_W819);
   and MGM_G970(MGM_W821,sleep,MGM_W820);
   not MGM_G971(MGM_W822,ssb_delay);
   and MGM_G972(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W822,MGM_W821);
   not MGM_G973(MGM_W823,d_delay);
   and MGM_G974(MGM_W824,den_delay,MGM_W823);
   and MGM_G975(MGM_W825,rb_delay,MGM_W824);
   not MGM_G976(MGM_W826,sleep);
   and MGM_G977(MGM_W827,MGM_W826,MGM_W825);
   not MGM_G978(MGM_W828,ssb_delay);
   and MGM_G979(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W828,MGM_W827);
   not MGM_G980(MGM_W829,d_delay);
   and MGM_G981(MGM_W830,den_delay,MGM_W829);
   and MGM_G982(MGM_W831,rb_delay,MGM_W830);
   and MGM_G983(MGM_W832,sleep,MGM_W831);
   not MGM_G984(MGM_W833,ssb_delay);
   and MGM_G985(ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W833,MGM_W832);
   not MGM_G986(MGM_W834,den_delay);
   and MGM_G987(MGM_W835,MGM_W834,d_delay);
   and MGM_G988(MGM_W836,rb_delay,MGM_W835);
   not MGM_G989(MGM_W837,sleep);
   and MGM_G990(MGM_W838,MGM_W837,MGM_W836);
   not MGM_G991(MGM_W839,ssb_delay);
   and MGM_G992(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W839,MGM_W838);
   not MGM_G993(MGM_W840,den_delay);
   and MGM_G994(MGM_W841,MGM_W840,d_delay);
   and MGM_G995(MGM_W842,rb_delay,MGM_W841);
   and MGM_G996(MGM_W843,sleep,MGM_W842);
   not MGM_G997(MGM_W844,ssb_delay);
   and MGM_G998(ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W844,MGM_W843);
   and MGM_G999(MGM_W845,den_delay,d_delay);
   and MGM_G1000(MGM_W846,rb_delay,MGM_W845);
   not MGM_G1001(MGM_W847,sleep);
   and MGM_G1002(MGM_W848,MGM_W847,MGM_W846);
   not MGM_G1003(MGM_W849,ssb_delay);
   and MGM_G1004(ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W849,MGM_W848);
   and MGM_G1005(MGM_W850,den_delay,d_delay);
   and MGM_G1006(MGM_W851,rb_delay,MGM_W850);
   and MGM_G1007(MGM_W852,sleep,MGM_W851);
   not MGM_G1008(MGM_W853,ssb_delay);
   and MGM_G1009(ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W853,MGM_W852);
   not MGM_G1010(MGM_W854,d_delay);
   not MGM_G1011(MGM_W855,den_delay);
   and MGM_G1012(MGM_W856,MGM_W855,MGM_W854);
   and MGM_G1013(MGM_W857,rb_delay,MGM_W856);
   not MGM_G1014(MGM_W858,si_delay);
   and MGM_G1015(MGM_W859,MGM_W858,MGM_W857);
   not MGM_G1016(MGM_W860,ssb_delay);
   and MGM_G1017(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W860,MGM_W859);
   not MGM_G1018(MGM_W861,d_delay);
   not MGM_G1019(MGM_W862,den_delay);
   and MGM_G1020(MGM_W863,MGM_W862,MGM_W861);
   and MGM_G1021(MGM_W864,rb_delay,MGM_W863);
   not MGM_G1022(MGM_W865,si_delay);
   and MGM_G1023(MGM_W866,MGM_W865,MGM_W864);
   and MGM_G1024(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W866);
   not MGM_G1025(MGM_W867,d_delay);
   not MGM_G1026(MGM_W868,den_delay);
   and MGM_G1027(MGM_W869,MGM_W868,MGM_W867);
   and MGM_G1028(MGM_W870,rb_delay,MGM_W869);
   and MGM_G1029(MGM_W871,si_delay,MGM_W870);
   not MGM_G1030(MGM_W872,ssb_delay);
   and MGM_G1031(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W872,MGM_W871);
   not MGM_G1032(MGM_W873,d_delay);
   not MGM_G1033(MGM_W874,den_delay);
   and MGM_G1034(MGM_W875,MGM_W874,MGM_W873);
   and MGM_G1035(MGM_W876,rb_delay,MGM_W875);
   and MGM_G1036(MGM_W877,si_delay,MGM_W876);
   and MGM_G1037(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W877);
   not MGM_G1038(MGM_W878,d_delay);
   and MGM_G1039(MGM_W879,den_delay,MGM_W878);
   and MGM_G1040(MGM_W880,rb_delay,MGM_W879);
   not MGM_G1041(MGM_W881,si_delay);
   and MGM_G1042(MGM_W882,MGM_W881,MGM_W880);
   not MGM_G1043(MGM_W883,ssb_delay);
   and MGM_G1044(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W883,MGM_W882);
   not MGM_G1045(MGM_W884,d_delay);
   and MGM_G1046(MGM_W885,den_delay,MGM_W884);
   and MGM_G1047(MGM_W886,rb_delay,MGM_W885);
   not MGM_G1048(MGM_W887,si_delay);
   and MGM_G1049(MGM_W888,MGM_W887,MGM_W886);
   and MGM_G1050(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W888);
   not MGM_G1051(MGM_W889,d_delay);
   and MGM_G1052(MGM_W890,den_delay,MGM_W889);
   and MGM_G1053(MGM_W891,rb_delay,MGM_W890);
   and MGM_G1054(MGM_W892,si_delay,MGM_W891);
   not MGM_G1055(MGM_W893,ssb_delay);
   and MGM_G1056(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W893,MGM_W892);
   not MGM_G1057(MGM_W894,d_delay);
   and MGM_G1058(MGM_W895,den_delay,MGM_W894);
   and MGM_G1059(MGM_W896,rb_delay,MGM_W895);
   and MGM_G1060(MGM_W897,si_delay,MGM_W896);
   and MGM_G1061(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W897);
   not MGM_G1062(MGM_W898,den_delay);
   and MGM_G1063(MGM_W899,MGM_W898,d_delay);
   and MGM_G1064(MGM_W900,rb_delay,MGM_W899);
   not MGM_G1065(MGM_W901,si_delay);
   and MGM_G1066(MGM_W902,MGM_W901,MGM_W900);
   not MGM_G1067(MGM_W903,ssb_delay);
   and MGM_G1068(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W903,MGM_W902);
   not MGM_G1069(MGM_W904,den_delay);
   and MGM_G1070(MGM_W905,MGM_W904,d_delay);
   and MGM_G1071(MGM_W906,rb_delay,MGM_W905);
   not MGM_G1072(MGM_W907,si_delay);
   and MGM_G1073(MGM_W908,MGM_W907,MGM_W906);
   and MGM_G1074(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W908);
   not MGM_G1075(MGM_W909,den_delay);
   and MGM_G1076(MGM_W910,MGM_W909,d_delay);
   and MGM_G1077(MGM_W911,rb_delay,MGM_W910);
   and MGM_G1078(MGM_W912,si_delay,MGM_W911);
   not MGM_G1079(MGM_W913,ssb_delay);
   and MGM_G1080(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W913,MGM_W912);
   not MGM_G1081(MGM_W914,den_delay);
   and MGM_G1082(MGM_W915,MGM_W914,d_delay);
   and MGM_G1083(MGM_W916,rb_delay,MGM_W915);
   and MGM_G1084(MGM_W917,si_delay,MGM_W916);
   and MGM_G1085(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W917);
   and MGM_G1086(MGM_W918,den_delay,d_delay);
   and MGM_G1087(MGM_W919,rb_delay,MGM_W918);
   not MGM_G1088(MGM_W920,si_delay);
   and MGM_G1089(MGM_W921,MGM_W920,MGM_W919);
   not MGM_G1090(MGM_W922,ssb_delay);
   and MGM_G1091(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W922,MGM_W921);
   and MGM_G1092(MGM_W923,den_delay,d_delay);
   and MGM_G1093(MGM_W924,rb_delay,MGM_W923);
   not MGM_G1094(MGM_W925,si_delay);
   and MGM_G1095(MGM_W926,MGM_W925,MGM_W924);
   and MGM_G1096(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W926);
   and MGM_G1097(MGM_W927,den_delay,d_delay);
   and MGM_G1098(MGM_W928,rb_delay,MGM_W927);
   and MGM_G1099(MGM_W929,si_delay,MGM_W928);
   not MGM_G1100(MGM_W930,ssb_delay);
   and MGM_G1101(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W930,MGM_W929);
   and MGM_G1102(MGM_W931,den_delay,d_delay);
   and MGM_G1103(MGM_W932,rb_delay,MGM_W931);
   and MGM_G1104(MGM_W933,si_delay,MGM_W932);
   and MGM_G1105(ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W933);
   not MGM_G1106(MGM_W934,d_delay);
   not MGM_G1107(MGM_W935,den_delay);
   and MGM_G1108(MGM_W936,MGM_W935,MGM_W934);
   and MGM_G1109(MGM_W937,rb_delay,MGM_W936);
   not MGM_G1110(MGM_W938,si_delay);
   and MGM_G1111(MGM_W939,MGM_W938,MGM_W937);
   not MGM_G1112(MGM_W940,sleep);
   and MGM_G1113(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W940,MGM_W939);
   not MGM_G1114(MGM_W941,d_delay);
   not MGM_G1115(MGM_W942,den_delay);
   and MGM_G1116(MGM_W943,MGM_W942,MGM_W941);
   and MGM_G1117(MGM_W944,rb_delay,MGM_W943);
   not MGM_G1118(MGM_W945,si_delay);
   and MGM_G1119(MGM_W946,MGM_W945,MGM_W944);
   and MGM_G1120(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W946);
   not MGM_G1121(MGM_W947,d_delay);
   not MGM_G1122(MGM_W948,den_delay);
   and MGM_G1123(MGM_W949,MGM_W948,MGM_W947);
   and MGM_G1124(MGM_W950,rb_delay,MGM_W949);
   and MGM_G1125(MGM_W951,si_delay,MGM_W950);
   not MGM_G1126(MGM_W952,sleep);
   and MGM_G1127(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W952,MGM_W951);
   not MGM_G1128(MGM_W953,d_delay);
   not MGM_G1129(MGM_W954,den_delay);
   and MGM_G1130(MGM_W955,MGM_W954,MGM_W953);
   and MGM_G1131(MGM_W956,rb_delay,MGM_W955);
   and MGM_G1132(MGM_W957,si_delay,MGM_W956);
   and MGM_G1133(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W957);
   not MGM_G1134(MGM_W958,d_delay);
   and MGM_G1135(MGM_W959,den_delay,MGM_W958);
   and MGM_G1136(MGM_W960,rb_delay,MGM_W959);
   and MGM_G1137(MGM_W961,si_delay,MGM_W960);
   not MGM_G1138(MGM_W962,sleep);
   and MGM_G1139(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W962,MGM_W961);
   not MGM_G1140(MGM_W963,d_delay);
   and MGM_G1141(MGM_W964,den_delay,MGM_W963);
   and MGM_G1142(MGM_W965,rb_delay,MGM_W964);
   and MGM_G1143(MGM_W966,si_delay,MGM_W965);
   and MGM_G1144(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W966);
   not MGM_G1145(MGM_W967,den_delay);
   and MGM_G1146(MGM_W968,MGM_W967,d_delay);
   and MGM_G1147(MGM_W969,rb_delay,MGM_W968);
   not MGM_G1148(MGM_W970,si_delay);
   and MGM_G1149(MGM_W971,MGM_W970,MGM_W969);
   not MGM_G1150(MGM_W972,sleep);
   and MGM_G1151(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W972,MGM_W971);
   not MGM_G1152(MGM_W973,den_delay);
   and MGM_G1153(MGM_W974,MGM_W973,d_delay);
   and MGM_G1154(MGM_W975,rb_delay,MGM_W974);
   not MGM_G1155(MGM_W976,si_delay);
   and MGM_G1156(MGM_W977,MGM_W976,MGM_W975);
   and MGM_G1157(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W977);
   not MGM_G1158(MGM_W978,den_delay);
   and MGM_G1159(MGM_W979,MGM_W978,d_delay);
   and MGM_G1160(MGM_W980,rb_delay,MGM_W979);
   and MGM_G1161(MGM_W981,si_delay,MGM_W980);
   not MGM_G1162(MGM_W982,sleep);
   and MGM_G1163(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W982,MGM_W981);
   not MGM_G1164(MGM_W983,den_delay);
   and MGM_G1165(MGM_W984,MGM_W983,d_delay);
   and MGM_G1166(MGM_W985,rb_delay,MGM_W984);
   and MGM_G1167(MGM_W986,si_delay,MGM_W985);
   and MGM_G1168(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W986);
   and MGM_G1169(MGM_W987,den_delay,d_delay);
   and MGM_G1170(MGM_W988,rb_delay,MGM_W987);
   not MGM_G1171(MGM_W989,si_delay);
   and MGM_G1172(MGM_W990,MGM_W989,MGM_W988);
   not MGM_G1173(MGM_W991,sleep);
   and MGM_G1174(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W991,MGM_W990);
   and MGM_G1175(MGM_W992,den_delay,d_delay);
   and MGM_G1176(MGM_W993,rb_delay,MGM_W992);
   not MGM_G1177(MGM_W994,si_delay);
   and MGM_G1178(MGM_W995,MGM_W994,MGM_W993);
   and MGM_G1179(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W995);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0sfvzr43ad1d12x5( clk, d, den, o, rb, si, sleep, so, ssb `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// Posedge Mux-D Retention FF with async active low reset and data enable
// 
// 
// 
// assign  int1 =  den ? d : IQ2;
// assign  int2 =  ssb ? int1 : si;
// 
// always @ (clk or int2 or rb)
// begin
// if (!rb)
// begin
// IQ1 <= 1'b0 ;
// end
// else if (!clk)
// begin
// IQ1 <= int2;
// end
// end
// always @ (IQ1 or clk or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ2 <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ2 <= IQ1;
// end
// end
// 
// assign `fvzr43ad_delay o =  IQ2;
// assign `fvzr43ad_delay so =  IQ2;
// 

   input clk, d, den, rb, si, sleep, ssb;
   output o, so;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      wire so_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init or so_random_init)
         if((o_random_init !== 1'bx) && (so_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
         assign so = ((random_init_ctrl_gls === 1'b1) && (so_random_init === 1'bx)) ? init_val : so_random_init;
      `else
         assign o = o_random_init;
         assign so = so_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d12x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d12x5_behav_inst(.clk(clk),.d(d),.den(den),.o(o_tmp),.rb(rb),.si(si),.sleep(sleep),.so(so_tmp),.ssb(ssb),.notifier(1'b0));
      assign `fvzr43ad_delay o_random_init = o_tmp ;
      assign `fvzr43ad_delay so_random_init = so_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire den_delay ;
   wire rb_delay ;
   wire si_delay ;
   wire ssb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_fvzr43ad_func i0sfvzr43ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.den(den_delay),.o(o_random_init),.rb(rb_delay),.si(si_delay),.sleep(sleep),.so(so_random_init),.ssb(ssb_delay),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G590(MGM_W498,d_delay);
   not MGM_G591(MGM_W499,den_delay);
   and MGM_G592(MGM_W500,MGM_W499,MGM_W498);
   and MGM_G593(MGM_W501,rb_delay,MGM_W500);
   not MGM_G594(MGM_W502,si_delay);
   and MGM_G595(MGM_W503,MGM_W502,MGM_W501);
   not MGM_G596(MGM_W504,sleep);
   and MGM_G597(MGM_W505,MGM_W504,MGM_W503);
   not MGM_G598(MGM_W506,ssb_delay);
   and MGM_G599(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W506,MGM_W505);
   not MGM_G600(MGM_W507,d_delay);
   not MGM_G601(MGM_W508,den_delay);
   and MGM_G602(MGM_W509,MGM_W508,MGM_W507);
   and MGM_G603(MGM_W510,rb_delay,MGM_W509);
   not MGM_G604(MGM_W511,si_delay);
   and MGM_G605(MGM_W512,MGM_W511,MGM_W510);
   and MGM_G606(MGM_W513,sleep,MGM_W512);
   not MGM_G607(MGM_W514,ssb_delay);
   and MGM_G608(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W514,MGM_W513);
   not MGM_G609(MGM_W515,d_delay);
   not MGM_G610(MGM_W516,den_delay);
   and MGM_G611(MGM_W517,MGM_W516,MGM_W515);
   and MGM_G612(MGM_W518,rb_delay,MGM_W517);
   not MGM_G613(MGM_W519,si_delay);
   and MGM_G614(MGM_W520,MGM_W519,MGM_W518);
   and MGM_G615(MGM_W521,sleep,MGM_W520);
   and MGM_G616(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W521);
   not MGM_G617(MGM_W522,d_delay);
   not MGM_G618(MGM_W523,den_delay);
   and MGM_G619(MGM_W524,MGM_W523,MGM_W522);
   and MGM_G620(MGM_W525,rb_delay,MGM_W524);
   and MGM_G621(MGM_W526,si_delay,MGM_W525);
   not MGM_G622(MGM_W527,sleep);
   and MGM_G623(MGM_W528,MGM_W527,MGM_W526);
   not MGM_G624(MGM_W529,ssb_delay);
   and MGM_G625(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W529,MGM_W528);
   not MGM_G626(MGM_W530,d_delay);
   not MGM_G627(MGM_W531,den_delay);
   and MGM_G628(MGM_W532,MGM_W531,MGM_W530);
   and MGM_G629(MGM_W533,rb_delay,MGM_W532);
   and MGM_G630(MGM_W534,si_delay,MGM_W533);
   and MGM_G631(MGM_W535,sleep,MGM_W534);
   not MGM_G632(MGM_W536,ssb_delay);
   and MGM_G633(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W536,MGM_W535);
   not MGM_G634(MGM_W537,d_delay);
   not MGM_G635(MGM_W538,den_delay);
   and MGM_G636(MGM_W539,MGM_W538,MGM_W537);
   and MGM_G637(MGM_W540,rb_delay,MGM_W539);
   and MGM_G638(MGM_W541,si_delay,MGM_W540);
   and MGM_G639(MGM_W542,sleep,MGM_W541);
   and MGM_G640(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W542);
   not MGM_G641(MGM_W543,d_delay);
   and MGM_G642(MGM_W544,den_delay,MGM_W543);
   and MGM_G643(MGM_W545,rb_delay,MGM_W544);
   not MGM_G644(MGM_W546,si_delay);
   and MGM_G645(MGM_W547,MGM_W546,MGM_W545);
   not MGM_G646(MGM_W548,sleep);
   and MGM_G647(MGM_W549,MGM_W548,MGM_W547);
   not MGM_G648(MGM_W550,ssb_delay);
   and MGM_G649(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W550,MGM_W549);
   not MGM_G650(MGM_W551,d_delay);
   and MGM_G651(MGM_W552,den_delay,MGM_W551);
   and MGM_G652(MGM_W553,rb_delay,MGM_W552);
   not MGM_G653(MGM_W554,si_delay);
   and MGM_G654(MGM_W555,MGM_W554,MGM_W553);
   not MGM_G655(MGM_W556,sleep);
   and MGM_G656(MGM_W557,MGM_W556,MGM_W555);
   and MGM_G657(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W557);
   not MGM_G658(MGM_W558,d_delay);
   and MGM_G659(MGM_W559,den_delay,MGM_W558);
   and MGM_G660(MGM_W560,rb_delay,MGM_W559);
   not MGM_G661(MGM_W561,si_delay);
   and MGM_G662(MGM_W562,MGM_W561,MGM_W560);
   and MGM_G663(MGM_W563,sleep,MGM_W562);
   not MGM_G664(MGM_W564,ssb_delay);
   and MGM_G665(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W564,MGM_W563);
   not MGM_G666(MGM_W565,d_delay);
   and MGM_G667(MGM_W566,den_delay,MGM_W565);
   and MGM_G668(MGM_W567,rb_delay,MGM_W566);
   not MGM_G669(MGM_W568,si_delay);
   and MGM_G670(MGM_W569,MGM_W568,MGM_W567);
   and MGM_G671(MGM_W570,sleep,MGM_W569);
   and MGM_G672(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W570);
   not MGM_G673(MGM_W571,d_delay);
   and MGM_G674(MGM_W572,den_delay,MGM_W571);
   and MGM_G675(MGM_W573,rb_delay,MGM_W572);
   and MGM_G676(MGM_W574,si_delay,MGM_W573);
   not MGM_G677(MGM_W575,sleep);
   and MGM_G678(MGM_W576,MGM_W575,MGM_W574);
   not MGM_G679(MGM_W577,ssb_delay);
   and MGM_G680(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W577,MGM_W576);
   not MGM_G681(MGM_W578,d_delay);
   and MGM_G682(MGM_W579,den_delay,MGM_W578);
   and MGM_G683(MGM_W580,rb_delay,MGM_W579);
   and MGM_G684(MGM_W581,si_delay,MGM_W580);
   not MGM_G685(MGM_W582,sleep);
   and MGM_G686(MGM_W583,MGM_W582,MGM_W581);
   and MGM_G687(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W583);
   not MGM_G688(MGM_W584,d_delay);
   and MGM_G689(MGM_W585,den_delay,MGM_W584);
   and MGM_G690(MGM_W586,rb_delay,MGM_W585);
   and MGM_G691(MGM_W587,si_delay,MGM_W586);
   and MGM_G692(MGM_W588,sleep,MGM_W587);
   not MGM_G693(MGM_W589,ssb_delay);
   and MGM_G694(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W589,MGM_W588);
   not MGM_G695(MGM_W590,d_delay);
   and MGM_G696(MGM_W591,den_delay,MGM_W590);
   and MGM_G697(MGM_W592,rb_delay,MGM_W591);
   and MGM_G698(MGM_W593,si_delay,MGM_W592);
   and MGM_G699(MGM_W594,sleep,MGM_W593);
   and MGM_G700(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W594);
   not MGM_G701(MGM_W595,den_delay);
   and MGM_G702(MGM_W596,MGM_W595,d_delay);
   and MGM_G703(MGM_W597,rb_delay,MGM_W596);
   not MGM_G704(MGM_W598,si_delay);
   and MGM_G705(MGM_W599,MGM_W598,MGM_W597);
   not MGM_G706(MGM_W600,sleep);
   and MGM_G707(MGM_W601,MGM_W600,MGM_W599);
   not MGM_G708(MGM_W602,ssb_delay);
   and MGM_G709(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W602,MGM_W601);
   not MGM_G710(MGM_W603,den_delay);
   and MGM_G711(MGM_W604,MGM_W603,d_delay);
   and MGM_G712(MGM_W605,rb_delay,MGM_W604);
   not MGM_G713(MGM_W606,si_delay);
   and MGM_G714(MGM_W607,MGM_W606,MGM_W605);
   and MGM_G715(MGM_W608,sleep,MGM_W607);
   not MGM_G716(MGM_W609,ssb_delay);
   and MGM_G717(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W609,MGM_W608);
   not MGM_G718(MGM_W610,den_delay);
   and MGM_G719(MGM_W611,MGM_W610,d_delay);
   and MGM_G720(MGM_W612,rb_delay,MGM_W611);
   not MGM_G721(MGM_W613,si_delay);
   and MGM_G722(MGM_W614,MGM_W613,MGM_W612);
   and MGM_G723(MGM_W615,sleep,MGM_W614);
   and MGM_G724(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W615);
   not MGM_G725(MGM_W616,den_delay);
   and MGM_G726(MGM_W617,MGM_W616,d_delay);
   and MGM_G727(MGM_W618,rb_delay,MGM_W617);
   and MGM_G728(MGM_W619,si_delay,MGM_W618);
   not MGM_G729(MGM_W620,sleep);
   and MGM_G730(MGM_W621,MGM_W620,MGM_W619);
   not MGM_G731(MGM_W622,ssb_delay);
   and MGM_G732(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W622,MGM_W621);
   not MGM_G733(MGM_W623,den_delay);
   and MGM_G734(MGM_W624,MGM_W623,d_delay);
   and MGM_G735(MGM_W625,rb_delay,MGM_W624);
   and MGM_G736(MGM_W626,si_delay,MGM_W625);
   and MGM_G737(MGM_W627,sleep,MGM_W626);
   not MGM_G738(MGM_W628,ssb_delay);
   and MGM_G739(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W628,MGM_W627);
   not MGM_G740(MGM_W629,den_delay);
   and MGM_G741(MGM_W630,MGM_W629,d_delay);
   and MGM_G742(MGM_W631,rb_delay,MGM_W630);
   and MGM_G743(MGM_W632,si_delay,MGM_W631);
   and MGM_G744(MGM_W633,sleep,MGM_W632);
   and MGM_G745(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W633);
   and MGM_G746(MGM_W634,den_delay,d_delay);
   and MGM_G747(MGM_W635,rb_delay,MGM_W634);
   not MGM_G748(MGM_W636,si_delay);
   and MGM_G749(MGM_W637,MGM_W636,MGM_W635);
   not MGM_G750(MGM_W638,sleep);
   and MGM_G751(MGM_W639,MGM_W638,MGM_W637);
   not MGM_G752(MGM_W640,ssb_delay);
   and MGM_G753(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W640,MGM_W639);
   and MGM_G754(MGM_W641,den_delay,d_delay);
   and MGM_G755(MGM_W642,rb_delay,MGM_W641);
   not MGM_G756(MGM_W643,si_delay);
   and MGM_G757(MGM_W644,MGM_W643,MGM_W642);
   not MGM_G758(MGM_W645,sleep);
   and MGM_G759(MGM_W646,MGM_W645,MGM_W644);
   and MGM_G760(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W646);
   and MGM_G761(MGM_W647,den_delay,d_delay);
   and MGM_G762(MGM_W648,rb_delay,MGM_W647);
   not MGM_G763(MGM_W649,si_delay);
   and MGM_G764(MGM_W650,MGM_W649,MGM_W648);
   and MGM_G765(MGM_W651,sleep,MGM_W650);
   not MGM_G766(MGM_W652,ssb_delay);
   and MGM_G767(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb,MGM_W652,MGM_W651);
   and MGM_G768(MGM_W653,den_delay,d_delay);
   and MGM_G769(MGM_W654,rb_delay,MGM_W653);
   not MGM_G770(MGM_W655,si_delay);
   and MGM_G771(MGM_W656,MGM_W655,MGM_W654);
   and MGM_G772(MGM_W657,sleep,MGM_W656);
   and MGM_G773(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W657);
   and MGM_G774(MGM_W658,den_delay,d_delay);
   and MGM_G775(MGM_W659,rb_delay,MGM_W658);
   and MGM_G776(MGM_W660,si_delay,MGM_W659);
   not MGM_G777(MGM_W661,sleep);
   and MGM_G778(MGM_W662,MGM_W661,MGM_W660);
   not MGM_G779(MGM_W663,ssb_delay);
   and MGM_G780(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W663,MGM_W662);
   and MGM_G781(MGM_W664,den_delay,d_delay);
   and MGM_G782(MGM_W665,rb_delay,MGM_W664);
   and MGM_G783(MGM_W666,si_delay,MGM_W665);
   not MGM_G784(MGM_W667,sleep);
   and MGM_G785(MGM_W668,MGM_W667,MGM_W666);
   and MGM_G786(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W668);
   and MGM_G787(MGM_W669,den_delay,d_delay);
   and MGM_G788(MGM_W670,rb_delay,MGM_W669);
   and MGM_G789(MGM_W671,si_delay,MGM_W670);
   and MGM_G790(MGM_W672,sleep,MGM_W671);
   not MGM_G791(MGM_W673,ssb_delay);
   and MGM_G792(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb,MGM_W673,MGM_W672);
   and MGM_G793(MGM_W674,den_delay,d_delay);
   and MGM_G794(MGM_W675,rb_delay,MGM_W674);
   and MGM_G795(MGM_W676,si_delay,MGM_W675);
   and MGM_G796(MGM_W677,sleep,MGM_W676);
   and MGM_G797(ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W677);
   and MGM_G798(MGM_W678,rb_delay,den_delay);
   not MGM_G799(MGM_W679,si_delay);
   and MGM_G800(MGM_W680,MGM_W679,MGM_W678);
   not MGM_G801(MGM_W681,sleep);
   and MGM_G802(MGM_W682,MGM_W681,MGM_W680);
   and MGM_G803(ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W682);
   and MGM_G804(MGM_W683,rb_delay,den_delay);
   not MGM_G805(MGM_W684,si_delay);
   and MGM_G806(MGM_W685,MGM_W684,MGM_W683);
   and MGM_G807(MGM_W686,sleep,MGM_W685);
   and MGM_G808(ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W686);
   and MGM_G809(MGM_W687,rb_delay,den_delay);
   and MGM_G810(MGM_W688,si_delay,MGM_W687);
   not MGM_G811(MGM_W689,sleep);
   and MGM_G812(MGM_W690,MGM_W689,MGM_W688);
   and MGM_G813(ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W690);
   and MGM_G814(MGM_W691,rb_delay,den_delay);
   and MGM_G815(MGM_W692,si_delay,MGM_W691);
   and MGM_G816(MGM_W693,sleep,MGM_W692);
   and MGM_G817(ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W693);
   not MGM_G818(MGM_W694,d_delay);
   and MGM_G819(MGM_W695,rb_delay,MGM_W694);
   not MGM_G820(MGM_W696,si_delay);
   and MGM_G821(MGM_W697,MGM_W696,MGM_W695);
   not MGM_G822(MGM_W698,sleep);
   and MGM_G823(MGM_W699,MGM_W698,MGM_W697);
   and MGM_G824(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W699);
   not MGM_G825(MGM_W700,d_delay);
   and MGM_G826(MGM_W701,rb_delay,MGM_W700);
   not MGM_G827(MGM_W702,si_delay);
   and MGM_G828(MGM_W703,MGM_W702,MGM_W701);
   and MGM_G829(MGM_W704,sleep,MGM_W703);
   and MGM_G830(ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W704);
   not MGM_G831(MGM_W705,d_delay);
   and MGM_G832(MGM_W706,rb_delay,MGM_W705);
   and MGM_G833(MGM_W707,si_delay,MGM_W706);
   not MGM_G834(MGM_W708,sleep);
   and MGM_G835(MGM_W709,MGM_W708,MGM_W707);
   and MGM_G836(ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W709);
   not MGM_G837(MGM_W710,d_delay);
   and MGM_G838(MGM_W711,rb_delay,MGM_W710);
   and MGM_G839(MGM_W712,si_delay,MGM_W711);
   and MGM_G840(MGM_W713,sleep,MGM_W712);
   and MGM_G841(ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W713);
   and MGM_G842(MGM_W714,rb_delay,d_delay);
   not MGM_G843(MGM_W715,si_delay);
   and MGM_G844(MGM_W716,MGM_W715,MGM_W714);
   not MGM_G845(MGM_W717,sleep);
   and MGM_G846(MGM_W718,MGM_W717,MGM_W716);
   and MGM_G847(ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W718);
   and MGM_G848(MGM_W719,rb_delay,d_delay);
   not MGM_G849(MGM_W720,si_delay);
   and MGM_G850(MGM_W721,MGM_W720,MGM_W719);
   and MGM_G851(MGM_W722,sleep,MGM_W721);
   and MGM_G852(ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W722);
   and MGM_G853(MGM_W723,rb_delay,d_delay);
   and MGM_G854(MGM_W724,si_delay,MGM_W723);
   not MGM_G855(MGM_W725,sleep);
   and MGM_G856(MGM_W726,MGM_W725,MGM_W724);
   and MGM_G857(ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W726);
   and MGM_G858(MGM_W727,rb_delay,d_delay);
   and MGM_G859(MGM_W728,si_delay,MGM_W727);
   and MGM_G860(MGM_W729,sleep,MGM_W728);
   and MGM_G861(ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W729);
   not MGM_G862(MGM_W730,d_delay);
   not MGM_G863(MGM_W731,den_delay);
   and MGM_G864(MGM_W732,MGM_W731,MGM_W730);
   not MGM_G865(MGM_W733,si_delay);
   and MGM_G866(MGM_W734,MGM_W733,MGM_W732);
   and MGM_G867(MGM_W735,sleep,MGM_W734);
   and MGM_G868(ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W735);
   not MGM_G869(MGM_W736,d_delay);
   not MGM_G870(MGM_W737,den_delay);
   and MGM_G871(MGM_W738,MGM_W737,MGM_W736);
   and MGM_G872(MGM_W739,si_delay,MGM_W738);
   not MGM_G873(MGM_W740,sleep);
   and MGM_G874(MGM_W741,MGM_W740,MGM_W739);
   not MGM_G875(MGM_W742,ssb_delay);
   and MGM_G876(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W742,MGM_W741);
   not MGM_G877(MGM_W743,d_delay);
   not MGM_G878(MGM_W744,den_delay);
   and MGM_G879(MGM_W745,MGM_W744,MGM_W743);
   and MGM_G880(MGM_W746,si_delay,MGM_W745);
   and MGM_G881(MGM_W747,sleep,MGM_W746);
   not MGM_G882(MGM_W748,ssb_delay);
   and MGM_G883(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W748,MGM_W747);
   not MGM_G884(MGM_W749,d_delay);
   not MGM_G885(MGM_W750,den_delay);
   and MGM_G886(MGM_W751,MGM_W750,MGM_W749);
   and MGM_G887(MGM_W752,si_delay,MGM_W751);
   and MGM_G888(MGM_W753,sleep,MGM_W752);
   and MGM_G889(ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W753);
   not MGM_G890(MGM_W754,d_delay);
   and MGM_G891(MGM_W755,den_delay,MGM_W754);
   and MGM_G892(MGM_W756,si_delay,MGM_W755);
   not MGM_G893(MGM_W757,sleep);
   and MGM_G894(MGM_W758,MGM_W757,MGM_W756);
   not MGM_G895(MGM_W759,ssb_delay);
   and MGM_G896(ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W759,MGM_W758);
   not MGM_G897(MGM_W760,d_delay);
   and MGM_G898(MGM_W761,den_delay,MGM_W760);
   and MGM_G899(MGM_W762,si_delay,MGM_W761);
   and MGM_G900(MGM_W763,sleep,MGM_W762);
   not MGM_G901(MGM_W764,ssb_delay);
   and MGM_G902(ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W764,MGM_W763);
   not MGM_G903(MGM_W765,den_delay);
   and MGM_G904(MGM_W766,MGM_W765,d_delay);
   not MGM_G905(MGM_W767,si_delay);
   and MGM_G906(MGM_W768,MGM_W767,MGM_W766);
   and MGM_G907(MGM_W769,sleep,MGM_W768);
   and MGM_G908(ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W769);
   not MGM_G909(MGM_W770,den_delay);
   and MGM_G910(MGM_W771,MGM_W770,d_delay);
   and MGM_G911(MGM_W772,si_delay,MGM_W771);
   not MGM_G912(MGM_W773,sleep);
   and MGM_G913(MGM_W774,MGM_W773,MGM_W772);
   not MGM_G914(MGM_W775,ssb_delay);
   and MGM_G915(ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W775,MGM_W774);
   not MGM_G916(MGM_W776,den_delay);
   and MGM_G917(MGM_W777,MGM_W776,d_delay);
   and MGM_G918(MGM_W778,si_delay,MGM_W777);
   and MGM_G919(MGM_W779,sleep,MGM_W778);
   not MGM_G920(MGM_W780,ssb_delay);
   and MGM_G921(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W780,MGM_W779);
   not MGM_G922(MGM_W781,den_delay);
   and MGM_G923(MGM_W782,MGM_W781,d_delay);
   and MGM_G924(MGM_W783,si_delay,MGM_W782);
   and MGM_G925(MGM_W784,sleep,MGM_W783);
   and MGM_G926(ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W784);
   and MGM_G927(MGM_W785,den_delay,d_delay);
   not MGM_G928(MGM_W786,si_delay);
   and MGM_G929(MGM_W787,MGM_W786,MGM_W785);
   not MGM_G930(MGM_W788,sleep);
   and MGM_G931(MGM_W789,MGM_W788,MGM_W787);
   and MGM_G932(ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W789);
   and MGM_G933(MGM_W790,den_delay,d_delay);
   not MGM_G934(MGM_W791,si_delay);
   and MGM_G935(MGM_W792,MGM_W791,MGM_W790);
   and MGM_G936(MGM_W793,sleep,MGM_W792);
   and MGM_G937(ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb,ssb_delay,MGM_W793);
   and MGM_G938(MGM_W794,den_delay,d_delay);
   and MGM_G939(MGM_W795,si_delay,MGM_W794);
   not MGM_G940(MGM_W796,sleep);
   and MGM_G941(MGM_W797,MGM_W796,MGM_W795);
   not MGM_G942(MGM_W798,ssb_delay);
   and MGM_G943(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb,MGM_W798,MGM_W797);
   and MGM_G944(MGM_W799,den_delay,d_delay);
   and MGM_G945(MGM_W800,si_delay,MGM_W799);
   not MGM_G946(MGM_W801,sleep);
   and MGM_G947(MGM_W802,MGM_W801,MGM_W800);
   and MGM_G948(ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb,ssb_delay,MGM_W802);
   and MGM_G949(MGM_W803,den_delay,d_delay);
   and MGM_G950(MGM_W804,si_delay,MGM_W803);
   and MGM_G951(MGM_W805,sleep,MGM_W804);
   not MGM_G952(MGM_W806,ssb_delay);
   and MGM_G953(ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb,MGM_W806,MGM_W805);
   and MGM_G954(MGM_W807,den_delay,d_delay);
   and MGM_G955(MGM_W808,si_delay,MGM_W807);
   and MGM_G956(MGM_W809,sleep,MGM_W808);
   and MGM_G957(ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb,ssb_delay,MGM_W809);
   not MGM_G958(MGM_W810,d_delay);
   not MGM_G959(MGM_W811,den_delay);
   and MGM_G960(MGM_W812,MGM_W811,MGM_W810);
   and MGM_G961(MGM_W813,rb_delay,MGM_W812);
   not MGM_G962(MGM_W814,sleep);
   and MGM_G963(MGM_W815,MGM_W814,MGM_W813);
   not MGM_G964(MGM_W816,ssb_delay);
   and MGM_G965(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W816,MGM_W815);
   not MGM_G966(MGM_W817,d_delay);
   not MGM_G967(MGM_W818,den_delay);
   and MGM_G968(MGM_W819,MGM_W818,MGM_W817);
   and MGM_G969(MGM_W820,rb_delay,MGM_W819);
   and MGM_G970(MGM_W821,sleep,MGM_W820);
   not MGM_G971(MGM_W822,ssb_delay);
   and MGM_G972(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W822,MGM_W821);
   not MGM_G973(MGM_W823,d_delay);
   and MGM_G974(MGM_W824,den_delay,MGM_W823);
   and MGM_G975(MGM_W825,rb_delay,MGM_W824);
   not MGM_G976(MGM_W826,sleep);
   and MGM_G977(MGM_W827,MGM_W826,MGM_W825);
   not MGM_G978(MGM_W828,ssb_delay);
   and MGM_G979(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W828,MGM_W827);
   not MGM_G980(MGM_W829,d_delay);
   and MGM_G981(MGM_W830,den_delay,MGM_W829);
   and MGM_G982(MGM_W831,rb_delay,MGM_W830);
   and MGM_G983(MGM_W832,sleep,MGM_W831);
   not MGM_G984(MGM_W833,ssb_delay);
   and MGM_G985(ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W833,MGM_W832);
   not MGM_G986(MGM_W834,den_delay);
   and MGM_G987(MGM_W835,MGM_W834,d_delay);
   and MGM_G988(MGM_W836,rb_delay,MGM_W835);
   not MGM_G989(MGM_W837,sleep);
   and MGM_G990(MGM_W838,MGM_W837,MGM_W836);
   not MGM_G991(MGM_W839,ssb_delay);
   and MGM_G992(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W839,MGM_W838);
   not MGM_G993(MGM_W840,den_delay);
   and MGM_G994(MGM_W841,MGM_W840,d_delay);
   and MGM_G995(MGM_W842,rb_delay,MGM_W841);
   and MGM_G996(MGM_W843,sleep,MGM_W842);
   not MGM_G997(MGM_W844,ssb_delay);
   and MGM_G998(ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W844,MGM_W843);
   and MGM_G999(MGM_W845,den_delay,d_delay);
   and MGM_G1000(MGM_W846,rb_delay,MGM_W845);
   not MGM_G1001(MGM_W847,sleep);
   and MGM_G1002(MGM_W848,MGM_W847,MGM_W846);
   not MGM_G1003(MGM_W849,ssb_delay);
   and MGM_G1004(ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb,MGM_W849,MGM_W848);
   and MGM_G1005(MGM_W850,den_delay,d_delay);
   and MGM_G1006(MGM_W851,rb_delay,MGM_W850);
   and MGM_G1007(MGM_W852,sleep,MGM_W851);
   not MGM_G1008(MGM_W853,ssb_delay);
   and MGM_G1009(ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb,MGM_W853,MGM_W852);
   not MGM_G1010(MGM_W854,d_delay);
   not MGM_G1011(MGM_W855,den_delay);
   and MGM_G1012(MGM_W856,MGM_W855,MGM_W854);
   and MGM_G1013(MGM_W857,rb_delay,MGM_W856);
   not MGM_G1014(MGM_W858,si_delay);
   and MGM_G1015(MGM_W859,MGM_W858,MGM_W857);
   not MGM_G1016(MGM_W860,ssb_delay);
   and MGM_G1017(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W860,MGM_W859);
   not MGM_G1018(MGM_W861,d_delay);
   not MGM_G1019(MGM_W862,den_delay);
   and MGM_G1020(MGM_W863,MGM_W862,MGM_W861);
   and MGM_G1021(MGM_W864,rb_delay,MGM_W863);
   not MGM_G1022(MGM_W865,si_delay);
   and MGM_G1023(MGM_W866,MGM_W865,MGM_W864);
   and MGM_G1024(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W866);
   not MGM_G1025(MGM_W867,d_delay);
   not MGM_G1026(MGM_W868,den_delay);
   and MGM_G1027(MGM_W869,MGM_W868,MGM_W867);
   and MGM_G1028(MGM_W870,rb_delay,MGM_W869);
   and MGM_G1029(MGM_W871,si_delay,MGM_W870);
   not MGM_G1030(MGM_W872,ssb_delay);
   and MGM_G1031(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W872,MGM_W871);
   not MGM_G1032(MGM_W873,d_delay);
   not MGM_G1033(MGM_W874,den_delay);
   and MGM_G1034(MGM_W875,MGM_W874,MGM_W873);
   and MGM_G1035(MGM_W876,rb_delay,MGM_W875);
   and MGM_G1036(MGM_W877,si_delay,MGM_W876);
   and MGM_G1037(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W877);
   not MGM_G1038(MGM_W878,d_delay);
   and MGM_G1039(MGM_W879,den_delay,MGM_W878);
   and MGM_G1040(MGM_W880,rb_delay,MGM_W879);
   not MGM_G1041(MGM_W881,si_delay);
   and MGM_G1042(MGM_W882,MGM_W881,MGM_W880);
   not MGM_G1043(MGM_W883,ssb_delay);
   and MGM_G1044(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W883,MGM_W882);
   not MGM_G1045(MGM_W884,d_delay);
   and MGM_G1046(MGM_W885,den_delay,MGM_W884);
   and MGM_G1047(MGM_W886,rb_delay,MGM_W885);
   not MGM_G1048(MGM_W887,si_delay);
   and MGM_G1049(MGM_W888,MGM_W887,MGM_W886);
   and MGM_G1050(ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W888);
   not MGM_G1051(MGM_W889,d_delay);
   and MGM_G1052(MGM_W890,den_delay,MGM_W889);
   and MGM_G1053(MGM_W891,rb_delay,MGM_W890);
   and MGM_G1054(MGM_W892,si_delay,MGM_W891);
   not MGM_G1055(MGM_W893,ssb_delay);
   and MGM_G1056(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W893,MGM_W892);
   not MGM_G1057(MGM_W894,d_delay);
   and MGM_G1058(MGM_W895,den_delay,MGM_W894);
   and MGM_G1059(MGM_W896,rb_delay,MGM_W895);
   and MGM_G1060(MGM_W897,si_delay,MGM_W896);
   and MGM_G1061(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W897);
   not MGM_G1062(MGM_W898,den_delay);
   and MGM_G1063(MGM_W899,MGM_W898,d_delay);
   and MGM_G1064(MGM_W900,rb_delay,MGM_W899);
   not MGM_G1065(MGM_W901,si_delay);
   and MGM_G1066(MGM_W902,MGM_W901,MGM_W900);
   not MGM_G1067(MGM_W903,ssb_delay);
   and MGM_G1068(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W903,MGM_W902);
   not MGM_G1069(MGM_W904,den_delay);
   and MGM_G1070(MGM_W905,MGM_W904,d_delay);
   and MGM_G1071(MGM_W906,rb_delay,MGM_W905);
   not MGM_G1072(MGM_W907,si_delay);
   and MGM_G1073(MGM_W908,MGM_W907,MGM_W906);
   and MGM_G1074(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W908);
   not MGM_G1075(MGM_W909,den_delay);
   and MGM_G1076(MGM_W910,MGM_W909,d_delay);
   and MGM_G1077(MGM_W911,rb_delay,MGM_W910);
   and MGM_G1078(MGM_W912,si_delay,MGM_W911);
   not MGM_G1079(MGM_W913,ssb_delay);
   and MGM_G1080(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W913,MGM_W912);
   not MGM_G1081(MGM_W914,den_delay);
   and MGM_G1082(MGM_W915,MGM_W914,d_delay);
   and MGM_G1083(MGM_W916,rb_delay,MGM_W915);
   and MGM_G1084(MGM_W917,si_delay,MGM_W916);
   and MGM_G1085(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W917);
   and MGM_G1086(MGM_W918,den_delay,d_delay);
   and MGM_G1087(MGM_W919,rb_delay,MGM_W918);
   not MGM_G1088(MGM_W920,si_delay);
   and MGM_G1089(MGM_W921,MGM_W920,MGM_W919);
   not MGM_G1090(MGM_W922,ssb_delay);
   and MGM_G1091(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb,MGM_W922,MGM_W921);
   and MGM_G1092(MGM_W923,den_delay,d_delay);
   and MGM_G1093(MGM_W924,rb_delay,MGM_W923);
   not MGM_G1094(MGM_W925,si_delay);
   and MGM_G1095(MGM_W926,MGM_W925,MGM_W924);
   and MGM_G1096(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb,ssb_delay,MGM_W926);
   and MGM_G1097(MGM_W927,den_delay,d_delay);
   and MGM_G1098(MGM_W928,rb_delay,MGM_W927);
   and MGM_G1099(MGM_W929,si_delay,MGM_W928);
   not MGM_G1100(MGM_W930,ssb_delay);
   and MGM_G1101(ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb,MGM_W930,MGM_W929);
   and MGM_G1102(MGM_W931,den_delay,d_delay);
   and MGM_G1103(MGM_W932,rb_delay,MGM_W931);
   and MGM_G1104(MGM_W933,si_delay,MGM_W932);
   and MGM_G1105(ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb,ssb_delay,MGM_W933);
   not MGM_G1106(MGM_W934,d_delay);
   not MGM_G1107(MGM_W935,den_delay);
   and MGM_G1108(MGM_W936,MGM_W935,MGM_W934);
   and MGM_G1109(MGM_W937,rb_delay,MGM_W936);
   not MGM_G1110(MGM_W938,si_delay);
   and MGM_G1111(MGM_W939,MGM_W938,MGM_W937);
   not MGM_G1112(MGM_W940,sleep);
   and MGM_G1113(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W940,MGM_W939);
   not MGM_G1114(MGM_W941,d_delay);
   not MGM_G1115(MGM_W942,den_delay);
   and MGM_G1116(MGM_W943,MGM_W942,MGM_W941);
   and MGM_G1117(MGM_W944,rb_delay,MGM_W943);
   not MGM_G1118(MGM_W945,si_delay);
   and MGM_G1119(MGM_W946,MGM_W945,MGM_W944);
   and MGM_G1120(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W946);
   not MGM_G1121(MGM_W947,d_delay);
   not MGM_G1122(MGM_W948,den_delay);
   and MGM_G1123(MGM_W949,MGM_W948,MGM_W947);
   and MGM_G1124(MGM_W950,rb_delay,MGM_W949);
   and MGM_G1125(MGM_W951,si_delay,MGM_W950);
   not MGM_G1126(MGM_W952,sleep);
   and MGM_G1127(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W952,MGM_W951);
   not MGM_G1128(MGM_W953,d_delay);
   not MGM_G1129(MGM_W954,den_delay);
   and MGM_G1130(MGM_W955,MGM_W954,MGM_W953);
   and MGM_G1131(MGM_W956,rb_delay,MGM_W955);
   and MGM_G1132(MGM_W957,si_delay,MGM_W956);
   and MGM_G1133(ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W957);
   not MGM_G1134(MGM_W958,d_delay);
   and MGM_G1135(MGM_W959,den_delay,MGM_W958);
   and MGM_G1136(MGM_W960,rb_delay,MGM_W959);
   and MGM_G1137(MGM_W961,si_delay,MGM_W960);
   not MGM_G1138(MGM_W962,sleep);
   and MGM_G1139(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W962,MGM_W961);
   not MGM_G1140(MGM_W963,d_delay);
   and MGM_G1141(MGM_W964,den_delay,MGM_W963);
   and MGM_G1142(MGM_W965,rb_delay,MGM_W964);
   and MGM_G1143(MGM_W966,si_delay,MGM_W965);
   and MGM_G1144(ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W966);
   not MGM_G1145(MGM_W967,den_delay);
   and MGM_G1146(MGM_W968,MGM_W967,d_delay);
   and MGM_G1147(MGM_W969,rb_delay,MGM_W968);
   not MGM_G1148(MGM_W970,si_delay);
   and MGM_G1149(MGM_W971,MGM_W970,MGM_W969);
   not MGM_G1150(MGM_W972,sleep);
   and MGM_G1151(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W972,MGM_W971);
   not MGM_G1152(MGM_W973,den_delay);
   and MGM_G1153(MGM_W974,MGM_W973,d_delay);
   and MGM_G1154(MGM_W975,rb_delay,MGM_W974);
   not MGM_G1155(MGM_W976,si_delay);
   and MGM_G1156(MGM_W977,MGM_W976,MGM_W975);
   and MGM_G1157(ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W977);
   not MGM_G1158(MGM_W978,den_delay);
   and MGM_G1159(MGM_W979,MGM_W978,d_delay);
   and MGM_G1160(MGM_W980,rb_delay,MGM_W979);
   and MGM_G1161(MGM_W981,si_delay,MGM_W980);
   not MGM_G1162(MGM_W982,sleep);
   and MGM_G1163(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep,MGM_W982,MGM_W981);
   not MGM_G1164(MGM_W983,den_delay);
   and MGM_G1165(MGM_W984,MGM_W983,d_delay);
   and MGM_G1166(MGM_W985,rb_delay,MGM_W984);
   and MGM_G1167(MGM_W986,si_delay,MGM_W985);
   and MGM_G1168(ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep,sleep,MGM_W986);
   and MGM_G1169(MGM_W987,den_delay,d_delay);
   and MGM_G1170(MGM_W988,rb_delay,MGM_W987);
   not MGM_G1171(MGM_W989,si_delay);
   and MGM_G1172(MGM_W990,MGM_W989,MGM_W988);
   not MGM_G1173(MGM_W991,sleep);
   and MGM_G1174(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep,MGM_W991,MGM_W990);
   and MGM_G1175(MGM_W992,den_delay,d_delay);
   and MGM_G1176(MGM_W993,rb_delay,MGM_W992);
   not MGM_G1177(MGM_W994,si_delay);
   and MGM_G1178(MGM_W995,MGM_W994,MGM_W993);
   and MGM_G1179(ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep,sleep,MGM_W995);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc clk --> so
      (posedge clk => (so : d))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b0 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b0)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && si==1'b1 && sleep==1'b0 && ssb==1'b1)
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> so
      (negedge rb => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b0 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b0 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b0 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b0)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && den==1'b1 && rb==1'b1 && si==1'b1 && ssb==1'b1)
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> so
      (negedge sleep => (so +: 1'b1))  = (0.0,0.0);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_NOT_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1)
      ,0.0,0,notifier);
      
      $width(negedge clk,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      $setuphold(posedge clk &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge d &&& (ENABLE_den_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-LH
      
      // setuphold d- clk-LH
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_NOT_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      negedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge den &&& (ENABLE_d_AND_rb_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,den_delay);
      
      // setuphold den- clk-LH
      
      // setuphold den- clk-LH
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_NOT_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_NOT_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_NOT_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_NOT_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      posedge clk &&& (ENABLE_d_AND_den_AND_si_AND_sleep_AND_ssb == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-posedge
      $recrem(posedge rb,posedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      negedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      posedge si &&& (ENABLE_d_AND_den_AND_rb_AND_sleep_AND_NOT_ssb == 1'b1),
      0.0,0.0,notifier,,,clk_delay,si_delay);
      
      // setuphold si- clk-LH
      
      // setuphold si- clk-LH
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_NOT_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_den_AND_rb_AND_si_AND_ssb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_NOT_d_AND_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_NOT_den_AND_rb_AND_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      negedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      $setuphold(posedge clk &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      posedge ssb &&& (ENABLE_d_AND_den_AND_rb_AND_NOT_si_AND_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,ssb_delay);
      
      // setuphold ssb- clk-LH
      
      // setuphold ssb- clk-LH
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slanr03ad1d02x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck rb
// 
// 
// always @ (clk or d or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lanr03ad_delay o =  IQ;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lanr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `lanr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G13(MGM_W7,d_delay);
   and MGM_G14(MGM_W8,rb_delay,MGM_W7);
   not MGM_G15(MGM_W9,sleep);
   and MGM_G16(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W9,MGM_W8);
   and MGM_G17(MGM_W10,rb_delay,d_delay);
   not MGM_G18(MGM_W11,sleep);
   and MGM_G19(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W11,MGM_W10);
   not MGM_G20(MGM_W12,sleep);
   and MGM_G21(ENABLE_rb_AND_NOT_sleep,MGM_W12,rb_delay);
   not MGM_G22(ENABLE_NOT_sleep,sleep);
   not MGM_G23(MGM_W13,d_delay);
   and MGM_G24(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W13);
   and MGM_G25(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_sleep == 1'b1),
      negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slanr03ad1d03x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck rb
// 
// 
// always @ (clk or d or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lanr03ad_delay o =  IQ;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lanr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `lanr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G13(MGM_W7,d_delay);
   and MGM_G14(MGM_W8,rb_delay,MGM_W7);
   not MGM_G15(MGM_W9,sleep);
   and MGM_G16(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W9,MGM_W8);
   and MGM_G17(MGM_W10,rb_delay,d_delay);
   not MGM_G18(MGM_W11,sleep);
   and MGM_G19(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W11,MGM_W10);
   not MGM_G20(MGM_W12,sleep);
   and MGM_G21(ENABLE_rb_AND_NOT_sleep,MGM_W12,rb_delay);
   not MGM_G22(ENABLE_NOT_sleep,sleep);
   not MGM_G23(MGM_W13,d_delay);
   and MGM_G24(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W13);
   and MGM_G25(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_sleep == 1'b1),
      negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slanr03ad1d06x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck rb
// 
// 
// always @ (clk or d or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lanr03ad_delay o =  IQ;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lanr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `lanr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G13(MGM_W7,d_delay);
   and MGM_G14(MGM_W8,rb_delay,MGM_W7);
   not MGM_G15(MGM_W9,sleep);
   and MGM_G16(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W9,MGM_W8);
   and MGM_G17(MGM_W10,rb_delay,d_delay);
   not MGM_G18(MGM_W11,sleep);
   and MGM_G19(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W11,MGM_W10);
   not MGM_G20(MGM_W12,sleep);
   and MGM_G21(ENABLE_rb_AND_NOT_sleep,MGM_W12,rb_delay);
   not MGM_G22(ENABLE_NOT_sleep,sleep);
   not MGM_G23(MGM_W13,d_delay);
   and MGM_G24(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W13);
   and MGM_G25(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_sleep == 1'b1),
      negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slanr03ad1d12x5( clk, d, o, rb, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck rb
// 
// 
// always @ (clk or d or rb or sleep)
// begin
// if (!rb&!sleep)
// begin
// IQ <= 1'b0 ;
// end
// else if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lanr03ad_delay o =  IQ;
// 

   input clk, d, rb, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lanr03ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.rb(rb),.sleep(sleep),.notifier(1'b0));
      assign `lanr03ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   wire rb_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lanr03ad_func i0slanr03ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.rb(rb_delay),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G13(MGM_W7,d_delay);
   and MGM_G14(MGM_W8,rb_delay,MGM_W7);
   not MGM_G15(MGM_W9,sleep);
   and MGM_G16(ENABLE_NOT_d_AND_rb_AND_NOT_sleep,MGM_W9,MGM_W8);
   and MGM_G17(MGM_W10,rb_delay,d_delay);
   not MGM_G18(MGM_W11,sleep);
   and MGM_G19(ENABLE_d_AND_rb_AND_NOT_sleep,MGM_W11,MGM_W10);
   not MGM_G20(MGM_W12,sleep);
   and MGM_G21(ENABLE_rb_AND_NOT_sleep,MGM_W12,rb_delay);
   not MGM_G22(ENABLE_NOT_sleep,sleep);
   not MGM_G23(MGM_W13,d_delay);
   and MGM_G24(ENABLE_NOT_d_AND_rb,rb_delay,MGM_W13);
   and MGM_G25(ENABLE_d_AND_rb,rb_delay,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && rb==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && rb==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && sleep==1'b0)
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (negedge rb => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc rb --> o
      (posedge rb => (o +: 1'b1))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b0 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1 && rb==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_rb_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_rb_AND_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // recrem rb-clk-negedge
      $recrem(posedge rb &&& (ENABLE_NOT_sleep == 1'b1),
      negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // recrem rb-clk-negedge
      $recrem(posedge rb,negedge clk,0.0,0.0,notifier,,,rb_delay,clk_delay);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d_AND_rb == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsnr00ad1d02x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck d
// 
// 
// always @ (clk or d or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsnr00ad_delay o =  IQ;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d02x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d02x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G8(MGM_W3,d_delay);
   not MGM_G9(MGM_W4,sleep);
   and MGM_G10(ENABLE_NOT_d_AND_NOT_sleep,MGM_W4,MGM_W3);
   not MGM_G11(MGM_W5,sleep);
   and MGM_G12(ENABLE_d_AND_NOT_sleep,MGM_W5,d_delay);
   not MGM_G13(ENABLE_NOT_sleep,sleep);
   not MGM_G14(ENABLE_NOT_d,d_delay);
   buf MGM_G15(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsnr00ad1d03x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck d
// 
// 
// always @ (clk or d or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsnr00ad_delay o =  IQ;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d03x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d03x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G8(MGM_W3,d_delay);
   not MGM_G9(MGM_W4,sleep);
   and MGM_G10(ENABLE_NOT_d_AND_NOT_sleep,MGM_W4,MGM_W3);
   not MGM_G11(MGM_W5,sleep);
   and MGM_G12(ENABLE_d_AND_NOT_sleep,MGM_W5,d_delay);
   not MGM_G13(ENABLE_NOT_sleep,sleep);
   not MGM_G14(ENABLE_NOT_d,d_delay);
   buf MGM_G15(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsnr00ad1d06x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck d
// 
// 
// always @ (clk or d or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsnr00ad_delay o =  IQ;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d06x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d06x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G8(MGM_W3,d_delay);
   not MGM_G9(MGM_W4,sleep);
   and MGM_G10(ENABLE_NOT_d_AND_NOT_sleep,MGM_W4,MGM_W3);
   not MGM_G11(MGM_W5,sleep);
   and MGM_G12(ENABLE_d_AND_NOT_sleep,MGM_W5,d_delay);
   not MGM_G13(ENABLE_NOT_sleep,sleep);
   not MGM_G14(ENABLE_NOT_d,d_delay);
   buf MGM_G15(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




`celldefine 


module i0slsnr00ad1d12x5( clk, d, o, sleep `ifdef POWER_AWARE_MODE , vcc, vcc_in, vssx `endif );

// 
// retention latch w/ ck d
// 
// 
// always @ (clk or d or sleep)
// begin
// if (clk&!sleep)
// begin
// IQ <= d;
// end
// end
// 
// assign `lsnr00ad_delay o =  IQ;
// 

   input clk, d, sleep;
   output o;
`ifdef POWER_AWARE_MODE
   (* pg_type = "primary_power" *) inout vcc;
   (* pg_type = "backup_power" *) inout vcc_in;
   (* pg_type = "primary_ground" *) inout vssx;
`endif
      wire o_random_init;
      `ifdef random_init_enable
         reg random_init_ctrl_gls;
         reg init_val;
         initial #1 init_val = $dist_uniform(`RINIT_GLS_SEED_PATH.rinit_gls_seed,0,1);
         always @(o_random_init)
         if((o_random_init !== 1'bx)) random_init_ctrl_gls = 1'b0;
         assign o = ((random_init_ctrl_gls === 1'b1) && (o_random_init === 1'bx)) ? init_val : o_random_init;
      `else
         assign o = o_random_init;
      `endif


`ifdef FUNCTIONAL  //  functional //
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d12x5_behav_inst(.clk(clk),.d(d),.o(o_tmp),.sleep(sleep),.notifier(1'b0));
      assign `lsnr00ad_delay o_random_init = o_tmp ;
      
   `endif
   
`else
   wire clk_delay ;
   wire d_delay ;
   reg notifier;
   
   `ifdef POWER_AWARE_MODE
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier),.vcc(vcc),.vcc_in(vcc_in),.vssx(vssx));
   `else
      INTC_lib783_i0s_160h_50pp_dspwm_lsnr00ad_func i0slsnr00ad1d12x5_inst(.clk(clk_delay),.d(d_delay),.o(o_random_init),.sleep(sleep),.notifier(notifier));
   `endif
   
   // spec_gates_begin
   not MGM_G8(MGM_W3,d_delay);
   not MGM_G9(MGM_W4,sleep);
   and MGM_G10(ENABLE_NOT_d_AND_NOT_sleep,MGM_W4,MGM_W3);
   not MGM_G11(MGM_W5,sleep);
   and MGM_G12(ENABLE_d_AND_NOT_sleep,MGM_W5,d_delay);
   not MGM_G13(ENABLE_NOT_sleep,sleep);
   not MGM_G14(ENABLE_NOT_d,d_delay);
   buf MGM_G15(ENABLE_d,d_delay);
   // spec_gates_end
   specify


   // specify_block_begin
      if(d==1'b0 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      ifnone
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(d==1'b1 && sleep==1'b0)
      // seq arc clk --> o
      (posedge clk => (o : d))  = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && sleep==1'b0)
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc negedge d --> o
      (negedge d => (o:d)) = (0.0,0.0);
      
      ifnone
      // comb arc posedge d --> o
      (posedge d => (o:d)) = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b0)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b0))  = (0.0,0.0);
      
      if(clk==1'b1 && d==1'b1)
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      ifnone
      // seq arc sleep --> o
      (negedge sleep => (o +: 1'b1))  = (0.0,0.0);
      
      $width(posedge clk &&& (ENABLE_NOT_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk &&& (ENABLE_d_AND_NOT_sleep == 1'b1)
      ,0.0,0,notifier);
      
      $width(posedge clk,0.0,0,notifier);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      negedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      $setuphold(negedge clk &&& (ENABLE_NOT_sleep == 1'b1),
      posedge d &&& (ENABLE_NOT_sleep == 1'b1),
      0.0,0.0,notifier,,,clk_delay,d_delay);
      
      // setuphold d- clk-HL
      
      // setuphold d- clk-HL
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_NOT_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,
      posedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,
      negedge sleep &&& (ENABLE_d == 1'b1),0.0,0.0, notifier);
      
      // nochange sleep-LH clk-LH
      $nochange(posedge clk,posedge sleep,0.0,0.0, notifier);
      
      // nochange sleep-HL clk-LH
      $nochange(posedge clk,negedge sleep,0.0,0.0, notifier);
      
      
   // specify_block_end 
   endspecify

`endif 


endmodule
`endcelldefine 




