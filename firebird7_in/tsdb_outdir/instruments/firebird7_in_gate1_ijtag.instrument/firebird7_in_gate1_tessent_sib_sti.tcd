//--------------------------------------------------------------------------
//
//  Unpublished work. Copyright 2022 Siemens
//
//  This material contains trade secrets or otherwise confidential 
//  information owned by Siemens Industry Software Inc. or its affiliates 
//  (collectively, SISW), or its licensors. Access to and use of this 
//  information is strictly limited as set forth in the Customer's 
//  applicable agreements with SISW.
//
//--------------------------------------------------------------------------
//  File created by: Tessent Shell
//          Version: 2022.4
//       Created on: Sun Nov  5 08:26:32 PST 2023
//--------------------------------------------------------------------------

Core(firebird7_in_gate1_tessent_sib_sti) {
  Occ {
    version: 4;
    clock_type : tck;
    Interface {
      SlowClock(ltest_clk) {
            persistent_pin: tessent_persistent_cell_cts_stop_buf/clkout;
      }
      ScanEnable(ltest_scan_en) {
            persistent_pin: tessent_persistent_cell_ltest_scan_en_buf/o;
      }
      StaticClockControlMode(ltest_static_clock_control_mode) {
            persistent_pin: tessent_persistent_cell_static_clock_control_mode_buf/o;
      }
      ClockSequence(ltest_clock_sequence[1:0]) {
            persistent_pin(0): tessent_persistent_cell_clock_sequence_buf_0/o;
            persistent_pin(1): tessent_persistent_cell_clock_sequence_buf_1/o;
      }
      ScanInput(ltest_si) {
            persistent_pin: tessent_persistent_cell_ltest_scan_in_buf/o;
      }
      ScanOutput(ltest_so) {
            persistent_pin: tessent_persistent_cell_occ_ctrl_so_buf/o;
      }
      ShiftRegisterClock(tessent_persistent_cell_cts_stop_buf/clkout) {
      }
      GatedClock(tessent_persistent_cell_ltest_clock_mux/clkout) {
      }
    }
    Parameters {
      iproc : setup;
      StaticClockControl {
        parameter     : static_clock_control;
        type          : string;
        default_value : off;
      }
    }
    ControlBits {
      ControlBit(occ_ctrl[0]) {
      }
      ControlBit(occ_ctrl[1]) {
      }
    }
    capture_trigger: shift_en;
    static_clock_control: external;
  }
}
