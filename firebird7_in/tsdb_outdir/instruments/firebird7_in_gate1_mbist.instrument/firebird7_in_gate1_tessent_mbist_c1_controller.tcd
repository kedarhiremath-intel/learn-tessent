/*
----------------------------------------------------------------------------------
-                                                                                -
-  Unpublished work. Copyright 2022 Siemens                                      -
-                                                                                -
-  This material contains trade secrets or otherwise confidential                -
-  information owned by Siemens Industry Software Inc. or its affiliates         -
-  (collectively, SISW), or its licensors. Access to and use of this             -
-  information is strictly limited as set forth in the Customer's                -
-  applicable agreements with SISW.                                              -
-                                                                                -
----------------------------------------------------------------------------------
-  File created by: Tessent Shell                                                -
-          Version: 2022.4                                                       -
<<<<<<< HEAD
-       Created on: Sun Oct 29 23:50:46 PDT 2023                                 -
=======
-       Created on: Sun Oct 29 14:14:43 PDT 2023                                 -
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
----------------------------------------------------------------------------------


*/
   
Core(firebird7_in_gate1_tessent_mbist_c1_controller) {    
    MemoryBistController {
      BIRAInfo(m1) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m1;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m2) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m2;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m3) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m3;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m4) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m4;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m5) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m5;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m6) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m6;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m7) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m7;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m8) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m8;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m9) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m9;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m10) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m10;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m11) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m11;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m12) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m12;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m13) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m13;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m14) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m14;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m15) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m15;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m16) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m16;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m17) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m17;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m18) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m18;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m19) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m19;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m20) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m20;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m21) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m21;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m22) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m22;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m23) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m23;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m24) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m24;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m25) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m25;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m26) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m26;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m27) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m27;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m28) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m28;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m29) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m29;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m30) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m30;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m31) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m31;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m32) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m32;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m33) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m33;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW0_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[7];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW1_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[7];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
            FuseMap(5) {
                Output : All_SCOL0_FUSE_REG[5];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[5];
            }
            FuseMap(6) {
                Output : All_SCOL0_FUSE_REG[6];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[6];
            }
          }
        }
      } 
      BIRAInfo(m34) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m34;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW0_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[7];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW1_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[7];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
            FuseMap(5) {
                Output : All_SCOL0_FUSE_REG[5];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[5];
            }
            FuseMap(6) {
                Output : All_SCOL0_FUSE_REG[6];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[6];
            }
          }
        }
      } 
      BIRAInfo(m35) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m35;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW0_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[7];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW1_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[7];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
            FuseMap(5) {
                Output : All_SCOL0_FUSE_REG[5];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[5];
            }
            FuseMap(6) {
                Output : All_SCOL0_FUSE_REG[6];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[6];
            }
          }
        }
      } 
      BIRAInfo(m36) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m36;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW0_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[7];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
            Fuse(7) {
                Output : ALL_SROW1_FUSE_ADD_REG[7];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[7];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
            FuseMap(5) {
                Output : All_SCOL0_FUSE_REG[5];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[5];
            }
            FuseMap(6) {
                Output : All_SCOL0_FUSE_REG[6];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[6];
            }
          }
        }
      } 
      BIRAInfo(m37) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m37;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m38) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m38;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m39) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m39;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
      BIRAInfo(m40) { 
        BiraLocation : Interface;
        BiraModule: firebird7_in_gate1_tessent_mbist_c1_interface_m40;
        RowSegment(ALL) {
          SpareElement(0) {
            RepairEnable {
                Output : ALL_SROW0_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW0_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW0_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW0_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW0_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW0_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW0_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW0_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW0_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW0_FUSE_ADD_REG[6];
            }
          }
          SpareElement(1) {
            RepairEnable {
                Output : ALL_SROW1_ALLOC_REG;
                Input  : FROM_BISR_ALL_SROW1_ALLOC_REG;
            }
            Fuse(0) {
                Output : ALL_SROW1_FUSE_ADD_REG[0];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[0];
            }
            Fuse(1) {
                Output : ALL_SROW1_FUSE_ADD_REG[1];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[1];
            }
            Fuse(2) {
                Output : ALL_SROW1_FUSE_ADD_REG[2];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[2];
            }
            Fuse(3) {
                Output : ALL_SROW1_FUSE_ADD_REG[3];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[3];
            }
            Fuse(4) {
                Output : ALL_SROW1_FUSE_ADD_REG[4];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[4];
            }
            Fuse(5) {
                Output : ALL_SROW1_FUSE_ADD_REG[5];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[5];
            }
            Fuse(6) {
                Output : ALL_SROW1_FUSE_ADD_REG[6];
                Input  : FROM_BISR_ALL_SROW1_FUSE_ADD_REG[6];
            }
          }
        }
        ColumnSegment(All) {
          SpareElement(0) {
            RepairEnable {
                Output : All_SCOL0_ALLOC_REG;
                Input  : FROM_BISR_All_SCOL0_ALLOC_REG;
            }
            FuseMap(0) {
                Output : All_SCOL0_FUSE_REG[0];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[0];
            }
            FuseMap(1) {
                Output : All_SCOL0_FUSE_REG[1];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[1];
            }
            FuseMap(2) {
                Output : All_SCOL0_FUSE_REG[2];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[2];
            }
            FuseMap(3) {
                Output : All_SCOL0_FUSE_REG[3];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[3];
            }
            FuseMap(4) {
                Output : All_SCOL0_FUSE_REG[4];
                Input  : FROM_BISR_All_SCOL0_FUSE_REG[4];
            }
          }
        }
      } 
     EnableBiraMulticycleOperation : OFF;
        Version         : 58;
        ControllerType  : SoftProgrammable;
        use_multicycle_paths  : ON;
        asynchronous_interface_present : "off";
        NumberOfInstructions    : 8;
        NumberOfDataRegisterBits: 4;
        ConnectionInfo { 
            SerialInterface     : ON;
            MemoryReset         : Off;
            UseAsyncReset       : Off;
            ParallelRetentionTest   : Always;
            CompStatAllowed : Off;
            FailureLimit    : 65536;
            StopOnErrorLimitAutoIncrement    : ON;
            DaisyChain      : ON;
            CompStatIDMuxing    : Never;
        } 
        FreezeTestPortAllowed   : Off;
<<<<<<< HEAD
        controller_flop_count  : 974;
=======
        controller_flop_count  : 887;
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
        interface_flop_count   : 6596;
        RedundancyAnalysis  : On;
        SelfRepair          : On;
        ErrorCollectionAllowed  : Off;
        SOEOptimizeVersion          : 1;
        SOEWithCompStatMuxAllowed   : Off;
        ROMDiagnostic             : Off;
        FunctionalDebugMode       : On;
        enable_resume_diagnosis   : ON;
        PSRTWithFreezeStepAllowed   : On;
        PSRTGroup   : On;
        CompStatConnectionTest  : Off;
        SelectiveParallelMemoryTest : On;
        EnableAddressSegmentX0Y0    : On;
        SoftAlgorithmAddressMinMax  : On;
        SharedAddressRegisters : Off;
        PipelineControllerOutputs : Off;
        StopOnErrorLimitAutoIncrement : On;
      
        AllowCommonAlgorithmForStepRange    : On;
        AllowCommonOperationSetForStepRange : On;
        AllowCommonDataPatternForStepRange  : On;
        ParallelRetentionTest   : ON;
<<<<<<< HEAD
        CounterA                : 28;
=======
        CounterA                : 4;
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
        DelayCounter            : 8;
        EnableAEqualsBCommand   : ON;
        DataPolarityPresent     : 0;
        InvertDataWithAddressBitRange : 0;
        ColumnBits              : 3;
        RowBits                 : 8;
        BankBits                : 0;
        MaxX0Bits               : 1;
        MaxY0Bits               : 1;
        RCBira                  : On;
        RamBist                 : On;
                RedundancyRepair {
            RepairStatus ( 00 )             : NoRepairNeeded;
            RepairStatus ( 01 )             : RepairNeeded;
            RepairStatus ( 11 )             : NotRepairable;
            RepairStatus ( 0 )             : NoRepairNeeded;
            RepairStatus ( 1 )             : NotRepairable;
            PreserveFuseRegistersAllowed    : On;
    MemoryCollar( m1 ) { 
        Status {
            HSDLName   : %BP%_RA_m1_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m1_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m1_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m1_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m1_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m1_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m1_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m2 ) { 
        Status {
            HSDLName   : %BP%_RA_m2_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m2_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m2_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m2_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m2_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m2_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m2_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m3 ) { 
        Status {
            HSDLName   : %BP%_RA_m3_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m3_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m3_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m3_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m3_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m3_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m3_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m4 ) { 
        Status {
            HSDLName   : %BP%_RA_m4_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m4_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m4_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m4_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m4_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m4_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m4_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m5 ) { 
        Status {
            HSDLName   : %BP%_RA_m5_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m5_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m5_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m5_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m5_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m5_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m5_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m6 ) { 
        Status {
            HSDLName   : %BP%_RA_m6_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m6_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m6_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m6_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m6_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m6_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m6_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m7 ) { 
        Status {
            HSDLName   : %BP%_RA_m7_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m7_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m7_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m7_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m7_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m7_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m7_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m8 ) { 
        Status {
            HSDLName   : %BP%_RA_m8_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m8_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m8_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m8_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m8_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m8_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m8_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m9 ) { 
        Status {
            HSDLName   : %BP%_RA_m9_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m9_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m9_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m9_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m9_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m9_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m9_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m10 ) { 
        Status {
            HSDLName   : %BP%_RA_m10_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m10_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m10_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m10_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m10_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m10_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m10_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m11 ) { 
        Status {
            HSDLName   : %BP%_RA_m11_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m11_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m11_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m11_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m11_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m11_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m11_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m12 ) { 
        Status {
            HSDLName   : %BP%_RA_m12_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m12_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m12_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m12_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m12_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m12_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m12_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m13 ) { 
        Status {
            HSDLName   : %BP%_RA_m13_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m13_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m13_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m13_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m13_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m13_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m13_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m14 ) { 
        Status {
            HSDLName   : %BP%_RA_m14_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m14_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m14_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m14_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m14_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m14_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m14_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m15 ) { 
        Status {
            HSDLName   : %BP%_RA_m15_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m15_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m15_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m15_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m15_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m15_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m15_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m16 ) { 
        Status {
            HSDLName   : %BP%_RA_m16_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m16_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m16_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m16_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m16_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m16_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m16_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m17 ) { 
        Status {
            HSDLName   : %BP%_RA_m17_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m17_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m17_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m17_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m17_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m17_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m17_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m18 ) { 
        Status {
            HSDLName   : %BP%_RA_m18_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m18_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m18_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m18_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m18_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m18_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m18_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m19 ) { 
        Status {
            HSDLName   : %BP%_RA_m19_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m19_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m19_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m19_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m19_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m19_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m19_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m20 ) { 
        Status {
            HSDLName   : %BP%_RA_m20_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m20_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m20_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m20_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m20_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m20_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m20_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m21 ) { 
        Status {
            HSDLName   : %BP%_RA_m21_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m21_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m21_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m21_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m21_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m21_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m21_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m22 ) { 
        Status {
            HSDLName   : %BP%_RA_m22_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m22_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m22_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m22_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m22_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m22_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m22_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m23 ) { 
        Status {
            HSDLName   : %BP%_RA_m23_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m23_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m23_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m23_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m23_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m23_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m23_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m24 ) { 
        Status {
            HSDLName   : %BP%_RA_m24_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m24_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m24_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m24_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m24_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m24_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m24_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m25 ) { 
        Status {
            HSDLName   : %BP%_RA_m25_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m25_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m25_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m25_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m25_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m25_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m25_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m26 ) { 
        Status {
            HSDLName   : %BP%_RA_m26_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m26_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m26_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m26_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m26_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m26_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m26_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m27 ) { 
        Status {
            HSDLName   : %BP%_RA_m27_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m27_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m27_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m27_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m27_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m27_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m27_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m28 ) { 
        Status {
            HSDLName   : %BP%_RA_m28_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m28_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m28_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m28_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m28_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m28_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m28_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m29 ) { 
        Status {
            HSDLName   : %BP%_RA_m29_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m29_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m29_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m29_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m29_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m29_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m29_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m30 ) { 
        Status {
            HSDLName   : %BP%_RA_m30_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m30_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m30_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m30_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m30_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m30_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m30_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m31 ) { 
        Status {
            HSDLName   : %BP%_RA_m31_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m31_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m31_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m31_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m31_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m31_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m31_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m32 ) { 
        Status {
            HSDLName   : %BP%_RA_m32_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m32_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m32_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m32_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m32_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m32_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m32_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
              }
          }
      }        
    } 
    
    MemoryCollar( m33 ) { 
        Status {
            HSDLName   : %BP%_RA_m33_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m33_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m33_ALL_SPARE0_FUSE_REG[7:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m33_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m33_ALL_SPARE1_FUSE_REG[7:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m33_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m33_All_SPARE0_FUSE_REG[6:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
            Fuse(7) : ROW, 7;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 7'b0000000;
                  ShiftedIO(1) : 7'b0000001;
                  ShiftedIO(2) : 7'b0000010;
                  ShiftedIO(3) : 7'b0000011;
                  ShiftedIO(4) : 7'b0000100;
                  ShiftedIO(5) : 7'b0000101;
                  ShiftedIO(6) : 7'b0000110;
                  ShiftedIO(7) : 7'b0000111;
                  ShiftedIO(8) : 7'b0001000;
                  ShiftedIO(9) : 7'b0001001;
                  ShiftedIO(10) : 7'b0001010;
                  ShiftedIO(11) : 7'b0001011;
                  ShiftedIO(12) : 7'b0001100;
                  ShiftedIO(13) : 7'b0001101;
                  ShiftedIO(14) : 7'b0001110;
                  ShiftedIO(15) : 7'b0001111;
                  ShiftedIO(16) : 7'b0010000;
                  ShiftedIO(17) : 7'b0010001;
                  ShiftedIO(18) : 7'b0010010;
                  ShiftedIO(19) : 7'b0010011;
                  ShiftedIO(20) : 7'b0010100;
                  ShiftedIO(21) : 7'b0010101;
                  ShiftedIO(22) : 7'b0010110;
                  ShiftedIO(23) : 7'b0010111;
                  ShiftedIO(24) : 7'b0011000;
                  ShiftedIO(25) : 7'b0011001;
                  ShiftedIO(26) : 7'b0011010;
                  ShiftedIO(27) : 7'b0011011;
                  ShiftedIO(28) : 7'b0011100;
                  ShiftedIO(29) : 7'b0011101;
                  ShiftedIO(30) : 7'b0011110;
                  ShiftedIO(31) : 7'b0011111;
                  ShiftedIO(32) : 7'b0100000;
                  ShiftedIO(33) : 7'b0100001;
                  ShiftedIO(34) : 7'b0100010;
                  ShiftedIO(35) : 7'b0100011;
                  ShiftedIO(36) : 7'b0100100;
                  ShiftedIO(37) : 7'b0100101;
                  ShiftedIO(38) : 7'b0100110;
                  ShiftedIO(39) : 7'b0100111;
                  ShiftedIO(40) : 7'b0101000;
                  ShiftedIO(41) : 7'b0101001;
                  ShiftedIO(42) : 7'b0101010;
                  ShiftedIO(43) : 7'b0101011;
                  ShiftedIO(44) : 7'b0101100;
                  ShiftedIO(45) : 7'b0101101;
                  ShiftedIO(46) : 7'b0101110;
                  ShiftedIO(47) : 7'b0101111;
                  ShiftedIO(48) : 7'b0110000;
                  ShiftedIO(49) : 7'b0110001;
                  ShiftedIO(50) : 7'b0110010;
                  ShiftedIO(51) : 7'b0110011;
                  ShiftedIO(52) : 7'b0110100;
                  ShiftedIO(53) : 7'b0110101;
                  ShiftedIO(54) : 7'b0110110;
                  ShiftedIO(55) : 7'b0110111;
                  ShiftedIO(56) : 7'b0111000;
                  ShiftedIO(57) : 7'b0111001;
                  ShiftedIO(58) : 7'b0111010;
                  ShiftedIO(59) : 7'b0111011;
                  ShiftedIO(60) : 7'b0111100;
                  ShiftedIO(61) : 7'b0111101;
                  ShiftedIO(62) : 7'b0111110;
                  ShiftedIO(63) : 7'b0111111;
                  ShiftedIO(64) : 7'b1000000;
                  ShiftedIO(65) : 7'b1000001;
                  ShiftedIO(66) : 7'b1000010;
                  ShiftedIO(67) : 7'b1000011;
                  ShiftedIO(68) : 7'b1000100;
                  ShiftedIO(69) : 7'b1000101;
                  ShiftedIO(70) : 7'b1000110;
                  ShiftedIO(71) : 7'b1000111;
              }
          }
      }        
    } 
    
    MemoryCollar( m34 ) { 
        Status {
            HSDLName   : %BP%_RA_m34_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m34_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m34_ALL_SPARE0_FUSE_REG[7:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m34_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m34_ALL_SPARE1_FUSE_REG[7:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m34_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m34_All_SPARE0_FUSE_REG[6:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
            Fuse(7) : ROW, 7;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 7'b0000000;
                  ShiftedIO(1) : 7'b0000001;
                  ShiftedIO(2) : 7'b0000010;
                  ShiftedIO(3) : 7'b0000011;
                  ShiftedIO(4) : 7'b0000100;
                  ShiftedIO(5) : 7'b0000101;
                  ShiftedIO(6) : 7'b0000110;
                  ShiftedIO(7) : 7'b0000111;
                  ShiftedIO(8) : 7'b0001000;
                  ShiftedIO(9) : 7'b0001001;
                  ShiftedIO(10) : 7'b0001010;
                  ShiftedIO(11) : 7'b0001011;
                  ShiftedIO(12) : 7'b0001100;
                  ShiftedIO(13) : 7'b0001101;
                  ShiftedIO(14) : 7'b0001110;
                  ShiftedIO(15) : 7'b0001111;
                  ShiftedIO(16) : 7'b0010000;
                  ShiftedIO(17) : 7'b0010001;
                  ShiftedIO(18) : 7'b0010010;
                  ShiftedIO(19) : 7'b0010011;
                  ShiftedIO(20) : 7'b0010100;
                  ShiftedIO(21) : 7'b0010101;
                  ShiftedIO(22) : 7'b0010110;
                  ShiftedIO(23) : 7'b0010111;
                  ShiftedIO(24) : 7'b0011000;
                  ShiftedIO(25) : 7'b0011001;
                  ShiftedIO(26) : 7'b0011010;
                  ShiftedIO(27) : 7'b0011011;
                  ShiftedIO(28) : 7'b0011100;
                  ShiftedIO(29) : 7'b0011101;
                  ShiftedIO(30) : 7'b0011110;
                  ShiftedIO(31) : 7'b0011111;
                  ShiftedIO(32) : 7'b0100000;
                  ShiftedIO(33) : 7'b0100001;
                  ShiftedIO(34) : 7'b0100010;
                  ShiftedIO(35) : 7'b0100011;
                  ShiftedIO(36) : 7'b0100100;
                  ShiftedIO(37) : 7'b0100101;
                  ShiftedIO(38) : 7'b0100110;
                  ShiftedIO(39) : 7'b0100111;
                  ShiftedIO(40) : 7'b0101000;
                  ShiftedIO(41) : 7'b0101001;
                  ShiftedIO(42) : 7'b0101010;
                  ShiftedIO(43) : 7'b0101011;
                  ShiftedIO(44) : 7'b0101100;
                  ShiftedIO(45) : 7'b0101101;
                  ShiftedIO(46) : 7'b0101110;
                  ShiftedIO(47) : 7'b0101111;
                  ShiftedIO(48) : 7'b0110000;
                  ShiftedIO(49) : 7'b0110001;
                  ShiftedIO(50) : 7'b0110010;
                  ShiftedIO(51) : 7'b0110011;
                  ShiftedIO(52) : 7'b0110100;
                  ShiftedIO(53) : 7'b0110101;
                  ShiftedIO(54) : 7'b0110110;
                  ShiftedIO(55) : 7'b0110111;
                  ShiftedIO(56) : 7'b0111000;
                  ShiftedIO(57) : 7'b0111001;
                  ShiftedIO(58) : 7'b0111010;
                  ShiftedIO(59) : 7'b0111011;
                  ShiftedIO(60) : 7'b0111100;
                  ShiftedIO(61) : 7'b0111101;
                  ShiftedIO(62) : 7'b0111110;
                  ShiftedIO(63) : 7'b0111111;
                  ShiftedIO(64) : 7'b1000000;
                  ShiftedIO(65) : 7'b1000001;
                  ShiftedIO(66) : 7'b1000010;
                  ShiftedIO(67) : 7'b1000011;
                  ShiftedIO(68) : 7'b1000100;
                  ShiftedIO(69) : 7'b1000101;
                  ShiftedIO(70) : 7'b1000110;
                  ShiftedIO(71) : 7'b1000111;
              }
          }
      }        
    } 
    
    MemoryCollar( m35 ) { 
        Status {
            HSDLName   : %BP%_RA_m35_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m35_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m35_ALL_SPARE0_FUSE_REG[7:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m35_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m35_ALL_SPARE1_FUSE_REG[7:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m35_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m35_All_SPARE0_FUSE_REG[6:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
            Fuse(7) : ROW, 7;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 7'b0000000;
                  ShiftedIO(1) : 7'b0000001;
                  ShiftedIO(2) : 7'b0000010;
                  ShiftedIO(3) : 7'b0000011;
                  ShiftedIO(4) : 7'b0000100;
                  ShiftedIO(5) : 7'b0000101;
                  ShiftedIO(6) : 7'b0000110;
                  ShiftedIO(7) : 7'b0000111;
                  ShiftedIO(8) : 7'b0001000;
                  ShiftedIO(9) : 7'b0001001;
                  ShiftedIO(10) : 7'b0001010;
                  ShiftedIO(11) : 7'b0001011;
                  ShiftedIO(12) : 7'b0001100;
                  ShiftedIO(13) : 7'b0001101;
                  ShiftedIO(14) : 7'b0001110;
                  ShiftedIO(15) : 7'b0001111;
                  ShiftedIO(16) : 7'b0010000;
                  ShiftedIO(17) : 7'b0010001;
                  ShiftedIO(18) : 7'b0010010;
                  ShiftedIO(19) : 7'b0010011;
                  ShiftedIO(20) : 7'b0010100;
                  ShiftedIO(21) : 7'b0010101;
                  ShiftedIO(22) : 7'b0010110;
                  ShiftedIO(23) : 7'b0010111;
                  ShiftedIO(24) : 7'b0011000;
                  ShiftedIO(25) : 7'b0011001;
                  ShiftedIO(26) : 7'b0011010;
                  ShiftedIO(27) : 7'b0011011;
                  ShiftedIO(28) : 7'b0011100;
                  ShiftedIO(29) : 7'b0011101;
                  ShiftedIO(30) : 7'b0011110;
                  ShiftedIO(31) : 7'b0011111;
                  ShiftedIO(32) : 7'b0100000;
                  ShiftedIO(33) : 7'b0100001;
                  ShiftedIO(34) : 7'b0100010;
                  ShiftedIO(35) : 7'b0100011;
                  ShiftedIO(36) : 7'b0100100;
                  ShiftedIO(37) : 7'b0100101;
                  ShiftedIO(38) : 7'b0100110;
                  ShiftedIO(39) : 7'b0100111;
                  ShiftedIO(40) : 7'b0101000;
                  ShiftedIO(41) : 7'b0101001;
                  ShiftedIO(42) : 7'b0101010;
                  ShiftedIO(43) : 7'b0101011;
                  ShiftedIO(44) : 7'b0101100;
                  ShiftedIO(45) : 7'b0101101;
                  ShiftedIO(46) : 7'b0101110;
                  ShiftedIO(47) : 7'b0101111;
                  ShiftedIO(48) : 7'b0110000;
                  ShiftedIO(49) : 7'b0110001;
                  ShiftedIO(50) : 7'b0110010;
                  ShiftedIO(51) : 7'b0110011;
                  ShiftedIO(52) : 7'b0110100;
                  ShiftedIO(53) : 7'b0110101;
                  ShiftedIO(54) : 7'b0110110;
                  ShiftedIO(55) : 7'b0110111;
                  ShiftedIO(56) : 7'b0111000;
                  ShiftedIO(57) : 7'b0111001;
                  ShiftedIO(58) : 7'b0111010;
                  ShiftedIO(59) : 7'b0111011;
                  ShiftedIO(60) : 7'b0111100;
                  ShiftedIO(61) : 7'b0111101;
                  ShiftedIO(62) : 7'b0111110;
                  ShiftedIO(63) : 7'b0111111;
                  ShiftedIO(64) : 7'b1000000;
                  ShiftedIO(65) : 7'b1000001;
                  ShiftedIO(66) : 7'b1000010;
                  ShiftedIO(67) : 7'b1000011;
                  ShiftedIO(68) : 7'b1000100;
                  ShiftedIO(69) : 7'b1000101;
                  ShiftedIO(70) : 7'b1000110;
                  ShiftedIO(71) : 7'b1000111;
              }
          }
      }        
    } 
    
    MemoryCollar( m36 ) { 
        Status {
            HSDLName   : %BP%_RA_m36_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m36_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m36_ALL_SPARE0_FUSE_REG[7:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m36_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m36_ALL_SPARE1_FUSE_REG[7:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m36_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m36_All_SPARE0_FUSE_REG[6:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
            Fuse(7) : ROW, 7;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 7'b0000000;
                  ShiftedIO(1) : 7'b0000001;
                  ShiftedIO(2) : 7'b0000010;
                  ShiftedIO(3) : 7'b0000011;
                  ShiftedIO(4) : 7'b0000100;
                  ShiftedIO(5) : 7'b0000101;
                  ShiftedIO(6) : 7'b0000110;
                  ShiftedIO(7) : 7'b0000111;
                  ShiftedIO(8) : 7'b0001000;
                  ShiftedIO(9) : 7'b0001001;
                  ShiftedIO(10) : 7'b0001010;
                  ShiftedIO(11) : 7'b0001011;
                  ShiftedIO(12) : 7'b0001100;
                  ShiftedIO(13) : 7'b0001101;
                  ShiftedIO(14) : 7'b0001110;
                  ShiftedIO(15) : 7'b0001111;
                  ShiftedIO(16) : 7'b0010000;
                  ShiftedIO(17) : 7'b0010001;
                  ShiftedIO(18) : 7'b0010010;
                  ShiftedIO(19) : 7'b0010011;
                  ShiftedIO(20) : 7'b0010100;
                  ShiftedIO(21) : 7'b0010101;
                  ShiftedIO(22) : 7'b0010110;
                  ShiftedIO(23) : 7'b0010111;
                  ShiftedIO(24) : 7'b0011000;
                  ShiftedIO(25) : 7'b0011001;
                  ShiftedIO(26) : 7'b0011010;
                  ShiftedIO(27) : 7'b0011011;
                  ShiftedIO(28) : 7'b0011100;
                  ShiftedIO(29) : 7'b0011101;
                  ShiftedIO(30) : 7'b0011110;
                  ShiftedIO(31) : 7'b0011111;
                  ShiftedIO(32) : 7'b0100000;
                  ShiftedIO(33) : 7'b0100001;
                  ShiftedIO(34) : 7'b0100010;
                  ShiftedIO(35) : 7'b0100011;
                  ShiftedIO(36) : 7'b0100100;
                  ShiftedIO(37) : 7'b0100101;
                  ShiftedIO(38) : 7'b0100110;
                  ShiftedIO(39) : 7'b0100111;
                  ShiftedIO(40) : 7'b0101000;
                  ShiftedIO(41) : 7'b0101001;
                  ShiftedIO(42) : 7'b0101010;
                  ShiftedIO(43) : 7'b0101011;
                  ShiftedIO(44) : 7'b0101100;
                  ShiftedIO(45) : 7'b0101101;
                  ShiftedIO(46) : 7'b0101110;
                  ShiftedIO(47) : 7'b0101111;
                  ShiftedIO(48) : 7'b0110000;
                  ShiftedIO(49) : 7'b0110001;
                  ShiftedIO(50) : 7'b0110010;
                  ShiftedIO(51) : 7'b0110011;
                  ShiftedIO(52) : 7'b0110100;
                  ShiftedIO(53) : 7'b0110101;
                  ShiftedIO(54) : 7'b0110110;
                  ShiftedIO(55) : 7'b0110111;
                  ShiftedIO(56) : 7'b0111000;
                  ShiftedIO(57) : 7'b0111001;
                  ShiftedIO(58) : 7'b0111010;
                  ShiftedIO(59) : 7'b0111011;
                  ShiftedIO(60) : 7'b0111100;
                  ShiftedIO(61) : 7'b0111101;
                  ShiftedIO(62) : 7'b0111110;
                  ShiftedIO(63) : 7'b0111111;
                  ShiftedIO(64) : 7'b1000000;
                  ShiftedIO(65) : 7'b1000001;
                  ShiftedIO(66) : 7'b1000010;
                  ShiftedIO(67) : 7'b1000011;
                  ShiftedIO(68) : 7'b1000100;
                  ShiftedIO(69) : 7'b1000101;
                  ShiftedIO(70) : 7'b1000110;
                  ShiftedIO(71) : 7'b1000111;
              }
          }
      }        
    } 
    
    MemoryCollar( m37 ) { 
        Status {
            HSDLName   : %BP%_RA_m37_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m37_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m37_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m37_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m37_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m37_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m37_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
                  ShiftedIO(22) : 5'b10110;
                  ShiftedIO(23) : 5'b10111;
                  ShiftedIO(24) : 5'b11000;
                  ShiftedIO(25) : 5'b11001;
                  ShiftedIO(26) : 5'b11010;
                  ShiftedIO(27) : 5'b11011;
                  ShiftedIO(28) : 5'b11100;
                  ShiftedIO(29) : 5'b11101;
                  ShiftedIO(30) : 5'b11110;
                  ShiftedIO(31) : 5'b11111;
              }
          }
      }        
    } 
    
    MemoryCollar( m38 ) { 
        Status {
            HSDLName   : %BP%_RA_m38_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m38_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m38_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m38_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m38_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m38_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m38_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
                  ShiftedIO(22) : 5'b10110;
                  ShiftedIO(23) : 5'b10111;
                  ShiftedIO(24) : 5'b11000;
                  ShiftedIO(25) : 5'b11001;
                  ShiftedIO(26) : 5'b11010;
                  ShiftedIO(27) : 5'b11011;
                  ShiftedIO(28) : 5'b11100;
                  ShiftedIO(29) : 5'b11101;
                  ShiftedIO(30) : 5'b11110;
                  ShiftedIO(31) : 5'b11111;
              }
          }
      }        
    } 
    
    MemoryCollar( m39 ) { 
        Status {
            HSDLName   : %BP%_RA_m39_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m39_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m39_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m39_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m39_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m39_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m39_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
                  ShiftedIO(22) : 5'b10110;
                  ShiftedIO(23) : 5'b10111;
                  ShiftedIO(24) : 5'b11000;
                  ShiftedIO(25) : 5'b11001;
                  ShiftedIO(26) : 5'b11010;
                  ShiftedIO(27) : 5'b11011;
                  ShiftedIO(28) : 5'b11100;
                  ShiftedIO(29) : 5'b11101;
                  ShiftedIO(30) : 5'b11110;
                  ShiftedIO(31) : 5'b11111;
              }
          }
      }        
    } 
    
    MemoryCollar( m40 ) { 
        Status {
            HSDLName   : %BP%_RA_m40_STATUS_REG[1:0];
        }
        RepairType     : RowColumn;
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m40_ALL_SPARE0_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m40_ALL_SPARE0_FUSE_REG[6:0];
          }
          Fuse ( Row ) {
              SegmentName :ALL;
              HSDLName ( Allocation ) :%BP%_RA_m40_ALL_SPARE1_ALLOC_REG;
              HSDLName ( Address ) :%BP%_RA_m40_ALL_SPARE1_FUSE_REG[6:0];
          }
          Fuse ( Column ) {
              SegmentName :All;
              HSDLName ( Allocation ) :%BP%_RA_m40_All_SPARE0_ALLOC_REG;
              HSDLName ( IO ) :%BP%_RA_m40_All_SPARE0_FUSE_REG[4:0];
          }
    Segment ( Row, ALL ) {
        NumberOfSpareElements : 2;
        FuseSet {
            Fuse(0) : ROW, 0;
            Fuse(1) : ROW, 1;
            Fuse(2) : ROW, 2;
            Fuse(3) : ROW, 3;
            Fuse(4) : ROW, 4;
            Fuse(5) : ROW, 5;
            Fuse(6) : ROW, 6;
        }
    }        
      Segment ( Column, All ) {
          NumberOfSpareElements : 1;
                                  
          FuseSet {
              FuseMap {
                  ShiftedIO(0) : 5'b00000;
                  ShiftedIO(1) : 5'b00001;
                  ShiftedIO(2) : 5'b00010;
                  ShiftedIO(3) : 5'b00011;
                  ShiftedIO(4) : 5'b00100;
                  ShiftedIO(5) : 5'b00101;
                  ShiftedIO(6) : 5'b00110;
                  ShiftedIO(7) : 5'b00111;
                  ShiftedIO(8) : 5'b01000;
                  ShiftedIO(9) : 5'b01001;
                  ShiftedIO(10) : 5'b01010;
                  ShiftedIO(11) : 5'b01011;
                  ShiftedIO(12) : 5'b01100;
                  ShiftedIO(13) : 5'b01101;
                  ShiftedIO(14) : 5'b01110;
                  ShiftedIO(15) : 5'b01111;
                  ShiftedIO(16) : 5'b10000;
                  ShiftedIO(17) : 5'b10001;
                  ShiftedIO(18) : 5'b10010;
                  ShiftedIO(19) : 5'b10011;
                  ShiftedIO(20) : 5'b10100;
                  ShiftedIO(21) : 5'b10101;
                  ShiftedIO(22) : 5'b10110;
                  ShiftedIO(23) : 5'b10111;
                  ShiftedIO(24) : 5'b11000;
                  ShiftedIO(25) : 5'b11001;
                  ShiftedIO(26) : 5'b11010;
                  ShiftedIO(27) : 5'b11011;
                  ShiftedIO(28) : 5'b11100;
                  ShiftedIO(29) : 5'b11101;
                  ShiftedIO(30) : 5'b11110;
                  ShiftedIO(31) : 5'b11111;
              }
          }
      }        
    } 
    
        }
        HSDLNames {
            InstructionPointer  : %BP%_INST_POINTER_REG[4:0];
            RepeatLoopACounter  : %BP%_REPEATLOOP_A_CNTR_REG[1:0];
            RepeatLoopBCounter  : %BP%_REPEATLOOP_B_CNTR_REG[1:0];
            OperationCycleCounter : %BP%_JCNT[2:0];
<<<<<<< HEAD
            AlgorithmSelect     : %BP%_ALGO_SEL_REG[6:0];
            CounterA            : %BP%_COUNTERA_CNT[27:0];
=======
            AlgorithmSelect     : %BP%_ALGO_SEL_REG[0:0];
            CounterA            : %BP%_COUNTERA_CNT[3:0];
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
            DelayCounter        : %BP%_DELAYCOUNTER_CNT[7:0];
            ErrorCounter        : %BP%_STOP_ERROR_CNT_REG[15:0];
        }
        AddressRegister ( A ) {
                HSDLName(Row,7,0)   : %BP%_A_ADD_REG_X[7:0];
                HSDLName(Column,2,0) : %BP%_A_ADD_REG_Y[2:0];
        } 
        AddressRegister ( B ) {
                HSDLName(Row,7,0)   : %BP%_B_ADD_REG_X[7:0];
                HSDLName(Column,2,0) : %BP%_B_ADD_REG_Y[2:0];
        } 
        StepCounter ( 0 ) { 
            MemoryContentValue  : 4'b0000;
            DefaultAlgorithm    : INTELLVPMOVIFASTX;
            DefaultOperationSet : SYNCCUSTOM;
            DefaultRunTime(All) : 28720; 
            DefaultRunTime(All_Approximated) : 25661.0;
            DefaultRunTime(StartToPause) : 25661.0;
            DefaultRunTime(PauseToPause) : 25661.0;
            DefaultRunTime(PauseToEnd) : 25661.0;
            DefaultRunTime(StartToPauseReducedAddressCount) : 25661.0;
            DefaultRunTime(PauseToPauseReducedAddressCount) : 25661.0;
            DefaultRunTime(PauseToEndReducedAddressCount) : 25661.0;
            DefaultRunTime(ReducedAddressCount) : 14384; 
            DefaultRunTime(ReducedAddressCount_Approximated) : 305.375;
            DefaultRunTime(MemoryReset) : 25661.0;
            NumPorts    : 1;
            SameAddressRange  : Off;
            Latency     : 0;
            Address(Row) {
                AddressBits     : 8;
                DefaultMin      : 0;
                DefaultMax      : 255;
            }
            Address(Column) {
                AddressBits     : 3;
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            MemoryCollar        : M1;
            MemoryCollar        : M2;
            MemoryCollar        : M3;
            MemoryCollar        : M4;
            MemoryCollar        : M5;
            MemoryCollar        : M6;
            MemoryCollar        : M7;
            MemoryCollar        : M8;
            MemoryCollar        : M9;
            MemoryCollar        : M10;
            MemoryCollar        : M11;
            MemoryCollar        : M12;
            MemoryCollar        : M13;
            MemoryCollar        : M14;
            MemoryCollar        : M15;
            MemoryCollar        : M16;
            MemoryCollar        : M17;
            MemoryCollar        : M18;
            MemoryCollar        : M19;
            MemoryCollar        : M20;
            MemoryCollar        : M21;
            MemoryCollar        : M22;
            MemoryCollar        : M23;
            MemoryCollar        : M24;
            MemoryCollar        : M25;
            MemoryCollar        : M26;
            MemoryCollar        : M27;
            MemoryCollar        : M28;
            MemoryCollar        : M29;
            MemoryCollar        : M30;
            MemoryCollar        : M31;
            MemoryCollar        : M32;
            MemoryCollar        : M33;
            MemoryCollar        : M34;
            MemoryCollar        : M35;
            MemoryCollar        : M36;
            MemoryCollar        : M37;
            MemoryCollar        : M38;
            MemoryCollar        : M39;
            MemoryCollar        : M40;
        } 
        MemoryCollar ( m1 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 0;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m2 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 1;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m3 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 2;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m4 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 3;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m5 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 4;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m6 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 5;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m7 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 6;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m8 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 7;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m9 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 8;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m10 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 9;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m11 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 10;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m12 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 11;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m13 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 12;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m14 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 13;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m15 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 14;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m16 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 15;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m17 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 16;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m18 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 17;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m19 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 18;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m20 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 19;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m21 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 20;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m22 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 21;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m23 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 22;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m24 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 23;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m25 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 24;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m26 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 25;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m27 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 26;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m28 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 27;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m29 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 28;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m30 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 29;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m31 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 30;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m32 ) { 
            MemoryModuleName    : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 31;
            MemoryTemplate        : ip783hdspsr1024x22m8b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00279;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 7;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                        ColumnAddress[2] : (c(2));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[9];
                        RowAddress[5]    : adr[8];
                        RowAddress[4]    : adr[7];
                        RowAddress[3]    : adr[6];
                        RowAddress[2]    : adr[5];
                        RowAddress[1]    : adr[4];
                        RowAddress[0]    : adr[3];
                        ColumnAddress[2] : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m33 ) { 
            MemoryModuleName    : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 32;
            MemoryTemplate        : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.007;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 255;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Comparator ( 33 ) {
                    HSDLName    : GO_ID_REG[32];
                    BitCounter(0,0) : 32,32;
                }
                Comparator ( 34 ) {
                    HSDLName    : GO_ID_REG[33];
                    BitCounter(0,0) : 33,33;
                }
                Comparator ( 35 ) {
                    HSDLName    : GO_ID_REG[34];
                    BitCounter(0,0) : 34,34;
                }
                Comparator ( 36 ) {
                    HSDLName    : GO_ID_REG[35];
                    BitCounter(0,0) : 35,35;
                }
                Comparator ( 37 ) {
                    HSDLName    : GO_ID_REG[36];
                    BitCounter(0,0) : 36,36;
                }
                Comparator ( 38 ) {
                    HSDLName    : GO_ID_REG[37];
                    BitCounter(0,0) : 37,37;
                }
                Comparator ( 39 ) {
                    HSDLName    : GO_ID_REG[38];
                    BitCounter(0,0) : 38,38;
                }
                Comparator ( 40 ) {
                    HSDLName    : GO_ID_REG[39];
                    BitCounter(0,0) : 39,39;
                }
                Comparator ( 41 ) {
                    HSDLName    : GO_ID_REG[40];
                    BitCounter(0,0) : 40,40;
                }
                Comparator ( 42 ) {
                    HSDLName    : GO_ID_REG[41];
                    BitCounter(0,0) : 41,41;
                }
                Comparator ( 43 ) {
                    HSDLName    : GO_ID_REG[42];
                    BitCounter(0,0) : 42,42;
                }
                Comparator ( 44 ) {
                    HSDLName    : GO_ID_REG[43];
                    BitCounter(0,0) : 43,43;
                }
                Comparator ( 45 ) {
                    HSDLName    : GO_ID_REG[44];
                    BitCounter(0,0) : 44,44;
                }
                Comparator ( 46 ) {
                    HSDLName    : GO_ID_REG[45];
                    BitCounter(0,0) : 45,45;
                }
                Comparator ( 47 ) {
                    HSDLName    : GO_ID_REG[46];
                    BitCounter(0,0) : 46,46;
                }
                Comparator ( 48 ) {
                    HSDLName    : GO_ID_REG[47];
                    BitCounter(0,0) : 47,47;
                }
                Comparator ( 49 ) {
                    HSDLName    : GO_ID_REG[48];
                    BitCounter(0,0) : 48,48;
                }
                Comparator ( 50 ) {
                    HSDLName    : GO_ID_REG[49];
                    BitCounter(0,0) : 49,49;
                }
                Comparator ( 51 ) {
                    HSDLName    : GO_ID_REG[50];
                    BitCounter(0,0) : 50,50;
                }
                Comparator ( 52 ) {
                    HSDLName    : GO_ID_REG[51];
                    BitCounter(0,0) : 51,51;
                }
                Comparator ( 53 ) {
                    HSDLName    : GO_ID_REG[52];
                    BitCounter(0,0) : 52,52;
                }
                Comparator ( 54 ) {
                    HSDLName    : GO_ID_REG[53];
                    BitCounter(0,0) : 53,53;
                }
                Comparator ( 55 ) {
                    HSDLName    : GO_ID_REG[54];
                    BitCounter(0,0) : 54,54;
                }
                Comparator ( 56 ) {
                    HSDLName    : GO_ID_REG[55];
                    BitCounter(0,0) : 55,55;
                }
                Comparator ( 57 ) {
                    HSDLName    : GO_ID_REG[56];
                    BitCounter(0,0) : 56,56;
                }
                Comparator ( 58 ) {
                    HSDLName    : GO_ID_REG[57];
                    BitCounter(0,0) : 57,57;
                }
                Comparator ( 59 ) {
                    HSDLName    : GO_ID_REG[58];
                    BitCounter(0,0) : 58,58;
                }
                Comparator ( 60 ) {
                    HSDLName    : GO_ID_REG[59];
                    BitCounter(0,0) : 59,59;
                }
                Comparator ( 61 ) {
                    HSDLName    : GO_ID_REG[60];
                    BitCounter(0,0) : 60,60;
                }
                Comparator ( 62 ) {
                    HSDLName    : GO_ID_REG[61];
                    BitCounter(0,0) : 61,61;
                }
                Comparator ( 63 ) {
                    HSDLName    : GO_ID_REG[62];
                    BitCounter(0,0) : 62,62;
                }
                Comparator ( 64 ) {
                    HSDLName    : GO_ID_REG[63];
                    BitCounter(0,0) : 63,63;
                }
                Comparator ( 65 ) {
                    HSDLName    : GO_ID_REG[64];
                    BitCounter(0,0) : 64,64;
                }
                Comparator ( 66 ) {
                    HSDLName    : GO_ID_REG[65];
                    BitCounter(0,0) : 65,65;
                }
                Comparator ( 67 ) {
                    HSDLName    : GO_ID_REG[66];
                    BitCounter(0,0) : 66,66;
                }
                Comparator ( 68 ) {
                    HSDLName    : GO_ID_REG[67];
                    BitCounter(0,0) : 67,67;
                }
                Comparator ( 69 ) {
                    HSDLName    : GO_ID_REG[68];
                    BitCounter(0,0) : 68,68;
                }
                Comparator ( 70 ) {
                    HSDLName    : GO_ID_REG[69];
                    BitCounter(0,0) : 69,69;
                }
                Comparator ( 71 ) {
                    HSDLName    : GO_ID_REG[70];
                    BitCounter(0,0) : 70,70;
                }
                Comparator ( 72 ) {
                    HSDLName    : GO_ID_REG[71];
                    BitCounter(0,0) : 71,71;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[71]  : (d(71));
                        q[70]  : (d(70));
                        q[69]  : (d(69));
                        q[68]  : (d(68));
                        q[67]  : (d(67));
                        q[66]  : (d(66));
                        q[65]  : (d(65));
                        q[64]  : (d(64));
                        q[63]  : (d(63));
                        q[62]  : (d(62));
                        q[61]  : (d(61));
                        q[60]  : (d(60));
                        q[59]  : (d(59));
                        q[58]  : (d(58));
                        q[57]  : (d(57));
                        q[56]  : (d(56));
                        q[55]  : (d(55));
                        q[54]  : (d(54));
                        q[53]  : (d(53));
                        q[52]  : (d(52));
                        q[51]  : (d(51));
                        q[50]  : (d(50));
                        q[49]  : (d(49));
                        q[48]  : (d(48));
                        q[47]  : (d(47));
                        q[46]  : (d(46));
                        q[45]  : (d(45));
                        q[44]  : (d(44));
                        q[43]  : (d(43));
                        q[42]  : (d(42));
                        q[41]  : (d(41));
                        q[40]  : (d(40));
                        q[39]  : (d(39));
                        q[38]  : (d(38));
                        q[37]  : (d(37));
                        q[36]  : (d(36));
                        q[35]  : (d(35));
                        q[34]  : (d(34));
                        q[33]  : (d(33));
                        q[32]  : (d(32));
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[71]  : (d(71));
                        din[70]  : (d(70));
                        din[69]  : (d(69));
                        din[68]  : (d(68));
                        din[67]  : (d(67));
                        din[66]  : (d(66));
                        din[65]  : (d(65));
                        din[64]  : (d(64));
                        din[63]  : (d(63));
                        din[62]  : (d(62));
                        din[61]  : (d(61));
                        din[60]  : (d(60));
                        din[59]  : (d(59));
                        din[58]  : (d(58));
                        din[57]  : (d(57));
                        din[56]  : (d(56));
                        din[55]  : (d(55));
                        din[54]  : (d(54));
                        din[53]  : (d(53));
                        din[52]  : (d(52));
                        din[51]  : (d(51));
                        din[50]  : (d(50));
                        din[49]  : (d(49));
                        din[48]  : (d(48));
                        din[47]  : (d(47));
                        din[46]  : (d(46));
                        din[45]  : (d(45));
                        din[44]  : (d(44));
                        din[43]  : (d(43));
                        din[42]  : (d(42));
                        din[41]  : (d(41));
                        din[40]  : (d(40));
                        din[39]  : (d(39));
                        din[38]  : (d(38));
                        din[37]  : (d(37));
                        din[36]  : (d(36));
                        din[35]  : (d(35));
                        din[34]  : (d(34));
                        din[33]  : (d(33));
                        din[32]  : (d(32));
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m34 ) { 
            MemoryModuleName    : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 33;
            MemoryTemplate        : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.007;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 255;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Comparator ( 33 ) {
                    HSDLName    : GO_ID_REG[32];
                    BitCounter(0,0) : 32,32;
                }
                Comparator ( 34 ) {
                    HSDLName    : GO_ID_REG[33];
                    BitCounter(0,0) : 33,33;
                }
                Comparator ( 35 ) {
                    HSDLName    : GO_ID_REG[34];
                    BitCounter(0,0) : 34,34;
                }
                Comparator ( 36 ) {
                    HSDLName    : GO_ID_REG[35];
                    BitCounter(0,0) : 35,35;
                }
                Comparator ( 37 ) {
                    HSDLName    : GO_ID_REG[36];
                    BitCounter(0,0) : 36,36;
                }
                Comparator ( 38 ) {
                    HSDLName    : GO_ID_REG[37];
                    BitCounter(0,0) : 37,37;
                }
                Comparator ( 39 ) {
                    HSDLName    : GO_ID_REG[38];
                    BitCounter(0,0) : 38,38;
                }
                Comparator ( 40 ) {
                    HSDLName    : GO_ID_REG[39];
                    BitCounter(0,0) : 39,39;
                }
                Comparator ( 41 ) {
                    HSDLName    : GO_ID_REG[40];
                    BitCounter(0,0) : 40,40;
                }
                Comparator ( 42 ) {
                    HSDLName    : GO_ID_REG[41];
                    BitCounter(0,0) : 41,41;
                }
                Comparator ( 43 ) {
                    HSDLName    : GO_ID_REG[42];
                    BitCounter(0,0) : 42,42;
                }
                Comparator ( 44 ) {
                    HSDLName    : GO_ID_REG[43];
                    BitCounter(0,0) : 43,43;
                }
                Comparator ( 45 ) {
                    HSDLName    : GO_ID_REG[44];
                    BitCounter(0,0) : 44,44;
                }
                Comparator ( 46 ) {
                    HSDLName    : GO_ID_REG[45];
                    BitCounter(0,0) : 45,45;
                }
                Comparator ( 47 ) {
                    HSDLName    : GO_ID_REG[46];
                    BitCounter(0,0) : 46,46;
                }
                Comparator ( 48 ) {
                    HSDLName    : GO_ID_REG[47];
                    BitCounter(0,0) : 47,47;
                }
                Comparator ( 49 ) {
                    HSDLName    : GO_ID_REG[48];
                    BitCounter(0,0) : 48,48;
                }
                Comparator ( 50 ) {
                    HSDLName    : GO_ID_REG[49];
                    BitCounter(0,0) : 49,49;
                }
                Comparator ( 51 ) {
                    HSDLName    : GO_ID_REG[50];
                    BitCounter(0,0) : 50,50;
                }
                Comparator ( 52 ) {
                    HSDLName    : GO_ID_REG[51];
                    BitCounter(0,0) : 51,51;
                }
                Comparator ( 53 ) {
                    HSDLName    : GO_ID_REG[52];
                    BitCounter(0,0) : 52,52;
                }
                Comparator ( 54 ) {
                    HSDLName    : GO_ID_REG[53];
                    BitCounter(0,0) : 53,53;
                }
                Comparator ( 55 ) {
                    HSDLName    : GO_ID_REG[54];
                    BitCounter(0,0) : 54,54;
                }
                Comparator ( 56 ) {
                    HSDLName    : GO_ID_REG[55];
                    BitCounter(0,0) : 55,55;
                }
                Comparator ( 57 ) {
                    HSDLName    : GO_ID_REG[56];
                    BitCounter(0,0) : 56,56;
                }
                Comparator ( 58 ) {
                    HSDLName    : GO_ID_REG[57];
                    BitCounter(0,0) : 57,57;
                }
                Comparator ( 59 ) {
                    HSDLName    : GO_ID_REG[58];
                    BitCounter(0,0) : 58,58;
                }
                Comparator ( 60 ) {
                    HSDLName    : GO_ID_REG[59];
                    BitCounter(0,0) : 59,59;
                }
                Comparator ( 61 ) {
                    HSDLName    : GO_ID_REG[60];
                    BitCounter(0,0) : 60,60;
                }
                Comparator ( 62 ) {
                    HSDLName    : GO_ID_REG[61];
                    BitCounter(0,0) : 61,61;
                }
                Comparator ( 63 ) {
                    HSDLName    : GO_ID_REG[62];
                    BitCounter(0,0) : 62,62;
                }
                Comparator ( 64 ) {
                    HSDLName    : GO_ID_REG[63];
                    BitCounter(0,0) : 63,63;
                }
                Comparator ( 65 ) {
                    HSDLName    : GO_ID_REG[64];
                    BitCounter(0,0) : 64,64;
                }
                Comparator ( 66 ) {
                    HSDLName    : GO_ID_REG[65];
                    BitCounter(0,0) : 65,65;
                }
                Comparator ( 67 ) {
                    HSDLName    : GO_ID_REG[66];
                    BitCounter(0,0) : 66,66;
                }
                Comparator ( 68 ) {
                    HSDLName    : GO_ID_REG[67];
                    BitCounter(0,0) : 67,67;
                }
                Comparator ( 69 ) {
                    HSDLName    : GO_ID_REG[68];
                    BitCounter(0,0) : 68,68;
                }
                Comparator ( 70 ) {
                    HSDLName    : GO_ID_REG[69];
                    BitCounter(0,0) : 69,69;
                }
                Comparator ( 71 ) {
                    HSDLName    : GO_ID_REG[70];
                    BitCounter(0,0) : 70,70;
                }
                Comparator ( 72 ) {
                    HSDLName    : GO_ID_REG[71];
                    BitCounter(0,0) : 71,71;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[71]  : (d(71));
                        q[70]  : (d(70));
                        q[69]  : (d(69));
                        q[68]  : (d(68));
                        q[67]  : (d(67));
                        q[66]  : (d(66));
                        q[65]  : (d(65));
                        q[64]  : (d(64));
                        q[63]  : (d(63));
                        q[62]  : (d(62));
                        q[61]  : (d(61));
                        q[60]  : (d(60));
                        q[59]  : (d(59));
                        q[58]  : (d(58));
                        q[57]  : (d(57));
                        q[56]  : (d(56));
                        q[55]  : (d(55));
                        q[54]  : (d(54));
                        q[53]  : (d(53));
                        q[52]  : (d(52));
                        q[51]  : (d(51));
                        q[50]  : (d(50));
                        q[49]  : (d(49));
                        q[48]  : (d(48));
                        q[47]  : (d(47));
                        q[46]  : (d(46));
                        q[45]  : (d(45));
                        q[44]  : (d(44));
                        q[43]  : (d(43));
                        q[42]  : (d(42));
                        q[41]  : (d(41));
                        q[40]  : (d(40));
                        q[39]  : (d(39));
                        q[38]  : (d(38));
                        q[37]  : (d(37));
                        q[36]  : (d(36));
                        q[35]  : (d(35));
                        q[34]  : (d(34));
                        q[33]  : (d(33));
                        q[32]  : (d(32));
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[71]  : (d(71));
                        din[70]  : (d(70));
                        din[69]  : (d(69));
                        din[68]  : (d(68));
                        din[67]  : (d(67));
                        din[66]  : (d(66));
                        din[65]  : (d(65));
                        din[64]  : (d(64));
                        din[63]  : (d(63));
                        din[62]  : (d(62));
                        din[61]  : (d(61));
                        din[60]  : (d(60));
                        din[59]  : (d(59));
                        din[58]  : (d(58));
                        din[57]  : (d(57));
                        din[56]  : (d(56));
                        din[55]  : (d(55));
                        din[54]  : (d(54));
                        din[53]  : (d(53));
                        din[52]  : (d(52));
                        din[51]  : (d(51));
                        din[50]  : (d(50));
                        din[49]  : (d(49));
                        din[48]  : (d(48));
                        din[47]  : (d(47));
                        din[46]  : (d(46));
                        din[45]  : (d(45));
                        din[44]  : (d(44));
                        din[43]  : (d(43));
                        din[42]  : (d(42));
                        din[41]  : (d(41));
                        din[40]  : (d(40));
                        din[39]  : (d(39));
                        din[38]  : (d(38));
                        din[37]  : (d(37));
                        din[36]  : (d(36));
                        din[35]  : (d(35));
                        din[34]  : (d(34));
                        din[33]  : (d(33));
                        din[32]  : (d(32));
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m35 ) { 
            MemoryModuleName    : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 34;
            MemoryTemplate        : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.007;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 255;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Comparator ( 33 ) {
                    HSDLName    : GO_ID_REG[32];
                    BitCounter(0,0) : 32,32;
                }
                Comparator ( 34 ) {
                    HSDLName    : GO_ID_REG[33];
                    BitCounter(0,0) : 33,33;
                }
                Comparator ( 35 ) {
                    HSDLName    : GO_ID_REG[34];
                    BitCounter(0,0) : 34,34;
                }
                Comparator ( 36 ) {
                    HSDLName    : GO_ID_REG[35];
                    BitCounter(0,0) : 35,35;
                }
                Comparator ( 37 ) {
                    HSDLName    : GO_ID_REG[36];
                    BitCounter(0,0) : 36,36;
                }
                Comparator ( 38 ) {
                    HSDLName    : GO_ID_REG[37];
                    BitCounter(0,0) : 37,37;
                }
                Comparator ( 39 ) {
                    HSDLName    : GO_ID_REG[38];
                    BitCounter(0,0) : 38,38;
                }
                Comparator ( 40 ) {
                    HSDLName    : GO_ID_REG[39];
                    BitCounter(0,0) : 39,39;
                }
                Comparator ( 41 ) {
                    HSDLName    : GO_ID_REG[40];
                    BitCounter(0,0) : 40,40;
                }
                Comparator ( 42 ) {
                    HSDLName    : GO_ID_REG[41];
                    BitCounter(0,0) : 41,41;
                }
                Comparator ( 43 ) {
                    HSDLName    : GO_ID_REG[42];
                    BitCounter(0,0) : 42,42;
                }
                Comparator ( 44 ) {
                    HSDLName    : GO_ID_REG[43];
                    BitCounter(0,0) : 43,43;
                }
                Comparator ( 45 ) {
                    HSDLName    : GO_ID_REG[44];
                    BitCounter(0,0) : 44,44;
                }
                Comparator ( 46 ) {
                    HSDLName    : GO_ID_REG[45];
                    BitCounter(0,0) : 45,45;
                }
                Comparator ( 47 ) {
                    HSDLName    : GO_ID_REG[46];
                    BitCounter(0,0) : 46,46;
                }
                Comparator ( 48 ) {
                    HSDLName    : GO_ID_REG[47];
                    BitCounter(0,0) : 47,47;
                }
                Comparator ( 49 ) {
                    HSDLName    : GO_ID_REG[48];
                    BitCounter(0,0) : 48,48;
                }
                Comparator ( 50 ) {
                    HSDLName    : GO_ID_REG[49];
                    BitCounter(0,0) : 49,49;
                }
                Comparator ( 51 ) {
                    HSDLName    : GO_ID_REG[50];
                    BitCounter(0,0) : 50,50;
                }
                Comparator ( 52 ) {
                    HSDLName    : GO_ID_REG[51];
                    BitCounter(0,0) : 51,51;
                }
                Comparator ( 53 ) {
                    HSDLName    : GO_ID_REG[52];
                    BitCounter(0,0) : 52,52;
                }
                Comparator ( 54 ) {
                    HSDLName    : GO_ID_REG[53];
                    BitCounter(0,0) : 53,53;
                }
                Comparator ( 55 ) {
                    HSDLName    : GO_ID_REG[54];
                    BitCounter(0,0) : 54,54;
                }
                Comparator ( 56 ) {
                    HSDLName    : GO_ID_REG[55];
                    BitCounter(0,0) : 55,55;
                }
                Comparator ( 57 ) {
                    HSDLName    : GO_ID_REG[56];
                    BitCounter(0,0) : 56,56;
                }
                Comparator ( 58 ) {
                    HSDLName    : GO_ID_REG[57];
                    BitCounter(0,0) : 57,57;
                }
                Comparator ( 59 ) {
                    HSDLName    : GO_ID_REG[58];
                    BitCounter(0,0) : 58,58;
                }
                Comparator ( 60 ) {
                    HSDLName    : GO_ID_REG[59];
                    BitCounter(0,0) : 59,59;
                }
                Comparator ( 61 ) {
                    HSDLName    : GO_ID_REG[60];
                    BitCounter(0,0) : 60,60;
                }
                Comparator ( 62 ) {
                    HSDLName    : GO_ID_REG[61];
                    BitCounter(0,0) : 61,61;
                }
                Comparator ( 63 ) {
                    HSDLName    : GO_ID_REG[62];
                    BitCounter(0,0) : 62,62;
                }
                Comparator ( 64 ) {
                    HSDLName    : GO_ID_REG[63];
                    BitCounter(0,0) : 63,63;
                }
                Comparator ( 65 ) {
                    HSDLName    : GO_ID_REG[64];
                    BitCounter(0,0) : 64,64;
                }
                Comparator ( 66 ) {
                    HSDLName    : GO_ID_REG[65];
                    BitCounter(0,0) : 65,65;
                }
                Comparator ( 67 ) {
                    HSDLName    : GO_ID_REG[66];
                    BitCounter(0,0) : 66,66;
                }
                Comparator ( 68 ) {
                    HSDLName    : GO_ID_REG[67];
                    BitCounter(0,0) : 67,67;
                }
                Comparator ( 69 ) {
                    HSDLName    : GO_ID_REG[68];
                    BitCounter(0,0) : 68,68;
                }
                Comparator ( 70 ) {
                    HSDLName    : GO_ID_REG[69];
                    BitCounter(0,0) : 69,69;
                }
                Comparator ( 71 ) {
                    HSDLName    : GO_ID_REG[70];
                    BitCounter(0,0) : 70,70;
                }
                Comparator ( 72 ) {
                    HSDLName    : GO_ID_REG[71];
                    BitCounter(0,0) : 71,71;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[71]  : (d(71));
                        q[70]  : (d(70));
                        q[69]  : (d(69));
                        q[68]  : (d(68));
                        q[67]  : (d(67));
                        q[66]  : (d(66));
                        q[65]  : (d(65));
                        q[64]  : (d(64));
                        q[63]  : (d(63));
                        q[62]  : (d(62));
                        q[61]  : (d(61));
                        q[60]  : (d(60));
                        q[59]  : (d(59));
                        q[58]  : (d(58));
                        q[57]  : (d(57));
                        q[56]  : (d(56));
                        q[55]  : (d(55));
                        q[54]  : (d(54));
                        q[53]  : (d(53));
                        q[52]  : (d(52));
                        q[51]  : (d(51));
                        q[50]  : (d(50));
                        q[49]  : (d(49));
                        q[48]  : (d(48));
                        q[47]  : (d(47));
                        q[46]  : (d(46));
                        q[45]  : (d(45));
                        q[44]  : (d(44));
                        q[43]  : (d(43));
                        q[42]  : (d(42));
                        q[41]  : (d(41));
                        q[40]  : (d(40));
                        q[39]  : (d(39));
                        q[38]  : (d(38));
                        q[37]  : (d(37));
                        q[36]  : (d(36));
                        q[35]  : (d(35));
                        q[34]  : (d(34));
                        q[33]  : (d(33));
                        q[32]  : (d(32));
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[71]  : (d(71));
                        din[70]  : (d(70));
                        din[69]  : (d(69));
                        din[68]  : (d(68));
                        din[67]  : (d(67));
                        din[66]  : (d(66));
                        din[65]  : (d(65));
                        din[64]  : (d(64));
                        din[63]  : (d(63));
                        din[62]  : (d(62));
                        din[61]  : (d(61));
                        din[60]  : (d(60));
                        din[59]  : (d(59));
                        din[58]  : (d(58));
                        din[57]  : (d(57));
                        din[56]  : (d(56));
                        din[55]  : (d(55));
                        din[54]  : (d(54));
                        din[53]  : (d(53));
                        din[52]  : (d(52));
                        din[51]  : (d(51));
                        din[50]  : (d(50));
                        din[49]  : (d(49));
                        din[48]  : (d(48));
                        din[47]  : (d(47));
                        din[46]  : (d(46));
                        din[45]  : (d(45));
                        din[44]  : (d(44));
                        din[43]  : (d(43));
                        din[42]  : (d(42));
                        din[41]  : (d(41));
                        din[40]  : (d(40));
                        din[39]  : (d(39));
                        din[38]  : (d(38));
                        din[37]  : (d(37));
                        din[36]  : (d(36));
                        din[35]  : (d(35));
                        din[34]  : (d(34));
                        din[33]  : (d(33));
                        din[32]  : (d(32));
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m36 ) { 
            MemoryModuleName    : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 35;
            MemoryTemplate        : ip783hdspsr1024x72m2b2s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.007;
            number_of_words       : 1024;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 255;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Comparator ( 33 ) {
                    HSDLName    : GO_ID_REG[32];
                    BitCounter(0,0) : 32,32;
                }
                Comparator ( 34 ) {
                    HSDLName    : GO_ID_REG[33];
                    BitCounter(0,0) : 33,33;
                }
                Comparator ( 35 ) {
                    HSDLName    : GO_ID_REG[34];
                    BitCounter(0,0) : 34,34;
                }
                Comparator ( 36 ) {
                    HSDLName    : GO_ID_REG[35];
                    BitCounter(0,0) : 35,35;
                }
                Comparator ( 37 ) {
                    HSDLName    : GO_ID_REG[36];
                    BitCounter(0,0) : 36,36;
                }
                Comparator ( 38 ) {
                    HSDLName    : GO_ID_REG[37];
                    BitCounter(0,0) : 37,37;
                }
                Comparator ( 39 ) {
                    HSDLName    : GO_ID_REG[38];
                    BitCounter(0,0) : 38,38;
                }
                Comparator ( 40 ) {
                    HSDLName    : GO_ID_REG[39];
                    BitCounter(0,0) : 39,39;
                }
                Comparator ( 41 ) {
                    HSDLName    : GO_ID_REG[40];
                    BitCounter(0,0) : 40,40;
                }
                Comparator ( 42 ) {
                    HSDLName    : GO_ID_REG[41];
                    BitCounter(0,0) : 41,41;
                }
                Comparator ( 43 ) {
                    HSDLName    : GO_ID_REG[42];
                    BitCounter(0,0) : 42,42;
                }
                Comparator ( 44 ) {
                    HSDLName    : GO_ID_REG[43];
                    BitCounter(0,0) : 43,43;
                }
                Comparator ( 45 ) {
                    HSDLName    : GO_ID_REG[44];
                    BitCounter(0,0) : 44,44;
                }
                Comparator ( 46 ) {
                    HSDLName    : GO_ID_REG[45];
                    BitCounter(0,0) : 45,45;
                }
                Comparator ( 47 ) {
                    HSDLName    : GO_ID_REG[46];
                    BitCounter(0,0) : 46,46;
                }
                Comparator ( 48 ) {
                    HSDLName    : GO_ID_REG[47];
                    BitCounter(0,0) : 47,47;
                }
                Comparator ( 49 ) {
                    HSDLName    : GO_ID_REG[48];
                    BitCounter(0,0) : 48,48;
                }
                Comparator ( 50 ) {
                    HSDLName    : GO_ID_REG[49];
                    BitCounter(0,0) : 49,49;
                }
                Comparator ( 51 ) {
                    HSDLName    : GO_ID_REG[50];
                    BitCounter(0,0) : 50,50;
                }
                Comparator ( 52 ) {
                    HSDLName    : GO_ID_REG[51];
                    BitCounter(0,0) : 51,51;
                }
                Comparator ( 53 ) {
                    HSDLName    : GO_ID_REG[52];
                    BitCounter(0,0) : 52,52;
                }
                Comparator ( 54 ) {
                    HSDLName    : GO_ID_REG[53];
                    BitCounter(0,0) : 53,53;
                }
                Comparator ( 55 ) {
                    HSDLName    : GO_ID_REG[54];
                    BitCounter(0,0) : 54,54;
                }
                Comparator ( 56 ) {
                    HSDLName    : GO_ID_REG[55];
                    BitCounter(0,0) : 55,55;
                }
                Comparator ( 57 ) {
                    HSDLName    : GO_ID_REG[56];
                    BitCounter(0,0) : 56,56;
                }
                Comparator ( 58 ) {
                    HSDLName    : GO_ID_REG[57];
                    BitCounter(0,0) : 57,57;
                }
                Comparator ( 59 ) {
                    HSDLName    : GO_ID_REG[58];
                    BitCounter(0,0) : 58,58;
                }
                Comparator ( 60 ) {
                    HSDLName    : GO_ID_REG[59];
                    BitCounter(0,0) : 59,59;
                }
                Comparator ( 61 ) {
                    HSDLName    : GO_ID_REG[60];
                    BitCounter(0,0) : 60,60;
                }
                Comparator ( 62 ) {
                    HSDLName    : GO_ID_REG[61];
                    BitCounter(0,0) : 61,61;
                }
                Comparator ( 63 ) {
                    HSDLName    : GO_ID_REG[62];
                    BitCounter(0,0) : 62,62;
                }
                Comparator ( 64 ) {
                    HSDLName    : GO_ID_REG[63];
                    BitCounter(0,0) : 63,63;
                }
                Comparator ( 65 ) {
                    HSDLName    : GO_ID_REG[64];
                    BitCounter(0,0) : 64,64;
                }
                Comparator ( 66 ) {
                    HSDLName    : GO_ID_REG[65];
                    BitCounter(0,0) : 65,65;
                }
                Comparator ( 67 ) {
                    HSDLName    : GO_ID_REG[66];
                    BitCounter(0,0) : 66,66;
                }
                Comparator ( 68 ) {
                    HSDLName    : GO_ID_REG[67];
                    BitCounter(0,0) : 67,67;
                }
                Comparator ( 69 ) {
                    HSDLName    : GO_ID_REG[68];
                    BitCounter(0,0) : 68,68;
                }
                Comparator ( 70 ) {
                    HSDLName    : GO_ID_REG[69];
                    BitCounter(0,0) : 69,69;
                }
                Comparator ( 71 ) {
                    HSDLName    : GO_ID_REG[70];
                    BitCounter(0,0) : 70,70;
                }
                Comparator ( 72 ) {
                    HSDLName    : GO_ID_REG[71];
                    BitCounter(0,0) : 71,71;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[71]  : (d(71));
                        q[70]  : (d(70));
                        q[69]  : (d(69));
                        q[68]  : (d(68));
                        q[67]  : (d(67));
                        q[66]  : (d(66));
                        q[65]  : (d(65));
                        q[64]  : (d(64));
                        q[63]  : (d(63));
                        q[62]  : (d(62));
                        q[61]  : (d(61));
                        q[60]  : (d(60));
                        q[59]  : (d(59));
                        q[58]  : (d(58));
                        q[57]  : (d(57));
                        q[56]  : (d(56));
                        q[55]  : (d(55));
                        q[54]  : (d(54));
                        q[53]  : (d(53));
                        q[52]  : (d(52));
                        q[51]  : (d(51));
                        q[50]  : (d(50));
                        q[49]  : (d(49));
                        q[48]  : (d(48));
                        q[47]  : (d(47));
                        q[46]  : (d(46));
                        q[45]  : (d(45));
                        q[44]  : (d(44));
                        q[43]  : (d(43));
                        q[42]  : (d(42));
                        q[41]  : (d(41));
                        q[40]  : (d(40));
                        q[39]  : (d(39));
                        q[38]  : (d(38));
                        q[37]  : (d(37));
                        q[36]  : (d(36));
                        q[35]  : (d(35));
                        q[34]  : (d(34));
                        q[33]  : (d(33));
                        q[32]  : (d(32));
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[71]  : (d(71));
                        din[70]  : (d(70));
                        din[69]  : (d(69));
                        din[68]  : (d(68));
                        din[67]  : (d(67));
                        din[66]  : (d(66));
                        din[65]  : (d(65));
                        din[64]  : (d(64));
                        din[63]  : (d(63));
                        din[62]  : (d(62));
                        din[61]  : (d(61));
                        din[60]  : (d(60));
                        din[59]  : (d(59));
                        din[58]  : (d(58));
                        din[57]  : (d(57));
                        din[56]  : (d(56));
                        din[55]  : (d(55));
                        din[54]  : (d(54));
                        din[53]  : (d(53));
                        din[52]  : (d(52));
                        din[51]  : (d(51));
                        din[50]  : (d(50));
                        din[49]  : (d(49));
                        din[48]  : (d(48));
                        din[47]  : (d(47));
                        din[46]  : (d(46));
                        din[45]  : (d(45));
                        din[44]  : (d(44));
                        din[43]  : (d(43));
                        din[42]  : (d(42));
                        din[41]  : (d(41));
                        din[40]  : (d(40));
                        din[39]  : (d(39));
                        din[38]  : (d(38));
                        din[37]  : (d(37));
                        din[36]  : (d(36));
                        din[35]  : (d(35));
                        din[34]  : (d(34));
                        din[33]  : (d(33));
                        din[32]  : (d(32));
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        RowAddress[7]    : (r(7));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[7]    : adr[9];
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m37 ) { 
            MemoryModuleName    : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 36;
            MemoryTemplate        : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00244;
            number_of_words       : 512;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m38 ) { 
            MemoryModuleName    : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 37;
            MemoryTemplate        : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00244;
            number_of_words       : 512;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m39 ) { 
            MemoryModuleName    : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 38;
            MemoryTemplate        : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00244;
            number_of_words       : 512;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        MemoryCollar ( m40 ) { 
            MemoryModuleName    : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            MemoryIDIndex         : 39;
            MemoryTemplate        : ip783hdspsr512x32m4b1s0c1r2p3d0a2_mem_wrapper;
            LogicalPorts          : 1RW;
            NumPorts              : 1;
            milliwatts_per_mhz    : 0.00244;
            number_of_words       : 512;
            BitGrouping         : 1;
            PipelineDepth       : 0;
            NumberOfBistDataPipelineStages : 0;
            Latency             : 2;
            Address(Row) {
                DefaultMin      : 0;
                DefaultMax      : 127;
            }
            Address(Column) {
                DefaultMin      : 0;
                DefaultMax      : 3;
            }
            PortCounter ( 0 ) {
                Comparator ( 1 ) {
                    HSDLName    : GO_ID_REG[0];
                    BitCounter(0,0) : 0,0;
                }
                Comparator ( 2 ) {
                    HSDLName    : GO_ID_REG[1];
                    BitCounter(0,0) : 1,1;
                }
                Comparator ( 3 ) {
                    HSDLName    : GO_ID_REG[2];
                    BitCounter(0,0) : 2,2;
                }
                Comparator ( 4 ) {
                    HSDLName    : GO_ID_REG[3];
                    BitCounter(0,0) : 3,3;
                }
                Comparator ( 5 ) {
                    HSDLName    : GO_ID_REG[4];
                    BitCounter(0,0) : 4,4;
                }
                Comparator ( 6 ) {
                    HSDLName    : GO_ID_REG[5];
                    BitCounter(0,0) : 5,5;
                }
                Comparator ( 7 ) {
                    HSDLName    : GO_ID_REG[6];
                    BitCounter(0,0) : 6,6;
                }
                Comparator ( 8 ) {
                    HSDLName    : GO_ID_REG[7];
                    BitCounter(0,0) : 7,7;
                }
                Comparator ( 9 ) {
                    HSDLName    : GO_ID_REG[8];
                    BitCounter(0,0) : 8,8;
                }
                Comparator ( 10 ) {
                    HSDLName    : GO_ID_REG[9];
                    BitCounter(0,0) : 9,9;
                }
                Comparator ( 11 ) {
                    HSDLName    : GO_ID_REG[10];
                    BitCounter(0,0) : 10,10;
                }
                Comparator ( 12 ) {
                    HSDLName    : GO_ID_REG[11];
                    BitCounter(0,0) : 11,11;
                }
                Comparator ( 13 ) {
                    HSDLName    : GO_ID_REG[12];
                    BitCounter(0,0) : 12,12;
                }
                Comparator ( 14 ) {
                    HSDLName    : GO_ID_REG[13];
                    BitCounter(0,0) : 13,13;
                }
                Comparator ( 15 ) {
                    HSDLName    : GO_ID_REG[14];
                    BitCounter(0,0) : 14,14;
                }
                Comparator ( 16 ) {
                    HSDLName    : GO_ID_REG[15];
                    BitCounter(0,0) : 15,15;
                }
                Comparator ( 17 ) {
                    HSDLName    : GO_ID_REG[16];
                    BitCounter(0,0) : 16,16;
                }
                Comparator ( 18 ) {
                    HSDLName    : GO_ID_REG[17];
                    BitCounter(0,0) : 17,17;
                }
                Comparator ( 19 ) {
                    HSDLName    : GO_ID_REG[18];
                    BitCounter(0,0) : 18,18;
                }
                Comparator ( 20 ) {
                    HSDLName    : GO_ID_REG[19];
                    BitCounter(0,0) : 19,19;
                }
                Comparator ( 21 ) {
                    HSDLName    : GO_ID_REG[20];
                    BitCounter(0,0) : 20,20;
                }
                Comparator ( 22 ) {
                    HSDLName    : GO_ID_REG[21];
                    BitCounter(0,0) : 21,21;
                }
                Comparator ( 23 ) {
                    HSDLName    : GO_ID_REG[22];
                    BitCounter(0,0) : 22,22;
                }
                Comparator ( 24 ) {
                    HSDLName    : GO_ID_REG[23];
                    BitCounter(0,0) : 23,23;
                }
                Comparator ( 25 ) {
                    HSDLName    : GO_ID_REG[24];
                    BitCounter(0,0) : 24,24;
                }
                Comparator ( 26 ) {
                    HSDLName    : GO_ID_REG[25];
                    BitCounter(0,0) : 25,25;
                }
                Comparator ( 27 ) {
                    HSDLName    : GO_ID_REG[26];
                    BitCounter(0,0) : 26,26;
                }
                Comparator ( 28 ) {
                    HSDLName    : GO_ID_REG[27];
                    BitCounter(0,0) : 27,27;
                }
                Comparator ( 29 ) {
                    HSDLName    : GO_ID_REG[28];
                    BitCounter(0,0) : 28,28;
                }
                Comparator ( 30 ) {
                    HSDLName    : GO_ID_REG[29];
                    BitCounter(0,0) : 29,29;
                }
                Comparator ( 31 ) {
                    HSDLName    : GO_ID_REG[30];
                    BitCounter(0,0) : 30,30;
                }
                Comparator ( 32 ) {
                    HSDLName    : GO_ID_REG[31];
                    BitCounter(0,0) : 31,31;
                }
                Port(Read) {
                    Map(Data) {
                      Equations {
                        q[31]  : (d(31));
                        q[30]  : (d(30));
                        q[29]  : (d(29));
                        q[28]  : (d(28));
                        q[27]  : (d(27));
                        q[26]  : (d(26));
                        q[25]  : (d(25));
                        q[24]  : (d(24));
                        q[23]  : (d(23));
                        q[22]  : (d(22));
                        q[21]  : (d(21));
                        q[20]  : (d(20));
                        q[19]  : (d(19));
                        q[18]  : (d(18));
                        q[17]  : (d(17));
                        q[16]  : (d(16));
                        q[15]  : (d(15));
                        q[14]  : (d(14));
                        q[13]  : (d(13));
                        q[12]  : (d(12));
                        q[11]  : (d(11));
                        q[10]  : (d(10));
                        q[9]  : (d(9));
                        q[8]  : (d(8));
                        q[7]  : (d(7));
                        q[6]  : (d(6));
                        q[5]  : (d(5));
                        q[4]  : (d(4));
                        q[3]  : (d(3));
                        q[2]  : (d(2));
                        q[1]  : (d(1));
                        q[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
                Port(Write) {
                    Map(Data) {
                      Equations {
                        din[31]  : (d(31));
                        din[30]  : (d(30));
                        din[29]  : (d(29));
                        din[28]  : (d(28));
                        din[27]  : (d(27));
                        din[26]  : (d(26));
                        din[25]  : (d(25));
                        din[24]  : (d(24));
                        din[23]  : (d(23));
                        din[22]  : (d(22));
                        din[21]  : (d(21));
                        din[20]  : (d(20));
                        din[19]  : (d(19));
                        din[18]  : (d(18));
                        din[17]  : (d(17));
                        din[16]  : (d(16));
                        din[15]  : (d(15));
                        din[14]  : (d(14));
                        din[13]  : (d(13));
                        din[12]  : (d(12));
                        din[11]  : (d(11));
                        din[10]  : (d(10));
                        din[9]  : (d(9));
                        din[8]  : (d(8));
                        din[7]  : (d(7));
                        din[6]  : (d(6));
                        din[5]  : (d(5));
                        din[4]  : (d(4));
                        din[3]  : (d(3));
                        din[2]  : (d(2));
                        din[1]  : (d(1));
                        din[0]  : (d(0));
                      } 
                    } 
                    Map(ComplexAddress) {
                      Equations {
                        RowAddress[0]    : (r(0));
                        RowAddress[1]    : (r(1));
                        RowAddress[2]    : (r(2));
                        RowAddress[3]    : (r(3));
                        RowAddress[4]    : (r(4));
                        RowAddress[5]    : (r(5));
                        RowAddress[6]    : (r(6));
                        ColumnAddress[0] : (c(0));
                        ColumnAddress[1] : (c(1));
                      }
                    }
                    Map(AddressPort) {
                      Equations {
                        RowAddress[6]    : adr[8];
                        RowAddress[5]    : adr[7];
                        RowAddress[4]    : adr[6];
                        RowAddress[3]    : adr[5];
                        RowAddress[2]    : adr[4];
                        RowAddress[1]    : adr[3];
                        RowAddress[0]    : adr[2];
                        ColumnAddress[1] : adr[1];
                        ColumnAddress[0] : adr[0];
                      } 
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVPMOVIFASTX ) { 
<<<<<<< HEAD
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : MAXROW;
                        LoadColumnAddress   : MAXCOLUMN;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVPMARCHCEXT ) { 
=======
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : MAXROW;
                        LoadColumnAddress   : MAXCOLUMN;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2_R1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M2_R1_W0;
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M3_R1_W0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3_R1_W0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
<<<<<<< HEAD
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
=======
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M4_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M4_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
<<<<<<< HEAD
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M5_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M5_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVFAILINJFX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODEFX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000001;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODEROWFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000001;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMROWADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODEROWONLYFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000001;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMROWADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_ARRAYS_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_ARRAYS_REPEAT_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS_REPEAT_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYIFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYWRITEFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVGALCOLUMNFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXROW;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( MOVE_TARGET_WRITE_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_ROW_AND_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW_AND_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READADDR1READADDR2INV;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVGALWRRECCOLFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXROW;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CHANGE_TARGET_CELL_ADVANCE_ROW ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : CHANGE_TARGET_CELL_ADVANCE_ROW;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_READ_WRITE_TARGET ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1A_READ_WRITE_TARGET;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_READ_BASE_WRITE_TARGET ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1B_READ_BASE_WRITE_TARGET;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READADDR1WRITEADDR2;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1E_READ_TARGET_READ_BASE ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1A_READ_WRITE_TARGET;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READADDR1READADDR2;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( MOVE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : CHANGE_TARGET_CELL_ADVANCE_ROW;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : M0_WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVHAMMER10FASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 3;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_W1_W1;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_R0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHCMINUSFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M5_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M5_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHGFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_R1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1B_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2A_R1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2B_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3A_R1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3B_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3B_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3C_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M4A_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M4A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M4B_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M4A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M5A_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M5A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M5A_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHRAWFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_R0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1B_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_W1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1A_R0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M5_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M5_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHSLFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R1_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_W0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_R0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMATSPDWONEFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMATSPDWTHREEFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00110011001100110011001100110011;
                    LoadExpectData          : 32'b00110011001100110011001100110011;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMATSPDWTWOFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b10101010101010101010101010101010;
                    LoadExpectData          : 32'b10101010101010101010101010101010;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMATSPPFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVSCANFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVSEGSELFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00001000000010010000101000001011;
                    LoadExpectData          : 32'b00001000000010010000101000001011;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0_SEL_ALL_SEG_ON ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0_SEL_ALL_SEG_ON;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEALLSEGON;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M0_W0_SEL_ALL_SEG_OFF ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : On;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0_SEL_ALL_SEG_ON;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEALLSEGOFF;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READSEG;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVBUTTERFLYFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYP1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYP1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XM1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XM1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYM1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYM1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XP1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XP1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHSRFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : MAXROW;
                        LoadColumnAddress   : MAXCOLUMN;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2_R2_R2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_R2_R2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHSSFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_R0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M2_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVBUTTERFLYWRITEFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYP1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_WriteData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYP1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XM1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XM1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYM1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_WriteData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYM1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XP1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XP1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVTOWALK2FASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 6;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2_R1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_R1_R1;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M10_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODECOLUMNFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b001;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMCOLUMNADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVCELLSTRFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR1_XYP1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR1_XYP1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR1_XM1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR1_XM1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR1_XYP1_1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR1_XYP1_1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEADDR1READADDR2INV;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR2_XP1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR2_XP1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR2_XYM1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR2_XYM1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEADDR1READADDR2INV;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0B_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0B_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1B_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_NEIGHBOR1_XYP1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1B_NEIGHBOR1_XYP1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_NEIGHBOR1_XM1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1B_NEIGHBOR1_XM1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_NEIGHBOR1_XYP1_1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1B_NEIGHBOR1_XYP1_1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEADDR1READADDR2;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_NEIGHBOR2_XP1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1B_NEIGHBOR2_XP1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_NEIGHBOR2_XYM1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1B_NEIGHBOR2_XYM1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEADDR1READADDR2;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : M1B_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : M0B_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVGALDIAGFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXROW;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( MOVE_TARGET_WRITE_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_DIAG_AND_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_DIAG_AND_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READADDR1READADDR2INV;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVHAMMERFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 499;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_A ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : INIT_A;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( HAMMER_WRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : HAMMER_WRITE_HOME_CELL;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( RESET_X ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : RESET_X;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_ROW ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_ROW;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( AWAY_EQUALS_HOME2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : AWAY_EQUALS_HOME2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( RESET_Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : RESET_Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_COLUMN;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READINV_WRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : READINV_WRITE_HOME_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CHANGE_HOME_CELL_ADVANCE_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : HAMMER_WRITE_HOME_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( GOTO_NEXT_BANKADDRESS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : HAMMER_WRITE_HOME_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : INIT_A;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( INIT_B ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_B;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAY_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : CLEAR_ARRAY_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAY_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : CLEAR_ARRAY_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVSLIDEDIAGFX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXCOLUMN;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_REPEAT_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_REPEAT_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_DIAG_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_ROW ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_HOME_CELL_ADVANCE_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INCREMENT_HOME_CELL_ADVANCE_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_AWAY_CELL_ADVANCE_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B_2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B_2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : REWRITE_HOME_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CHANGE_HOME_CELL_ADVANCE_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( GOTO_NEXT_BANKADDRESS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_ROWS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_REPEAT_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_REPEAT_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVSLIDEDIAGFASTXDIAGEVEN ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXCOLUMN;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_REPEAT_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_REPEAT_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_DIAG_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTDIAG;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_ROW ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_HOME_CELL_ADVANCE_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INCREMENT_HOME_CELL_ADVANCE_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_AWAY_CELL_ADVANCE_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B_2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B_2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : REWRITE_HOME_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTDIAG;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CHANGE_HOME_CELL_ADVANCE_ODD_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : CHANGE_HOME_CELL_ADVANCE_ODD_COLUMN;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_DIAG_CELL_ODD_COL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_DIAG_CELL_ODD_COL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B_ODD ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B_ODD;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_ROW_ODD ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW_ODD;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_HOME_CELL_ADVANCE_DIAG_ODD ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INCREMENT_HOME_CELL_ADVANCE_DIAG_ODD;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_AWAY_CELL_ADVANCE_COLUMN_ODD ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW_ODD;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B_ODD_2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B_ODD_2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL_ODD ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : REWRITE_HOME_CELL_ODD;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CHANGE_HOME_CELL_ADVANCE_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( GOTO_NEXT_BANKADDRESS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_ROWS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_REPEAT_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_REPEAT_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVSLIDEDIAGFASTXREAD ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXCOLUMN;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_REPEAT_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_REPEAT_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_DIAG_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_ROW ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Invert_ExpectData;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_HOME_CELL_ADVANCE_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INCREMENT_HOME_CELL_ADVANCE_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INCREMENT_AWAY_CELL_ADVANCE_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( ALIGN_A_TO_B_2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : ALIGN_A_TO_B_2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : REWRITE_HOME_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CHANGE_HOME_CELL_ADVANCE_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( GOTO_NEXT_BANKADDRESS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B_Copy_To_A;
                    BranchToInstruction     : WRITE_DIAG_CELL;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_ROWS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_REPEAT_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_REPEAT_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVWALKCOLFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXROW;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( MOVE_TARGET_WRITE_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_ROW ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_ROW;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_ROWS_COLUMNS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS_COLUMNS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODEFY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : Y1CARRYOUT;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000001;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVBUTTERFLYWRITEFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYP1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYP1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XM1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XM1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYM1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYM1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XP1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XP1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVGALWRRECROWFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXCOLUMN;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CHANGE_TARGET_CELL_ADVANCE_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : CHANGE_TARGET_CELL_ADVANCE_COLUMN;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_READ_WRITE_TARGET ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1A_READ_WRITE_TARGET;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_READ_BASE_WRITE_TARGET ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1B_READ_BASE_WRITE_TARGET;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READADDR1WRITEADDR2;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1E_READ_TARGET_READ_BASE ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1A_READ_WRITE_TARGET;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READADDR1READADDR2;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1F_REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : CHANGE_TARGET_CELL_ADVANCE_COLUMN;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : M0_WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVHAMMER10FASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 3;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_W1_W1;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_R0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHCMINUSFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M5_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M5_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHGFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_R1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1B_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2A_R1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2B_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3A_R1_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3B_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3B_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3C_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3A_R1_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M4A_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M4A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M4B_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M4A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M5A_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M5A_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M5A_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHRAWFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1A_R0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1B_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_W1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1A_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1A_R0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M5_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M5_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHSLFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R1_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_W0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_R0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMATSPPFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVPMOVIFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : MAXROW;
                        LoadColumnAddress   : MAXCOLUMN;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVSCANFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M3_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M3_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODECOLUMNFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b001;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMCOLUMNADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODECOLUMNONLYFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b001;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMCOLUMNADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_ARRAYS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_ARRAYS_REPEAT_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS_COLUMNS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVADDRDECODEROWFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000001;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : NUMROWADDRESSBITS;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( INIT_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INIT_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INIT_COUNTERA ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INIT_COUNTERA;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_WT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1B_WB1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : A_Xor_B;
                    BranchToInstruction     : M1B_WB1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1C_RT0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_WT0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Rotate_B;
                    BranchToInstruction     : M1_WT0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVBUTTERFLYFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYP1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYP1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XM1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XM1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XYM1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XYM1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_NEIGHBOR_XP1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : M1_NEIGHBOR_XP1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHSRFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : MAXROW;
                        LoadColumnAddress   : MAXCOLUMN;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2_R2_R2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_R2_R2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMARCHSSFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_W1_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_W1_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_R0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M2_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTCOLUMN;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVGALROWFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXCOLUMN;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( MOVE_TARGET_WRITE_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_COLUMN_AND_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_COLUMN_AND_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READADDR1READADDR2INV;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVMATSPFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVSLIDDIAGSTRESSFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_BACKGROUND_REPEAT_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_INVERT_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : WRITE_INVERT_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( RESET_BASE_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : RESET_BASE_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_INVERT_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_INVERT_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_NEIGHBOR_XYP1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_NEIGHBOR_XYP1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_NEIGHBOR_XM1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_NEIGHBOR_XM1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_NEIGHBOR_XYM1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_NEIGHBOR_XYM1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_NEIGHBOR_XP1Y ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_NEIGHBOR_XP1Y;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_DATA_BASE_DIAG ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_INVERT_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INC_BASE_DIAG_ADVANCE ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : WRITE_INVERT_DIAG;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : WRITE_BACKGROUND_ROWS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ROWS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_REPEAT_COLUMNS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ROWS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVTOWALK2FASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 6;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M2_R1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M2_R1_R1;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M10_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M0_W0;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVWALKDIAGFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXCOLUMN;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( MOVE_AWAY_WRITE_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : MOVE_AWAY_WRITE_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_DIAGONAL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_DIAGONAL;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : MOVE_AWAY_WRITE_HOME;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVWALKROWFASTY ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : Y1CARRYOUT;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : NONE;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : MAXCOLUMN;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( MOVE_TARGET_WRITE_HOME ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONADDR1WRITEADDR2;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_AWAY_COLUMN ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : READ_AWAY_COLUMN;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( REWRITE_HOME_CELL ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A_Copy_To_B;
                    BranchToInstruction     : MOVE_TARGET_WRITE_HOME;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : WRITE_BACKGROUND_COLUMNS_ROWS_BLOCKS;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( CLEAR_COLUMNS_ROWS_BLOCKS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_COLUMNS_ROWS_BLOCKS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTCOLUMN;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELFIFAREADRECOVERYFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 49;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READHAMMER0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : READHAMMER0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( LOOP ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELFIFAWRITENOPTRANSITIONFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 49;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( NOP ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : NOP;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_MODIFY_WRITEREAD0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITEREAD;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELFIFAWRITERECOVERYFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 49;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITEHAMMER0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITEHAMMER0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITEHAMMER0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELFIFAWRITETRANSITIONFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 49;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITEHAMMER0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITEHAMMER0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITEHAMMER1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITEHAMMER0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITEHAMMER0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYREADLOOPFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 268435455;
                LoadDelayCounter_EndCount   : 255;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( READ0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : READ0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( LOOP ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : READ0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Increment;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : On;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYWRITEANDINVERSELOOPFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 268435455;
                LoadDelayCounter_EndCount   : 255;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_INVERSE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( LOOP ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Increment;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : On;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYWRITELOOPFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 268435455;
                LoadDelayCounter_EndCount   : 255;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( LOOP ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Increment;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : On;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYWRITEREADLOOPFX_FIFA ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 268435455;
                LoadDelayCounter_EndCount   : 255;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( WRITE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : READ0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( WRITE_INVERSE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE_INVERSE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( READ_INVERSE0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READTWO;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( LOOP ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : WRITE0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Increment;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : On;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYDADDRESSRASTERFX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READONE;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVPMOVIRASTERFASTX_NOCDP ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : MAXROW;
                        LoadColumnAddress   : MAXCOLUMN;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Decrement;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Decrement;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R1_R1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READONE;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_DUM ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_DUM;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATIONPIPELINEDEPTH;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_DUMM ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : LoadMin;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : LoadMin;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVPMOVIRASTERFX_SAR ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMax;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : LoadMax;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R0_W1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE_STRETCHED;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( M1_R1_R1 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_R0_W1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READONE_STRETCHED;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : M1_R0_W1;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : NoChange;
                                ExpectDataSequence      : NoChange;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                            Repeat {
                                AddressSequence         : Inverse;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( M1_DUMMY ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M1_DUMMY;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : LoadMin;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : LoadMin;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( CLEAR_ARRAYS ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : CLEAR_ARRAYS;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYREAD10FASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b10101010101010101010101010101010;
                    LoadExpectData          : 32'b10101010101010101010101010101010;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYREAD11FASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b11111111111111111111111111111111;
                    LoadExpectData          : 32'b11111111111111111111111111111111;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYREADFASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READFASTROW;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYWRITE10FASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b10101010101010101010101010101010;
                    LoadExpectData          : 32'b10101010101010101010101010101010;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_R0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_R0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYWRITE11FASTX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 1;
                        NumberY0Bits        : 1;
                        ZCarryIn     : None; 
                        X1CarryIn     : X0CARRYOUT;
                        X0CarryIn     : NONE;
                        Y1CarryIn     : Y0CARRYOUT;
                        Y0CarryIn     : X1CARRYOUT;
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b11111111111111111111111111111111;
                    LoadExpectData          : 32'b11111111111111111111111111111111;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
=======
                    OperationSelect         : WRITEFASTROW;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Increment;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Increment;
                    NextConditions {
                        Z_EndCount : Off; 
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
                        X1_EndCount : On;
                        X0_EndCount : On;
                        Y1_EndCount : On;
                        Y0_EndCount : On;
<<<<<<< HEAD
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELWRITEONEADDRESS ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 4'b0000;
                    LoadExpectData          : 4'b0000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( MEM_BLOCK_WRITE ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : MEM_BLOCK_WRITE;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
=======
>>>>>>> 4e4549e56b67a7b4dea437b7120c3145ada194bf
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( INTELLVARRAYWRITEADDRRANGEFX ) { 
            Type        : CUSTOM; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 32'b00000000000000000000000000000000;
                    LoadExpectData          : 32'b00000000000000000000000000000000;
                    InvertDataWithRowBit    : None;
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 268435455;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNCCUSTOM; 
            } 
            MicroProgram { 
                Instruction ( M0_W0 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : M0_W0;
                    CounterACmd             : Increment;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITEDATA;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : On;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        Algorithm ( SMARCHCHKBCI ) { 
            Type        : IC; 
            AllowMultiSizeMemParallelTest   : ON;
            TargetMemory                    : ALLCOMPATIBLE;
            TreatBankAsRowMSB               : OFF;
            TestRegisterSetup { 
                AddressGenerator {
                    AddressRegister ( A ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : Y1CARRYOUT;
                        X0CarryIn     : None; 
                        Y1CarryIn     : NONE;
                        Y0CarryIn     : None; 
                    } 
                    AddressRegister ( B ) {
                        LoadRowAddress      : 8'b00000000;
                        LoadColumnAddress   : 3'b000;
                        NumberX0Bits        : 0;
                        NumberY0Bits        : 0;
                        ZCarryIn     : None; 
                        X1CarryIn     : NONE;
                        X0CarryIn     : None; 
                        Y1CarryIn     : X1CARRYOUT;
                        Y0CarryIn     : None; 
                    } 
                } 
                DataGenerator {
                    LoadWriteData           : 4'b1010;
                    LoadExpectData          : 4'b1010;
                    InvertDataWithRowBit    : r[0]; 
                    InvertDataWithColumnBit : None;
                } 
                LoadCounterA_EndCount       : 0;
                LoadDelayCounter_EndCount   : -1;
                OperationSetSelect          : SYNC; 
            } 
            MicroProgram { 
                Instruction ( INST0_IDLE_PH_1 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INST0_IDLE_PH_1;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : One;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS1_PH_2 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS1_PH_2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : On;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : One;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS2_PH_2 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS2_PH_2;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : One;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : One;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS3_PH_3 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS3_PH_3;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : One;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS4_PH_3 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS4_PH_3;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READ;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS5_IDLE_PH_4 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS5_IDLE_PH_4;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS6_PH_5 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : On; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS6_PH_5;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : On;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS7_PH_5.5 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : On; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS7_PH_5.5;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS8_PH_6 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : On; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS8_PH_6;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS9_PH_6.5 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : On; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS9_PH_6.5;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : InverseDataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS10_PH_7 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : On; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INS10_PH_7;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : InverseDataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INST11_IDLE_PH_8 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_A;
                    BranchToInstruction     : INST11_IDLE_PH_8;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : NOOPERATION;
                    WriteDataCmd            : Zero;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS12_PH_9 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS12_PH_9;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : On;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS13_PH_9 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS13_PH_9;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READ;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS14_PH_10 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS14_PH_10;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITE;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS15_PH_11 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS15_PH_11;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS16_PH_11 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS15_PH_11;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Set_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( A ) {
                            BranchToInstruction         : INS15_PH_11;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : On;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( INS17_PH_13 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS17_PH_13;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS18_PH_13 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS17_PH_13;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Set_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READ;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                        RepeatLoop ( B ) {
                            BranchToInstruction         : INS17_PH_13;
                            Repeat {
                                AddressSequence         : NoChange;
                                WriteDataSequence       : Inverse;
                                ExpectDataSequence      : Inverse;
                                InhibitLastAddressCount : Off;
                                InhibitDataCompare      : Off;
                            }
                        }
                    } 
                } 
                Instruction ( INS19_PH_15 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS19_PH_15;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Reset_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : On;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Reset_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Decrement;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Decrement;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS20_PH_16 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS20_PH_16;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : On;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS21_PH_16 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS21_PH_16;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Set_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READ;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS22_PH_17 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS22_PH_17;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITE;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS23_PH_18 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS23_PH_18;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Set_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : Set_DataReg;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS24_PH_19 ) { 
                    ApplyToBitSlice         : On;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS24_PH_19;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Set_DataReg;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : READMODIFYWRITE;
                    WriteDataCmd            : MemoryContent;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Hold;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS25_PH_19 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS25_PH_19;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITE;
                    WriteDataCmd            : MemoryContent;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Hold;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : Off;
                        X0_EndCount : Off;
                        Y1_EndCount : Off;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
                Instruction ( INS26_PH_20 ) { 
                    ApplyToBitSlice         : Off;
                    CheckerBoard            : Off; 
                    DisableMemoriesWithoutWriteEnable      : Off;
                    DisableMemoriesWithoutGroupWriteEnable : Off;
                    DisableMemoriesWithoutReadEnable       : Off;
                    DisableMemoriesWithoutOutputEnable     : Off;
                    DisableMemoriesWithoutSelect           : Off;
                    Add_Reg_A_Equals_B      : Off;
                    AddressSelectCmd        : Select_B;
                    BranchToInstruction     : INS26_PH_20;
                    CounterACmd             : Hold;
                    DelayCounterCmd         : Hold;
                    ExpectDataCmd           : Zero;
                    InhibitDataCompare      : Off;
                    InhibitLastAddressCount : Off;
                    InhibitRefresh          : Off;
                    OperationSelect         : WRITE;
                    WriteDataCmd            : MemoryContent;
                    ZAddressCmd      : Hold; 
                    X1AddressCmd      : Increment;
                    X0AddressCmd      : Hold;
                    Y1AddressCmd      : Increment;
                    Y0AddressCmd      : Hold;
                    NextConditions {
                        Z_EndCount : Off; 
                        X1_EndCount : On;
                        X0_EndCount : Off;
                        Y1_EndCount : On;
                        Y0_EndCount : Off;
                        CounterAEndCount        : Off;
                        DelayCounterEndCount    : Off;
                    } 
                } 
            } 
        } 
        OperationSet ( SYNCCUSTOM ) { 
            OperationSetForResumeDiagnosis  : SYNCCUSTOM;
            PipeliningStages ( StrobeDataOut )   : 1;
            Operation ( NOOPERATION ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( NOOPERATIONPIPELINEDEPTH ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITEDATA ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READONE ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READONE_STRETCHED ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READTWO ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READMODIFYWRITE ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READMODIFYWRITE_STRETCHED ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READMODIFYWRITEREAD ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : On;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( WRITEREAD ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( WRITEALLSEGON ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITESEGEVENODD ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITEALLSEGOFF ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READSEG ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READWRITE_SHADOWWRITEREAD ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : On;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READREAD_SHADOWWRITE ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( WRITEREADDP ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READMODIFYWRITEDP ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READMODIFYWRITEREADDP ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : On;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READTWODP ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( NOOPERATION2 ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( NOOPERATIONREAD ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( NOOPERATIONWRITE ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READNOOPERATION ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITENOOPERATION ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITEFASTCOLUMN ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITEFASTROW ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : On;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : On;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITEFASTDIAG ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : On;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : On;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READFASTCOLUMN ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READFASTROW ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : On;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : On;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( NOOPERATIONFASTCOLUMN ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : On;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( NOOPERATIONADDR1WRITEADDR2 ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : On;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READADDR1WRITEADDR2 ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : On;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITEADDR1READADDR2 ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : On;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( WRITEADDR1READADDR2INV ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : On;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : On;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READADDR1READADDR2 ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : On;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READADDR1READADDR2INV ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : On;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : On;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READMODIFYWRITENOCDP ) { 
                AddressForce { 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
        } 
        OperationSet ( SYNC ) { 
            OperationSetForResumeDiagnosis  : SYNC_STRETCHED;
            Operation ( NOOPERATION ) { 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( WRITE ) { 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
            Operation ( READ ) { 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( READMODIFYWRITE ) { 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                    StrobeDataOut;                 
                } 
            } 
            Operation ( WRITEREAD ) { 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : On;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : Off;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
                Tick { 
                    Activate                        : Off;
                    Precharge                       : Off;
                    Refresh                         : Off;
                    Select                          : Off;
                    OutputEnable                    : Off;
                    RAS                             : Off;
                    CAS                             : Off;
                    WriteEnable                     : Off;
                    User0                           : Off;
                    User1                           : Off;
                    User2                           : Off;
                    User3                           : Off;
                    User4                           : Off;
                    User5                           : Off;
                    User6                           : Off;
                    User7                           : Off;
                    User8                           : Off;
                    User9                           : Off;
                    User10                          : Off;
                    User11                          : Off;
                    User12                          : Off;
                    User13                          : Off;
                    User14                          : Off;
                    User15                          : Off;
                    User16                          : Off;
                    User17                          : Off;
                    User18                          : Off;
                    User19                          : Off;
                    User20                          : Off;
                    User21                          : Off;
                    User22                          : Off;
                    User23                          : Off;
                    Address                         : Row;
                    Data                            : Z;
                    AddressForce                    : Off;
                    ColumnAddressCount              : Off;
                    RowAddressCount                 : Off;
                    SwitchAddressRegister           : Off;
                    ConcurrentWriteRowAddress       : Off;
                    ConcurrentWriteColumnAddress    : Off;
                    ConcurrentWriteDataPolarity     : NoChange;
                    ConcurrentWriteEnable           : Off;
                    ATD                             : Off;
                    ShadowReadAddress               : Off;
                    ShadowReadEnable                : Off;
                    ReadEnable                      : On;
                    EvenGroupWriteEnable            : Off;
                    OddGroupWriteEnable             : Off;
                    ConcurrentReadRowAddress        : Off;
                    ConcurrentReadColumnAddress     : Off;
                    ConcurrentReadEnable            : Off;
                    InvertExpectData                : Off;
                    InvertWriteData                 : Off;
                    ConcurrentEvenGroupWriteEnable  : On;
                    ConcurrentOddGroupWriteEnable   : On;
                } 
            } 
        } 
    } 
} 
