//--------------------------------------------------------------------------
//
//  Unpublished work. Copyright 2022 Siemens
//
//  This material contains trade secrets or otherwise confidential 
//  information owned by Siemens Industry Software Inc. or its affiliates 
//  (collectively, SISW), or its licensors. Access to and use of this 
//  information is strictly limited as set forth in the Customer's 
//  applicable agreements with SISW.
//
//--------------------------------------------------------------------------
//  File created by: Tessent Shell
//          Version: 2022.4
//       Created on: Tue Oct 24 19:28:52 PDT 2023
//--------------------------------------------------------------------------

Core(firebird7_in_gate2_tessent_occ_clk) {
   Occ {
      version: 4;
      ijtag_scan_interface: on;
      type: standard;
      Interface {
         FastClock(fast_clock) {
            persistent_pin: tessent_persistent_cell_fast_clock_buf/clkout;
         }
         SlowClock(slow_clock) {
            persistent_pin: tessent_persistent_cell_slow_clock_buf/clkout;
         }
         ScanEnable(scan_en) {
            persistent_pin: tessent_persistent_cell_scan_en_buf/o;
         }
         ScanInput(scan_in) {
            persistent_pin: tessent_persistent_cell_scan_in_buf/o;
         }
         ScanOutput(scan_out) {
            persistent_pin: tessent_persistent_cell_scan_out_buf/o;
         }
         ShiftRegisterClock(occ_control/tessent_persistent_cell_cgc_SHIFT_REG_CLK/clkout) {
         }
         GatedFastClock(tessent_persistent_cell_clock_out_mux/clk2) {
         }
         GatedClock(tessent_persistent_cell_clock_out_mux/clkout) {
            source: fast_clock;
         }
      }
      Parameters {
         iproc: setup;
         FastCaptureMode {
            parameter: fast_capture_mode;
            type: boolean;
            default_value: off;
         }
         ActiveUpstreamParentOcc {
            parameter: active_upstream_parent_occ;
            type: boolean;
            default_value: off;
         }
         CaptureCycleWidth {
            parameter: capture_window_size;
            type: int;
            legal_int: 1..5;
            default_value: 5;
         }
      }
      ControlBits {
         ControlBit(occ_control/ShiftReg/FF[0]) {
         }
         ControlBit(occ_control/ShiftReg/FF[1]) {
         }
         ControlBit(occ_control/ShiftReg/FF[2]) {
         }
         ControlBit(occ_control/ShiftReg/FF[3]) {
         }
         ControlBit(occ_control/ShiftReg/FF[4]) {
         }
      }
      capture_trigger: shift_en;
      static_clock_control: off;
   }
}
  
  
